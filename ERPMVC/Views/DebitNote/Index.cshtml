@using System.Security.Claims
@{
    ViewData["Title"] = "Nota de Débito";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<style>
    hr.solid {
        border-top: 1px solid #bbb;
        width:100%;
    }
</style>
<script>
    $(document).ready(function () {
        ClearSession();
    });

    function ClearSession() {
        var dataObject = ["listadoproductosdebitnote"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddCotizacion() {
       // $('#myModalSalesOrder').find(':input').not(':submit').val('');
         //$('#myModalSalesOrder').modal('show');

        ClearSession();

         var dataObject = {
             DebitNoteId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwDebitNote","DebitNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log(result);
                $("#divDebitNote").html('');
                $("#divDebitNote").html(result);
               
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                  MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });


    }

    function EditCotizacion(e) {
        e.preventDefault();

        ClearSession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            DebitNoteId: dataItem.DebitNoteId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwDebitNote", "DebitNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#divDebitNote").html('');
                $("#divDebitNote").html(result);
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                  MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });
    }

    function ImprimirCotizacion(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("SFDebitNote", "DebitNote")/' + dataItem.DebitNoteId;
                    var win = window.open(url, '_blank');
                    win.focus();
    }

 

    function GenerarNotaDebito(e) {
        if (confirm('Esta seguro de generar una Nota de Debito?')) {
            e.preventDefault();
            debugger;
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                DebitNoteId: dataItem.DebitNoteId,
            };

            $.ajax({
                url: '@Url.Action("GenerarNotaDebito", "DebitNote")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    MostrarMensaje('Nota de Debito Generada!', "success", "Satisfactorio", 6000);
                    RefreshCotizaciones();
                    return;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }


    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (this.Estado != "Revisado") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();

            }
            if (this.Estado != "Borrador") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-GenerarNotaDebito').hide();
            }
            if (this.Estado != "Revisión") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Revisar').hide();
            }
            if (this.Estado != "Emitido") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Imprimir').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Anular').hide();

            }


        })
    }

    function RefreshCotizaciones() {
        var grid = $("#gridDebitNotes").getKendoGrid();
        grid.dataSource.read();
    }

    function closecondition() {
        $('#myModalConditions').modal('hide');
    }



    function Anular(e) {

        e.preventDefault();
        debugger;
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            DebitNoteId: dataItem.DebitNoteId,
        };

        if (!confirm('Esta seguro de anular la Nota de Debito No ' + dataItem.NumeroDEI + '?')) {
            return;
        }

        $.ajax({
            url: '@Url.Action("Anular", "DebitNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                MostrarMensaje('Nota de Debito Anulada!', "success", "Satisfactorio", 6000);
                RefreshCotizaciones();
                return;
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
            }
        });

    }


</script>

<h3 class="text-themecolor">Nota Débito</h3>

@(Html.Kendo().Grid<ERPMVC.Models.DebitNote>()
                                      .Name("gridDebitNotes")
                                      .Columns(columns =>
                                      {
                                          
                                              columns.Command(command =>
                                              {
                                                  command.Custom("GenerarNotaDebito").Text(" ").IconClass("fa fa-file-invoice").Click("GenerarNotaDebito");
                                                  command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCotizacion");
                                                  command.Custom("Editar").Text(" ").IconClass("far fa-list-alt").Click("EditCotizacion");
                                                  command.Custom("Anular").Text(" ").IconClass("fa fa-ban").Click("Anular");
                                                  
                                              }).Title("Acciones").Width(160);
                                          
                                          columns.Bound(p => p.DebitNoteId).Title("No Ref.").Width(100).Visible(true);
                                          columns.Bound(p => p.DebitNoteDate).Format("{0:dd/MM/yyyy}").Title("Fecha").Width(150);
                                          columns.Bound(p => p.NumeroDEI).Title("Numeración SAR").Width(150);
                                          columns.Bound(p => p.CustomerName).Title("Cliente").Width(250);
                                          columns.Bound(p => p.Amount).Title("Monto").Width(150).Format("{0:N2}")
                                          .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
                                          columns.Bound(p => p.DebitNoteDueDate).Format("{0:dd/MM/yyyy}").Title("Fecha de Vencimiento").Width(250);
                                          columns.Bound(p => p.BranchName).Title("Sucursal").Width(250);
                                          columns.Bound(p => p.Estado).Title("Estado").Width(250);
                                      })
                                          .Filterable(f => f.Operators(o => o.ForString(s => s
                                                   .Clear()
                                                   .Contains("Contiene")
                                                   .DoesNotContain("No contiene")
                                                   .EndsWith("Termina con")
                                                   .IsEqualTo("Es igual a")
                                                   .IsNotEqualTo("No es igual a")
                                                   .IsNull("Es nulo")
                                                   .StartsWith("Inicia con")


                                             )
                                             .ForNumber(n => n
                                               .Clear()
                                               .IsEqualTo("Es igual a")
                                               .IsGreaterThan("Es mayor que")
                                               .IsLessThan("Es menor que")
                                               .IsNull("Es nulo")
                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             )
                                             .ForDate(d => d
                                             .Clear()
                                             .IsEqualTo("Es igual que")
                                             .IsGreaterThan("Es mayor que")
                                             .IsLessThan("Es menor que")
                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             .IsNotEqualTo("No es igual que")
                                              )
                                           ))
                                      .ToolBar(tools =>
                                      {
                                          // tools.Create();
                                          if (permisos.HasClaim("Ventas.Nota de Debito.Agregar", "true"))
                                          {
                                              
                                          }
                                               tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacion();" });
                                              tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                              tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                          

                                      })
                                       .Editable(e => e.Mode(GridEditMode.PopUp))
                                        .Sortable()
                                        .AutoBind(true)
                                        .Pageable(s => s
                                        .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                        .Empty("No hay datos."))
                                        )
                                        .Filterable()
                                        .Scrollable()
                                        // .ClientDetailTemplateId("template")
                                        .Pdf(pdf => pdf.FileName("Nota_Débito_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                          .Excel(excel => excel.FileName("Nota_Débito_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                        //.Events(e => e.DataBound("dataBound"))
                                        .DataSource(dataSource =>

                                       dataSource
                                       //.Ajax()
                                       .WebApi()
                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.DebitNoteId);
                                            model.Field(p => p.DebitNoteName).Editable(true);
                                            model.Field(p => p.DebitNoteId).Editable(true);


                                        })
                                        .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                                        .Events(events =>
                                        {
                                            events.Error("error_handler");
                                            //events.upda("EditHandler");

                                        })
                                        .Read(read => read.Action("Get", "DebitNote"))
                                        .Create(create => create.Action("Insert", "DebitNote"))
                                        .Update(update => update.Action("Update", "DebitNote", new { id = "{0}" }))
                                        .Destroy(destroy => destroy.Action("Delete", "DebitNote", new { id = "{0}" }))
                                  ).Events(e => e.DataBound("dataBound"))
)

<div id="divDebitNote">
    @await Html.PartialAsync("pvwDebitNote", new ERPMVC.DTO.DebitNoteDTO { DebitNoteId = 0, DebitNoteDate = DateTime.Now,  DebitNoteDueDate = DateTime.Now.AddDays(30) })
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridDebitNotes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridDebitNotes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-GenerarNotaDebito", "Generar Nota de Debito Fiscal!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-Editar", "Ver Detalle");
     setRowButtonTooltip(".k-grid-Anular", "Anular");

</script>


