@model ERPMVC.DTO.DebitNoteDTO
@using System.Security.Claims
@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosDebitNote"];
}


<script>


    function GetDebitNoteId() {
       //debugger;
       // console.log($("#DescriptionDetail").val());
        if ($("#Quantity").val() != null && $("#Quantity").val() != 0 || @Model.DebitNoteId > 0) {
            var subproductname = '', unidaddemedida = ''; accountname = '', taxname = '';
            if ($("#UnitOfMeasureId") != null) {
                if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                    unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
                }
            }

            if ($("#AccountId") != null) {
                if ($("#AccountId").data("kendoDropDownList") != null) {
                    accountname = $("#AccountId").data("kendoDropDownList").text();
                }
            }


            if ($("#TaxId") != null) {
                if ($("#TaxId").data("kendoDropDownList") != null) {
                    taxname = $("#TaxId").data("kendoDropDownList").text();
                }
            }

            var displayedData = $("#gridDebitNoteDetail").data().kendoGrid.dataSource.view();
            var id = -999999;
           //debugger;
            if (Number($("#DebitNoteLineId").val()) === 0) {
                if (displayedData.length > 0) {
                    for (var i = 0; i < displayedData.length; i++) {
                        //console.log('Linea:' + displayedData[i].DebitNoteLineId);
                        //console.log('Linea:' + id);
                        if (displayedData[i].DebitNoteLineId > id)
                            id = displayedData[i].DebitNoteLineId;

                    }

                    id = id + 1;
                }
                else if (Number($("#AccountId").val()) > 0) {
                    id = 1;
                }
            }
            else {
                id = $("#DebitNoteLineId").val();
            }


            return {
                //ProductId : id,
                DebitNoteLineId: id,
                DebitNoteId: @Model.DebitNoteId,
                //ProductId: $("#ProductId").val(),
                //SubProductId: $("#SubProductId").val(),
                //UnitOfMeasureId: $("#UnitOfMeasureId").val(),
                //UnitOfMeasureName: unidaddemedida,
                //SubProductId: $("#SubProductId").val(),
                //AccountId: $("#AccountId").val(),
                //AccountName: accountname,
                //SubProductName: subproductname,
                //UnitOfMeasureId: $("#UnitOfMeasureId").val(),
                //UnitOfMeasureName: unidaddemedida,
                Description: $("#DescriptionDetail").val(),
                AccountId: $("#AccountId").val(),
                AccountName: accountname,
                Quantity: $("#Quantity").val(),
                Price: $("#Price").val(),
                Amount: $("#AmountLine").val(),
                DiscountPercentage: $("#DiscountPercentage").val(),
                DiscountAmount: $("#DiscountAmount").val(),
                SubTotal: $("#SubTotalLine").val(),
                TaxPercentage: $("#TaxPercentage").val(),
                TaxId: $("#TaxId").val(),
                TaxCode: taxname,
                TaxAmount: $("#TaxAmount").val(),
                Total: $("#TotalLine").val(),
            }
        }
        else {
            return false;
        }
    }

    function RefreshDebitNoteDetail() {
        var grid = $("#gridDebitNoteDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }


    function AddCotizacionDetalle() {

        if ($("#ProductId").data("kendoDropDownList").text() == "Seleccione el Servicio" || $("#ProductId").data("kendoDropDownList").text() == null) {
            $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
            //notification.show({
            //    title: "Validación",
            //    message: "Debe de llenar antes la nota de débito!"
            //}, "error");
            //$.toast({
            //    heading: 'Validación',
            //    text: "Debe de llenar antes la nota de débito!",
            //    position: 'top-right',
            //    loaderBg: '#ff6849',
            //    icon: 'error',
            //    hideAfter: 30000,
            //    stack: 6
            //});
             MostrarMensaje("Debe de llenar antes la nota de débito!", "Error", "Validación", 6000);
        } else {
            CalcularTotalDocumento();
            //document.getElementsByClassName('text-danger')[0].firstElementChild.innerHTML = '';
            var validator = $("#frmSalesOrderLine").data("kendoValidator");
            validator.hideMessages();

            $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
            $('#TaxId').data("kendoDropDownList").value('');
            $("#DebitNoteLineId").val(0);
            $('#DescriptionDetail').val('');
            console.log(1);
            //$('#SubProductId').data("kendoDropDownList").value(0);
            $("#Quantity").data("kendoNumericTextBox").value(0);
            $("#Price").data("kendoNumericTextBox").value(0);
            //$("#Amount").data("kendoNumericTextBox").value(0);
            $("#SubTotalLine").data("kendoNumericTextBox").value(0);
            $("#TaxAmount").data("kendoNumericTextBox").value(0);
            $("#AmountLine").data("kendoNumericTextBox").value(0);
            $("#TotalLine").data("kendoNumericTextBox").value(0);
            $("#AccountId").data("kendoDropDownList").value('');
            $("#DiscountPercentage").data("kendoNumericTextBox").value(0);
            $("#DiscountAmount").data("kendoNumericTextBox").value(0);
            //$("#UnitOfMeasureId").data("kendoDropDownList").value('');
            $("#TaxPercentage").data("kendoNumericTextBox").value(0);
            var x = document.getElementsByClassName("k-invalid");
            if (x.length > 0) {
                $("span").removeClass("k-invalid");
            }
            var validator = $("#frmSalesOrderLine").data("kendoValidator");
            validator.hideMessages();
            $('#myModalDebitNoteLine').modal('show');
        }
        //if ($("#ProductId").val() !== '' || $("#ProductId").val() !== '0' || $("#ProductId").val() !== 'Seleccione el  producto') {



        //    $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
        //    $('#TaxId').data("kendoDropDownList").value('');
        //    $('#DescriptionDetail').val('');
        //    console.log(1);
        //    //$('#SubProductId').data("kendoDropDownList").value('');
        //    $("#Quantity").data("kendoNumericTextBox").value(0);
        //    $("#Price").data("kendoNumericTextBox").value(0);
        //    $("#Amount").data("kendoNumericTextBox").value(0);
        //    $("#SubTotalLine").data("kendoNumericTextBox").value(0);
        //    $("#TaxAmount").data("kendoNumericTextBox").value(0);
        //    $("#AmountLine").data("kendoNumericTextBox").value(0);
        //    $("#TotalLine").data("kendoNumericTextBox").value(0);
        //    $("#AccountId").data("kendoDropDownList").value('');
        //    //$("#UnitOfMeasureId").data("kendoDropDownList").value('');
        //    $("#TaxPercentage").data("kendoNumericTextBox").value(0);
        //    $('#myModalDebitNoteLine').modal('show');

        //}
        //else {
        //    $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
        //    var notification = $("#notification").data("kendoNotification");
        //    notification.show({
        //        title: "Validación",
        //        message: "Debe de llenar antes la nota de debito!"
        //    }, "error");
        //}

        return true;
    }

    function llenarsubproduct() {
        var combobox = $('#SubProductId').getKendoDropDownList();
        if (combobox != null) {
            var dataObject = { 'ProductId': $("#ProductId").val() };
            $.ajax({
                url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (data) {
                    combobox.setDataSource(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    //notification.show({
                    //    title: "Validación",
                    //    message: textStatus + ": " + XMLHttpRequest.responseText
                    //}, "error");
                    //$.toast({
                    //    heading: 'Validación',
                    //    text: textStatus + ": " + XMLHttpRequest.responseText,
                    //    position: 'top-right',
                    //    loaderBg: '#ff6849',
                    //    icon: 'error',
                    //    hideAfter: 30000,
                    //    stack: 6
                    //});
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }

    var hcustom = 0;
    function EditCotizacionDetalle(e) {

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        // //debugger;
        if (dataItem.DebitNoteId != 0) {

             $("#btnActualizarCotizacionLinea").prop("disabled", true);
            var subproducto = 0;
            var dataObject = { 'DebitNoteLineId': dataItem.DebitNoteLineId };

            //console.log(DebitNoteLineId);
            $.ajax({
                url: '@Url.Action("pvwDebitNoteLine", "DebitNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    var txt = $(data);

                    var combobox = $('#SubProductId').getKendoDropDownList();
                    if (combobox != null) {
                        var found = $("#SubProductId", txt);
                        subproducto = $(found).val();
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    //notification.show({
                    //    title: "Validación",
                    //    message: textStatus + ": " + XMLHttpRequest.responseText
                    //}, "error");
                    //$.toast({
                    //    heading: 'Validación',
                    //    text: textStatus + ": " + XMLHttpRequest.responseText,
                    //    position: 'top-right',
                    //    loaderBg: '#ff6849',
                    //    icon: 'error',
                    //    hideAfter: 30000,
                    //    stack: 6
                    //});
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });

            $("#frmSalesOrderLine :input").prop("disabled", true);
            //llenarsubproduct();
            var combobox = $('#SubProductId').getKendoDropDownList();
            if (combobox != null) {
                combobox.value(subproducto);
                combobox.trigger('change');

            }
        }
        else {
            var x = document.getElementsByClassName("k-invalid");
            if (x.length > 0) {
                $("span").removeClass("k-invalid");
            }
            var validator = $("#frmSalesOrderLine").data("kendoValidator");
            validator.hideMessages();
            //var dataObject = { 'DebitNoteId': 0, 'IdCD': ($("#cbxBuscarCertificadosDeposito").val() == '' ? 0 : $("#cbxBuscarCertificadosDeposito").val()) };
            //console.log(dataObject);
           @*$.ajax({
                url: '@Url.Action("pvwDebitNoteLine", "DebitNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    var txt = $(data);

                    //var combobox = $('#SubProductId').getKendoDropDownList();
                    //if (combobox != null) {
                    //    var found = $("#SubProductId", txt);
                    //    subproducto = $(found).val();
                    //}
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });*@


            $("#btnActualizarCotizacionLinea").prop("disabled", false);
            $("#DebitNoteLineId").val(dataItem.DebitNoteLineId);
            //$("#IdCD").val($("#cbxBuscarCertificadosDeposito").val());
            //hcustom = $("#CustomerId").val();
            //console.log(hcustom);
            //if(Number($("#IdCD").val()) === 0)
            //{
                llenarsubproduct();
            //}
           // $("#AccountId").data("kendoDropDownList").value(dataItem.AccountId);
            //$("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
            //$("#SubProductId").data("kendoDropDownList").dataSource.read();
            //$("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
           // $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
          //  $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#TaxId").data("kendoDropDownList").value(dataItem.TaxId);
            $("#AccountId").data("kendoDropDownList").value(dataItem.AccountId);
            $("#DescriptionDetail").val(dataItem.Description);

            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#AmountLine").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountAmount);
            //$("#Amount").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);

        }




        $('#myModalDebitNoteLine').modal('show');

    }


    function Delete(e) {
       //debugger;
        e.preventDefault();
        if (confirm('¿Esta seguro que desea eliminar la fila?')) {
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            debugger
            $.ajax({
                url: '@Url.Action("Delete", "DebitNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                   //debugger;
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    //notification.show({
                    //    title: "Validación",
                    //    message: textStatus + ": " + XMLHttpRequest.responseText
                    //}, "error");
                    //$.toast({
                    //    heading: 'Validación',
                    //    text: textStatus + ": " + XMLHttpRequest.responseText,
                    //    position: 'top-right',
                    //    loaderBg: '#ff6849',
                    //    icon: 'error',
                    //    hideAfter: 30000,
                    //    stack: 6
                    //});
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
            var grid = $("#gridDebitNoteDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //$('#gridDebitNoteDetail').kendoGrid('destroy').empty();
            //$("#gridDebitNoteDetail").data("kendoGrid") = list;
            //if (list.Count == 0) {
            //    $("#gridDebitNoteDetail").data("kendoGrid") = null;
            //}
            //grid.dataSource.data();
            //    var newDataSource = new kendo.data.DataSource({
            //    data: []
            //});
            //grid.setDataSource(newDataSource);
            CalcularTotalDocumento();
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }

</script>



<div class="box">
    <h3 class="text-themecolor">Detalle de Nota de Débito</h3>

    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.DebitNoteLine>()
                                                                                  .Name("gridDebitNoteDetail")
                                                                                  .Columns(columns =>
                                                                                  {
                                                                                      
                                                                                          columns.Command(command =>
                                                                                          {

                                                                                              if (Model.DebitNoteId == 0)
                                                                                              {
                                                                                                  
                                                                                                      command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                                                                
                                                                                                      command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                                                  
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                  if (permisos.HasClaim("Ventas.Nota de Debito.Editar Nota de Debito Detalle", "true"))
                                                                                                  {
                                                                                                      command.Custom("Editar").Text(" ").IconClass("far fa-list-alt").Click("EditCotizacionDetalle");
                                                                                                  }
                                                                                              }

                                                                                              // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                                              //  command.Edit(); command.Destroy();

                                                                                          }).Width(150).Title("Acciones");
                                                                                      
                                                                                      //columns.Bound(p => p.ProductId).Title("Id Linea").Width(150);
                                                                                      columns.Bound(p => p.DebitNoteLineId).Title("Id Línea").Width(150);
                                                                                      //columns.Bound(p => p.DebitNoteId).Title("Debito Id").Width(150);
                                                                                      columns.Bound(p => p.AccountId).Title("Cuenta").Width(150).Hidden(true);
                                                                                      columns.Bound(p => p.AccountName).Title("Nombre Cuenta").Width(250);

                                                                                      //columns.Bound(p => p.SubProductId).Title("IdProducto").Width(150);
                                                                                      //columns.Bound(p => p.SubProductName).Title("Producto").Width(150);
                                                                                      columns.Bound(p => p.Description).Title("Descripción").Width(200);
                                                                                      //columns.Bound(p => p.UnitOfMeasureId).Title("Unidad de medida").Width(150);

                                                                                      columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(150);
                                                                                      columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio").Format("{0:n2}").Width(150);

                                                                                      columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Visible(false);
                                                                                      columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Visible(false);
                                                                                      columns.Bound(p => p.Amount).Format("{0:n2}").Title("Sub Total").Visible(false);
                                                                                      columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Descuentos").Visible(false);
                                                                                      columns.Bound(p => p.DiscountPercentage).Format("{0:n2}").Title("Descuentos").Visible(false);
                                                                                      columns.Bound(p => p.TaxCode).Format("{0:n2}").Title("Descuentos").Visible(false);
                                                                                      columns.Bound(p => p.TaxId).Title("Descuentos").Visible(false);
                                                                                      columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Impuestos").Visible(false);
                                                                                      columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(150);

                                                                                  })
                                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                               .Clear()
                                                                               .Contains("Contiene")
                                                                               .DoesNotContain("No contiene")
                                                                               .EndsWith("Termina con")
                                                                               .IsEqualTo("Es igual a")
                                                                               .IsNotEqualTo("No es igual a")
                                                                               .IsNull("Es nulo")
                                                                               .StartsWith("Inicia con")


                                                                         )
                                                                         .ForNumber(n => n
                                                                           .Clear()
                                                                           .IsEqualTo("Es igual a")
                                                                           .IsGreaterThan("Es mayor que")
                                                                           .IsLessThan("Es menor que")
                                                                           .IsNull("Es nulo")
                                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         )
                                                                         .ForDate(d => d
                                                                         .Clear()
                                                                         .IsEqualTo("Es igual que")
                                                                         .IsGreaterThan("Es mayor que")
                                                                         .IsLessThan("Es menor que")
                                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         .IsNotEqualTo("No es igual que")
                                                                          )
                                                                       ))
                                                                                  .ToolBar(tools =>
                                                                                  {
                                                                                      if (Model.editar == 1)
                                                                                      {
                                                                                          if (Model.DebitNoteId == 0)
                                                                                          {
                                                                                              if (permisos.HasClaim("Ventas.Nota de Debito.Agregar Nota de Debito Detalle", "true"))
                                                                                              {
                                                                                                  tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                                                              }
                                                                                          }



                                                                                      }
                                                                                          tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                          tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                      

                                                                                  })
                                                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                                    .Sortable()
                                                                                    .AutoBind(true)
                                                                                    .Pageable(s => s
                                                                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                                                    .Empty("No hay datos."))
                                                                                    .Enabled(false))
                                                                                    .Events(e => e.DataBound("CalcularTotalDocumento"))
                                                                                    //.Events(e => e.DataBound("CalcularTotalDocumento"))
                                                                                    .Filterable()
                                                                                    .Scrollable()
                                                                                    // .ClientDetailTemplateId("template")
                                                                                    .Pdf(pdf => pdf.FileName("Nota_Débito_Detalle_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                      .Excel(excel => excel.FileName("Nota_Débito_Detalle_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                    //.Events(e=>e.Save("onsave"))
                                                                                    .DataSource(dataSource =>

                                                                                   dataSource
                                                                                   //.Ajax()
                                                                                   .WebApi()

                                                                                    .ServerOperation(true)
                                                                                    .Model(model =>
                                                                                    {
                                                                                        model.Id(p => p.DebitNoteLineId);
                                                                                        model.Field(p => p.DebitNoteLineId).Editable(false);
                                                                                        model.Field(p => p.DebitNoteId).Editable(false);

                                                                                    })
                                                                                    .Sort(s => s.Add(m => m.DebitNoteLineId).Descending())
                                                                                    .Events(events =>
                                                                                    {
                                                                                        events.Error("error_handler");
                                                                                        //events.upda("EditHandler");

                                                                                    })
                                                                                    .Read(read => read.Action("GetDebitNoteLineByDebitNoteId", "DebitNoteLine").Data("GetDebitNoteId"))
                                                                              //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                                              //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                                              //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                                              //.Destroy(destroy => destroy.Action("Delete", "DebitNoteLine").Type(HttpVerbs.Post))
                                                                              )
        )

    </div>
</div>


<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridDebitNoteDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridDebitNoteDetail").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }

        setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
        //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    if (@Model.DebitNoteId > 0) {
        setRowButtonTooltip(".k-grid-Editar", "Ver Detalle");
    }
    else {
        setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    }

</script>