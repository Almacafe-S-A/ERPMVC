@model ERPMVC.DTO.DebitNoteDTO



<script>


    function GetDebitNoteId() {
       // console.log($("#DescriptionDetail").val());
        var subproductname = '', unidaddemedida = ''; accountname = '', taxname='';
        if ($("#UnitOfMeasureId") != null) {
            if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
            }
        }

        if ($("#AccountId") != null) {
            if ($("#AccountId").data("kendoDropDownList") != null) {
                accountname = $("#AccountId").data("kendoDropDownList").text();
            }
        }


        if ($("#TaxId") != null) {
            if ($("#TaxId").data("kendoDropDownList") != null) {
                taxname = $("#TaxId").data("kendoDropDownList").text();
            }
        }

        var displayedData = $("#gridDebitNoteDetail").data().kendoGrid.dataSource.view();
        var id = -999999;
        debugger;
        if (Number($("#ProductId").val()) === 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    //console.log('Linea:' + displayedData[i].DebitNoteLineId);
                    //console.log('Linea:' + id);
                    if (displayedData[i].ProductId > id)
                        id = displayedData[i].ProductId;

                }

                id = id + 1;
            }
            else if ($("#Quantity").val() > 0) {
                id =  1;
            }
        }
        else {
            id = $("#ProductId").val();
        }


        return {
                ProductId : id,
                DebitNoteLineId: $("#DebitNoteLineId").val(),
                DebitNoteId: @Model.DebitNoteId,
                //ProductId: $("#ProductId").val(),
                //SubProductId: $("#SubProductId").val(),
                //UnitOfMeasureId: $("#UnitOfMeasureId").val(),
                //UnitOfMeasureName: unidaddemedida,
                Description: $("#DescriptionDetail").val(),
                AccountId: $("#AccountId").val(),
                AccountName: accountname,
                Quantity: $("#Quantity").val(),
                Price: $("#Price").val(),
                Amount: $("#AmountLine").val(),
                DiscountPercentage: $("#DiscountPercentage").val(),
                DiscountAmount: $("#DiscountAmount").val(),
                SubTotal: $("#SubTotalLine").val(),
                TaxPercentage: $("#TaxPercentage").val(),
                TaxId:$("#TaxId").val(),
                TaxCode: taxname,
                TaxAmount: $("#TaxAmount").val(),
                Total: $("#TotalLine").val(),
            }
        }

    function RefreshDebitNoteDetail() {
        var grid = $("#gridDebitNoteDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }


    function AddCotizacionDetalle() {
        var notification = $("#notification").data("kendoNotification");
            $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
            $('#TaxId').data("kendoDropDownList").value(0);
            $('#myModalDebitNoteLine').modal('show');
        return true;
    }

    function llenarsubproduct() {
        var combobox = $('#SubProductId').getKendoDropDownList();
        if (combobox != null) {
            var dataObject = { 'ProductId': $("#ProductId").val() };
            $.ajax({
                url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (data) {
                    combobox.setDataSource(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });
        }
    }

    var hcustom = 0;
    function EditCotizacionDetalle(e) {
        alert("Edit");
        var notification = $("#notification").data("kendoNotification");
        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //  debugger;
        if (dataItem.DebitNoteId = 0) {
             $("#btnActualizarCotizacionLinea").prop("disabled", true);
            var subproducto = 0;
            var dataObject = { 'Id': dataItem.DebitNoteLineId };
            $.ajax({
                url: '@Url.Action("pvwDebitNoteLine", "DebitNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    var txt = $(data);

                    var combobox = $('#SubProductId').getKendoDropDownList();
                    if (combobox != null) {
                        var found = $("#SubProductId", txt);
                        subproducto = $(found).val();
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            $("#frmSalesOrderLine :input").prop("disabled", true);
            //llenarsubproduct();
            var combobox = $('#SubProductId').getKendoDropDownList();
            if (combobox != null) {
                combobox.value(subproducto);
                combobox.trigger('change');

            }
        }
        else {

            var dataObject = { 'DebitNoteId': 0, 'IdCD': ($("#cbxBuscarCertificadosDeposito").val() == '' ? 0 : $("#cbxBuscarCertificadosDeposito").val()) };
            //console.log(dataObject);
           @*$.ajax({
                url: '@Url.Action("pvwDebitNoteLine", "DebitNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    var txt = $(data);

                    //var combobox = $('#SubProductId').getKendoDropDownList();
                    //if (combobox != null) {
                    //    var found = $("#SubProductId", txt);
                    //    subproducto = $(found).val();
                    //}
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });*@


            $("#btnActualizarCotizacionLinea").prop("disabled", false);
            $("#DebitNoteLineId").val(dataItem.DebitNoteLineId);
            $("#IdCD").val($("#cbxBuscarCertificadosDeposito").val());
            hcustom = $("#CustomerId").val();
            //console.log(hcustom);
            if(Number($("#IdCD").val()) === 0)
            {
                llenarsubproduct();
            }
            $("#SubProductId").data("kendoDropDownList").dataSource.read();
            $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
          //  $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#TaxId").data("kendoDropDownList").value(dataItem.TaxId);
            $("#DescriptionDetail").val(dataItem.Description);

            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#Amount").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);
        }




        $('#myModalDebitNoteLine').modal('show');

    }


        function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "DebitNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridDebitNoteDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }

</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.DebitNoteLine>()
                                                  .Name("gridDebitNoteDetail")
                                                  .Columns(columns =>
                                                  {
                                                      columns.Command(command =>
                                                      {
                                                          if (Model.editar == 1)
                                                          {
                                                              command.Destroy().IconClass("fa fa-trash-alt");
                                                              // command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                          }
                                                          command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                          // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                          //  command.Edit(); command.Destroy();
                                                      }).Width(150);
                                                      columns.Bound(p => p.ProductId).Title("Id Linea").Width(150);
                                                      columns.Bound(p => p.DebitNoteLineId).Title("Id Linea").Visible(false);
                                                      columns.Bound(p => p.DebitNoteId).Title("Debito Id").Width(150);
                                                      //columns.Bound(p => p.SubProductId).Title("IdProducto").Visible(false);
                                                      // columns.Bound(p => p.SubProductName).Title("Producto").Width(150);
                                                      columns.Bound(p => p.Description).Title("Descripcion").Width(150);
                                                      columns.Bound(p => p.AccountId).Title("Cuenta Id").Width(150);
                                                      columns.Bound(p => p.AccountName).Title("Nombre Cuenta").Width(150);
                                                      columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(150);
                                                      columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio").Format("{0:n2}").Width(150);
                                                      //columns.Bound(p => p.UnitOfMeasureId).Title("Unidad de medida").Visible(false);
                                                      columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Visible(false);
                                                      columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Visible(false);
                                                      columns.Bound(p => p.Amount).Format("{0:n2}").Title("Sub Total").Visible(false);
                                                      columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Descuentos").Visible(false);
                                                      columns.Bound(p => p.DiscountPercentage).Format("{0:n2}").Title("Descuentos").Visible(false);
                                                      columns.Bound(p => p.TaxCode).Format("{0:n2}").Title("Descuentos").Visible(false);
                                                      columns.Bound(p => p.TaxId).Title("Descuentos").Visible(false);
                                                      columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Impuestos").Visible(false);
                                                      columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(150);

                                                  })
                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                                                  .ToolBar(tools =>
                                                  {
                                                      if (Model.editar == 1)
                                                      {
                                                          if (Model.DebitNoteId == 0)
                                                          { 
                                                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                          }

                                                          

                                                      }

                                                      tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                                      tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                                                  })
                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                    .Sortable()
                                                    .AutoBind(true)
                                                    .Pageable()
                                                    .Events(e => e.DataBound("CalcularTotalDocumento"))
                                                    //.Events(e => e.DataBound("CalcularTotalDocumento"))
                                                    .Filterable()
                                                    .Scrollable()
                                                    // .ClientDetailTemplateId("template")
                                                    .Pdf(pdf => pdf.FileName("FacturaDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                      .Excel(excel => excel.FileName("FacturaDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                    //.Events(e=>e.Save("onsave"))
                                                    .DataSource(dataSource =>

                                                   dataSource
                                                   //.Ajax()
                                                   .WebApi()

                                                    .ServerOperation(true)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.DebitNoteLineId);
                                                        model.Field(p => p.DebitNoteLineId).Editable(false);
                                                        model.Field(p => p.DebitNoteId).Editable(false);

                                                    })
                                                    .Events(events =>
                                                    {
                                                        events.Error("error_handler");
                                                        //events.upda("EditHandler");

                                                    })
                                                    .Read(read => read.Action("GetDebitNoteLineByDebitNoteId", "DebitNoteLine").Data("GetDebitNoteId"))
                                               //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                               //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                               //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                               .Destroy(destroy => destroy.Action("Delete", "DebitNoteLine").Type(HttpVerbs.Post))
                                              )
        )

    </div>
</div>


<script>

</script>