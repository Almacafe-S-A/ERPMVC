@using Kendo.Mvc.UI

@*{
        ViewData["Title"] = "ASEGURADORAS";
    }*@

<h3 class="text-themecolor">Aseguradora</h3>
<script>
    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }
    function clearsession() {
            var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalCustomerDocument').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
          });
      }

    //AddInsurances
    function AddInsurances() {

        var dataObject = null;
        var dataObject = {
            InsurancesId:0,
            editar: 1
        };

        $.ajax({
            url: '@Url.Action("pvwAddInsurances", "Insurances")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#InsurancesDocument").html('');
                $("#InsurancesDocument").html(result);
                //$("#files").data("kendoUpload").disable();
                $('#myModalInsurancesDocumentUpload').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function EditInsurances(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
            InsurancesId: dataItem.InsurancesId,
                editar : 0
            };

            $.ajax({
                 url: '@Url.Action("pvwAddInsurances", "Insurances")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#InsurancesDocument").html('');
                    $("#InsurancesDocument").html(result);
                    $("#DocumentTypeId").data("kendoDropDownList").value(dataItem.DocumentTypeId);
                    //var fileName = dataItem.DocumentName;
                    //var fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);
                    //var files = [
                    //    { name: fileName, extension: "." + fileExtension },
                    //];
                    @*$("#files").kendoUpload({
                        async: {
                            saveUrl: "@Url.Action("SaveInsurancesDocument","Insurances")",
                            removeUrl: "@Url.Action("", "")",
                            autoUpload: true,
                    },
                        upload: SaveInsurancesDocument,
                        multiple: false,
                        localization: {
                            select: "Seleccionar Archivos",
                            cancel: "Cancelar",
                            dropFilesHere: "Soltar Archivo aquí",
                            invalidFileExtension: "Extensión de Archivo Invalido",
                            retry: "Reintentar",
                        },
                        validation: {
                            allowedExtensions: [".jpg", ".jpeg", ".png"]
                        },
                        files: files,
                    });*@
                    $('#InsurancesId').val(dataItem.InsurancesId);
                    $('#InsurancesName').val(dataItem.InsurancesName);

                    $('#myModalInsurancesDocumentUpload').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }
</script>

@(Html.Kendo().Grid<ERPMVC.Models.Insurances>()
                    .Name("gridInsurancesDocument")
                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            //command.Custom("Editar").Click("EditTypeAccount");
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditInsurances");
                            command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("DeleteInsurances");

                        }).Title("Acciones").Width(75);
                        columns.Bound(p => p.InsurancesId).Title("Código").Width(50);
                        columns.Bound(p => p.InsurancesName).Title("Nombre").Width(225);
                        columns.Bound(p => p.Estado).Title("Estado").Width(75);
                        columns.Bound(p => p.DocumentTypeId).Hidden();
                        columns.Bound(p => p.CreatedDate).Title("Fecha Creación").Format("{0:dd/MM/yyyy HH:mm:ss}").Width(100).Hidden();
                        columns.Bound(p => p.CreatedUser).Title("Usuario Creación").Width(100).Hidden();
                        columns.Bound(p => p.ModifiedUser).Title("Usuario Modifico").Width(100).Hidden();
                        columns.Bound(p => p.ModifiedDate).Title("Fecha Modifico").Format("{0:dd/MM/yyyy HH:mm:ss}").Width(100).Hidden();
                    })

                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                                .Clear()
                                                .Contains("Contiene")
                                                .DoesNotContain("No contiene")
                                                .EndsWith("Termina con")
                                                .IsEqualTo("Es igual a")
                                                .IsNotEqualTo("No es igual a")
                                                .IsNull("Es nulo")
                                                .StartsWith("Inicia con")


                                            )
                                            .ForNumber(n => n
                                            .Clear()
                                            .IsEqualTo("Es igual a")
                                            .IsGreaterThan("Es mayor que")
                                            .IsLessThan("Es menor que")
                                            .IsNull("Es nulo")
                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                            )
                                            .ForDate(d => d
                                            .Clear()
                                            .IsEqualTo("Es igual que")
                                            .IsGreaterThan("Es mayor que")
                                            .IsLessThan("Es menor que")
                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                            .IsNotEqualTo("No es igual que")
                                            )
                                        ))
                    .ToolBar(tools =>
                    {
                        // tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddInsurances();" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .Pageable(s => s
                        .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                        .Empty("No hay datos."))
                    )
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("DocumentosAseguradorasReporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("DocumentosAseguradorasReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.InsurancesId);
                            model.Field(p => p.InsurancesName).Editable(false);

                        })
                        .Sort(s => s.Add(m => m.CreatedDate).Descending())
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("Get", "Insurances"))
                        .Create(create => create.Action("Insert", "Insurances"))
                        .Update(update => update.Action("Update", "Insurances", new { InsurancesId = "{0}" }).Type(HttpVerbs.Put))
                    //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

                    )
                        .Events(e =>
                        {
                            //  e.Save("onsave");

                        })
)

<div id="InsurancesDocument">
    @await Html.PartialAsync("pvwAddInsurances", new ERPMVC.Models.Insurances { InsurancesId = 0, DocumentTypeId = 0 })
</div>

<div id="CustomerConditionView">
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridInsurancesDocument").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridInsurancesDocument").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    //setRowButtonTooltip(".k-grid-GenerarFactura", "Generar una factura fiscal!");
    //setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");

    function DeleteInsurances(e) {
        if (confirm('¿Esta seguro que desea eliminar este registro?')) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                InsurancesId: dataItem.InsurancesId,
                DocumentTypeId: dataItem.DocumentTypeId,
                CreatedDate: dataItem.CreatedDate,
                CreatedUser: dataItem.CreatedUser,
                ModifiedUser: dataItem.ModifiedUser,
                ModifiedDate: dataItem.ModifiedDate
            };
            debugger;
            $.ajax({
                url: '@Url.Action("DeleteInsuranceDocument", "Insurances")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    debugger;
                    RefrescarGrid();
                
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
        }
    }
</script>