@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Seguros";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function AddInsurances() {



        $('#ModalInsurances').find(':input').not(':submit').val('');

        $('#ModalInsurances').modal('show');
        $("#InsurancesId").val('0');




      }


    function EditInsurances(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                InsurancesId: dataItem.InsurancesId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddInsurances", "Insurances")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#Insurances").html('');
                    $("#Insurances").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalInsurances').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    
</script>

<h3 class="text-themecolor">Seguros </h3>
@(Html.Kendo().Grid<ERPMVC.Models.Insurances>
        ()
        .Name("gridNumeracionInsurances")
        .Columns(columns =>
        {
            columns.Command(command =>
            {

                command.Custom("Ver detalles").Text(" ").IconClass("far fa-list-alt").Click("DetallesInsurances");
                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditInsurances");

            }).Width(100);

            columns.Bound(p => p.InsurancesId).Title("Id").Width(1);
            columns.Bound(p => p.InsurancesName).Title("Nombre de Proveedor").Width(250);
            columns.Bound(p => p.FechaCreacion).Title("Fecha de Creación").Format("{0:dd/MM/yyyy}").Width(200);
           // columns.Bound(p => p.Phone).Title("Telefono").Width(150);
        })
        .Filterable(f => f.Operators(o => o.ForString(s => s
        .Clear()
        .Contains("Contiene")
        .DoesNotContain("No contiene")
        .EndsWith("Termina con")
        .IsEqualTo("Es igual a")
        .IsNotEqualTo("No es igual a")
        .IsNull("Es nulo")
        .StartsWith("Inicia con")


        )
        .ForNumber(n => n
        .Clear()
        .IsEqualTo("Es igual a")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsNull("Es nulo")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        )
        .ForDate(d => d
        .Clear()
        .IsEqualTo("Es igual que")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        .IsNotEqualTo("No es igual que")
        )
        ))
        .ToolBar(tools =>
        {
// tools.Create();
tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddInsurances()" });
            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



        })
        .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("InsurancesReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
        .Excel(excel => excel.FileName("InsurancesReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
        dataSource
        .WebApi()

        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.InsurancesId);
            model.Field(p => p.InsurancesName).Editable(true);

        })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("GetInsurances", "Insurances"))
        .Create(create => create.Action("Insert", "Insurances"))
        .Update(update => update.Action("Update", "Insurances", new { InsurancesId = "{0}" }).Type(HttpVerbs.Put))
        //.Destroy(destroy => destroy.Action("Delete", "Vendor", new { VendorId = "{0}" }).Type(HttpVerbs.Delete))

        )
        .Events(e =>
        {
            e.Save("onsave");

        })
)


<div id="NumInsurances">
    @await Html.PartialAsync("pvwAddInsurances", new ERPMVC.DTO.InsurancesDTO { InsurancesId = 0 })
</div>
