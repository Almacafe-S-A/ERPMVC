@model ERPMVC.Models.InsuranceEndorsement
@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Seguros Endosados";
}



<h3 class="text-themecolor">Seguros con Endoso</h3>

<script>
   
                                                     
    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            //console.log(Date.parse(this.OrderDate), Date.parse(this.ReceivedDate));
            if (Date.parse(this.OrderDate) != Date.parse(this.ReceivedDate)) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Recibido').hide();
            }
        })
    }

    function ClearSession() {
        var dataObject = ["listadoproductosInsuranceEndorsement"];
         $.ajax({
            url: '@Url.Action("ClearSession", "Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function RefrescarGrid() {
        var grid = $("#gridInsurances").getKendoGrid();
        grid.dataSource.read();
    }

    function AddEndoso() {
        debugger;
        ClearSession();
        var dataObject = {
             InsuranceEndorsementId: 0,
            editar : 1
        };
        debugger;
        $.ajax({
            url: '@Url.Action("pvwAddInsuranceEndorsement", "InsuranceEndorsement")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log(result);
                $("#divInsuranceEndorsement").html('');
                $("#divInsuranceEndorsement").html(result);

                RefreshInvoiceDetail();
                 $("#btnSaveInsuranceEndorsement").show();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //alert(textStatus + ": " + XMLHttpRequest.responseText);
                 alert("Error");

              }
        });


    }

    function EditEndoso(e) {
        e.preventDefault();
        debugger;
        ClearSession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            InsuranceEndorsementId: dataItem.InsuranceEndorsementId,
            editar : 0
        };


        $.ajax({
            url: '@Url.Action("pvwAddInsuranceEndorsement", "InsuranceEndorsement")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#divInsuranceEndorsement").html('');
                $("#divInsuranceEndorsement").html(result);

                var txt = $(result);

                 RefreshInvoiceDetail();
                 $("#btnSaveInsuranceEndorsement").hide();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function ImprimirCotizacion(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFInsuranceEndorsement", "InsuranceEndorsement")/' + dataItem.InsuranceEndorsementId;


    }

    


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>


@(Html.Kendo().Grid<ERPMVC.Models.InsuranceEndorsement>()
                                          .Name("gridInsurances")
                                          .Columns(columns =>
                                          {
                                              columns.Command(command =>
                                              {
                                                  command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditEndoso");
                                                  command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCotizacion");

                                              }).Title("Acciones").Width(250);
                                              columns.Bound(p => p.InsuranceEndorsementId).Title("Id").Width(150);
                                              columns.Bound(p => p.DateGenerated).Format("{0:dd/MM/yyyy}").Title("Fecha").Width(170);
                                              columns.Bound(p => p.Customername).Title("Cliente").Width(250);
                                              columns.Bound(p => p.ProductName).Title("Producto").Width(250);
                                              columns.Bound(p => p.InsurancePolicyId).Title("Póliza").Width(250);
                                          })
                                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                       .DoesNotContain("No contiene")
                                                       .EndsWith("Termina con")
                                                       .IsEqualTo("Es igual a")
                                                       .IsNotEqualTo("No es igual a")
                                                       .IsNull("Es nulo")
                                                       .StartsWith("Inicia con")


                                                 )
                                                 .ForNumber(n => n
                                                   .Clear()
                                                   .IsEqualTo("Es igual a")
                                                   .IsGreaterThan("Es mayor que")
                                                   .IsLessThan("Es menor que")
                                                   .IsNull("Es nulo")
                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 )
                                                 .ForDate(d => d
                                                 .Clear()
                                                 .IsEqualTo("Es igual que")
                                                 .IsGreaterThan("Es mayor que")
                                                 .IsLessThan("Es menor que")
                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 .IsNotEqualTo("No es igual que")
                                                  )
                                               ))
                                          .ToolBar(tools =>
                                          {
                                              // tools.Create();
                                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                     .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEndoso();" });
                                              //tools.Custom().Text("Reporte").IconClass("")
                                              //           .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirLibroCompras();" });

                                              tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                              tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                          })
                                           .Editable(e => e.Mode(GridEditMode.PopUp))
                                            .Sortable()
                                            .AutoBind(true)
                                            .Pageable()
                                            .Filterable()
                                            .Scrollable()
                                            // .ClientDetailTemplateId("template")
                                            .Pdf(pdf => pdf.FileName("InsuranceEndorsementReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                              .Excel(excel => excel.FileName("InsuranceEndorsementReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                            .Events(e => e.DataBound("dataBound"))
                                            .DataSource(dataSource =>

                                           dataSource
                                           //.Ajax()
                                           .WebApi()
                                            .ServerOperation(true)
                                            .Model(model =>
                                            {
                                                model.Id(p => p.InsuranceEndorsementId);
                                                model.Field(p => p.Customername).Editable(true);
                                                model.Field(p => p.InsurancePolicyId).Editable(true);


                                            })
                                            .Events(events =>
                                            {
                                                events.Error("error_handler");
                                                //events.upda("EditHandler");

                                            })
                                            .Read(read => read.Action("Get", "InsuranceEndorsement"))
                                            .Create(create => create.Action("Insert", "InsuranceEndorsement"))
                                            .Update(update => update.Action("Update", "InsuranceEndorsement", new { id = "{0}" }))
                                            .Destroy(destroy => destroy.Action("Delete", "InsuranceEndorsement", new { id = "{0}" }))
                                      )
)

<div id="divInsuranceEndorsement">
    @await Html.PartialAsync("pvwAddInsuranceEndorsement", new ERPMVC.Models.InsuranceEndorsement { InsuranceEndorsementId = 0, DateGenerated = DateTime.Now })
</div>

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridInsurances").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridInsurances").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    setRowButtonTooltip(".k-grid-Recibido", "Actualizar Recibido");
    //setRowButtonTooltip(".k-grid-GenerarFactura", "Generar una factura fiscal!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");

</script>

