@model ERPMVC.Models.InsuranceEndorsement



<script>


    function GetInvoiceId() {
       // console.log($("#DescriptionDetail").val());
        debugger;
        var warehouse = '';
        if ($("input[attribute='WareHouseIdLine']" ) != null) {
            if ($("input[attribute='WareHouseIdLine']" ).data("kendoDropDownList") != null) {
                warehouse = $("input[attribute='WareHouseIdLine']" ).data("kendoDropDownList").text();
            }
        }

        var displayedData = $("#gridInvoiceDetail").data().kendoGrid.dataSource.view();
        var id = -999999;
        if (Number($("#InsuranceEndorsementLineId").val()) === 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    //console.log('Linea:' + displayedData[i].InvoiceLineId);
                    //console.log('Linea:' + id);
                    if (displayedData[i].InsuranceendorsementLineId > id)
                        id = displayedData[i].InsuranceendorsementLineId;

                }

                id = id + 1;
            } else {
                id = 1;
            }
        }
        else if ($("#AmountLp").val() > 0) {
            id = $("#InsuranceEndorsementLineId").val();
        }


        return {
                InsuranceEndorsementLineId: id,
                InsuranceEndorsementId: @Model.InsuranceEndorsementId,
                AmountLp: $("#AmountLp").val(),
                AmountDl: $("#AmountDl").val(),
            WarehouseId: $("#WareHouseIdLine").val(),
                WarehouseName: warehouse,
            AssuredDiference: $("#AssuredDiference").val(),
            CertificateBalance: $("#CertificateBalance").val()
            }
    }

    function RefreshInvoiceDetail() {
        var grid = $("#gridInvoiceDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function AddCotizacionDetalle() {
        var notification = $("#notification").data("kendoNotification");

        debugger;
            //llenarsubproduct();
        $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);                
        $("#AmountLp").val(0),
        $("#AmountDl").val(0),
        $("#WarehouseId").val(0),
        $("#AssuredDiference").val(0),
        $("#CertificateBalance").val(0)

        $('#myModalInvoiceLine').modal('show');
    }



    var hcustom = 0;
    function EditCotizacionDetalle(e) {
        var notification = $("#notification").data("kendoNotification");
        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //  debugger;
        console.log(dataItem);
        if (dataItem.InsuranceendorsementId != 0) {
             $("#btnActualizarCotizacionLinea").prop("disabled", true);
            var subproducto = 0;
            var dataObject = { 'InsuranceendorsementLineId': dataItem.InsuranceendorsementLineId };
            $.ajax({
                url: '@Url.Action("pvwInsuranceendorsementLine", "InsuranceendorsementLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    //GetPercentage();
                    var txt = $(data);

                    //var combobox = $('#SubProductId').getKendoDropDownList();
                    //if (combobox != null) {
                    //    var found = $("#SubProductId", txt);
                    //    subproducto = $(found).val();
                    //}
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            $("#frmSalesOrderLine :input").prop("disabled", true);
            //llenarsubproduct();
            //var combobox = $('#SubProductId').getKendoDropDownList();
            //if (combobox != null) {
            //    combobox.value(subproducto);
            //    combobox.trigger('change');

            //}
        }
        else {




            $("#btnActualizarCotizacionLinea").prop("disabled", false);
            $("#InsuranceendorsementLineId").val(dataItem.InsuranceendorsementLineId);

            //llenarsubproduct();
            $("#ProductId").data("kendoDropDownList").dataSource.read();
            $("#ProductId").data("kendoDropDownList").value(dataItem.ProductId);
            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#DescriptionDetail").val(dataItem.Description);
            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#TaxCode").data("kendoDropDownList").value(dataItem.TaxCode);
            $("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#AmountLine").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);
            var cuenta = $("#cuentaline").data("kendoDropDownList").value(dataItem.AccountId);
            console.log('Aqui', cuenta)
        }

        $('#myModalInvoiceLine').modal('show');

    }


        function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "InsuranceEndorsementLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                    //notification.show({
                    //    title: "Notificacion",
                    //    message: "Registro Eliminado"
                    //}, "success");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridInvoiceDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            CalcularTotalDocumento();
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }

</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.InsuranceEndorsementLine>()
                                                                  .Name("gridInvoiceDetail")
                                                                  .Columns(columns =>
                                                                  {
                                                                      columns.Command(command =>
                                                                      {
                                                                          if (Model.InsuranceEndorsementId == 0)
                                                                          {
                                                                              command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                          }
                                                                          command.Custom("Detalles").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                                  // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                  //  command.Edit(); command.Destroy();
                                                              }).Width(150);

                                                                      columns.Bound(p => p.InsuranceEndorsementId).Title("Linea").Width(150).Visible(true).Visible(false);
                                                                      columns.Bound(p => p.InsuranceEndorsementId).Title("Seguro Id").Width(150).Visible(false);
                                                                      columns.Bound(p => p.WareHouseId).Title("BodegaId").Visible(false);
                                                                      columns.Bound(p => p.WarehouseName).Title("Bodega").Width(150);
                                                                      columns.Bound(p => p.AmountDl).Format("{0:n2}").Title("Monto Lps").Format("{0:n2}").Width(150);
                                                                      columns.Bound(p => p.AmountLp).Format("{0:n2}").Title("Monto $").Width(150);
                                                                      columns.Bound(p => p.CertificateBalance).Format("{0:n2}").Title("Saldo Certificado").Width(150);
                                                                      columns.Bound(p => p.AssuredDiference).Format("{0:n2}").Title("Diferencia Asegurada").Width(150);
                                                                      

                                                                  })
                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                               .Clear()
                                                               .Contains("Contiene")
                                                               .DoesNotContain("No contiene")
                                                               .EndsWith("Termina con")
                                                               .IsEqualTo("Es igual a")
                                                               .IsNotEqualTo("No es igual a")
                                                               .IsNull("Es nulo")
                                                               .StartsWith("Inicia con")


                                                         )
                                                         .ForNumber(n => n
                                                           .Clear()
                                                           .IsEqualTo("Es igual a")
                                                           .IsGreaterThan("Es mayor que")
                                                           .IsLessThan("Es menor que")
                                                           .IsNull("Es nulo")
                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         )
                                                         .ForDate(d => d
                                                         .Clear()
                                                         .IsEqualTo("Es igual que")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         .IsNotEqualTo("No es igual que")
                                                          )
                                                       ))
                                                                  .ToolBar(tools =>
                                                                  {
                                                                      if (Model.InsuranceEndorsementId == 0)
                                                                      {
                                                                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                                      }

                                                                      tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                                                      tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                                                                  })
                                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                    .Sortable()
                                                                    .AutoBind(true)
                                                                    .Pageable()
                                                                    .Filterable()
                                                                    .Scrollable()
                                                                    // .ClientDetailTemplateId("template")
                                                                    .Pdf(pdf => pdf.FileName("FacturaDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                      .Excel(excel => excel.FileName("FacturaDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                    //.Events(e=>e.Save("onsave"))
                                                                    .DataSource(dataSource =>

                                                                   dataSource
                                                                   //.Ajax()
                                                                   .WebApi()

                                                                    .ServerOperation(true)
                                                                    .Model(model =>
                                                                    {
                                                                        model.Id(p => p.InsuranceEndorsementId);
                                                                        model.Field(p => p.InsuranceEndorsementId).Editable(false);

                                                                    })
                                                                    .Events(events =>
                                                                    {
                                                                        events.Error("error_handler");
                                                                //events.upda("EditHandler");

                                                            })
                                                                    .Read(read => read.Action("GetInsuranceEndorsementLineByInvoiceId", "InsuranceEndorsementLine").Data("GetInvoiceId"))
                                                              //.Create(create => create.Action("Insert", "InsuranceendorsementLine"))
                                                              //.Update(update => update.Action("Update", "InsuranceendorsementLine", new { SalesOrderLineId = "{0}" }))
                                                              //.Destroy(destroy => destroy.Action("Delete", "InsuranceendorsementLine", new { InsuranceendorsementLineId = "{0}" }))
                                                              )
        )

    </div>
</div>
