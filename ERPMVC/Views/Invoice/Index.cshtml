@using System.Security.Claims

@{
    ViewBag.Title = "Facturacion";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}
<script>

    function ClearSession() {
        var dataObject = ["listadoproductosinvoice"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddCotizacion() {
        ClearSession();
         var dataObject = {
             InvoiceId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwInvoice","Invoice")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log(result);
                $("#divInvoice").html('');
                $("#divInvoice").html(result);

                RefreshInvoiceDetail();
                 $("#btnSaveInvoice").show();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                  MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });
    }

    function EditCotizacion(e) {
        e.preventDefault();

        ClearSession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            InvoiceId: dataItem.InvoiceId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwInvoice", "Invoice")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#divInvoice").html('');
                $("#divInvoice").html(result);

                RefreshInvoiceDetail();
                 $("#btnSaveInvoice").show();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                  MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });
    }

    function ImprimirFactura(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFInvoice", "Invoice")/' + dataItem.InvoiceId;


    }

    function ImprimirProforma(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFInvoiceProforma", "Invoice")/' + dataItem.InvoiceId;


    }
    function ImprimirLibroVentas() {
        var url = '@Url.Action("SFLibroVentas", "Invoice")';
        var win = window.open(url, '_blank');
        win.focus();
    }

    function GenerarFactura(e) {
        if (confirm('Esta seguro de generar una Factura?')) {
            e.preventDefault();
            debugger;
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                InvoiceId: dataItem.InvoiceId,
            };

            $.ajax({
                url: '@Url.Action("GenerarFactura", "Invoice")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    MostrarMensaje('Factura Generada!', "success", "Satisfactorio", 6000);
                    RefreshCotizaciones();
                    return;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }


    function AnularFactura(e) {
        if (confirm('Esta seguro de anular una Factura?')) {
            e.preventDefault();
            debugger;
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                InvoiceId: dataItem.InvoiceId,
            };

            $.ajax({
                url: '@Url.Action("AnularFactura", "Invoice")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    MostrarMensaje('Factura Anulada!', "success", "Satisfactorio", 6000);
                    RefreshCotizaciones();
                    return;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }

    function closecondition() {
        $('#myModalConditions').modal('hide');
    }

    function ReporteInvoice(e) {
        var url = '@Url.Action("SFReporteInvoice", "Invoice")/';
        var win = window.open(url, '_blank');
        win.focus();
    }
	
    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (this.Estado != "Revisado" ) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();
                
            }
            if (this.Estado != "Aprobado"){
                $('[data-uid=' + this.uid + ']').find('.k-grid-GenerarFactura').hide();
            }
            if (this.Estado != "Revisión"){
                $('[data-uid=' + this.uid + ']').find('.k-grid-Revisar').hide();
            }
            if (this.Estado != "Emitido") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Imprimir').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-AnularFactura').hide();
            }
            if (this.Estado != "Anulado") {
                //$('[data-uid=' + this.uid + ']').find('.k-grid-AnularFactura').hide();
            }


        })
    }

    function Aprobar(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.Estado == 6) {
                    notification.show({
                    title: "Validación",
                    message: "la Autorizacion ha sido aprobada"
                }, "error");
            }
        if (!confirm('Esta seguro de aprobar la Factura?')) {
            return;

        }

        var dataObject = {
                InvoiceId: dataItem.InvoiceId,
            };

            $.ajax({
                url: '@Url.Action("Aprobar", "Invoice")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'La Factura Proforma se ha aprobado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                RefreshCotizaciones();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }




    function Revisar(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.Estado == 6) {
                    notification.show({
                    title: "Validación",
                    message: "la Autorizacion ha sido aprobada"
                }, "error");
            }
        if (!confirm('Esta seguro de marcar como revisada esta Factura Proforma?')) {
            return;

        }

        var dataObject = {
                InvoiceId: dataItem.InvoiceId,
            };

            $.ajax({
                url: '@Url.Action("Revisar", "Invoice")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'La Factura Proforma se ha revisado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                RefreshCotizaciones();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }



</script>

<h3 class="text-themecolor">Facturación</h3>

@(
Html.Kendo().Grid<ERPMVC.Models.Invoice>()
                              .Name("gridInvoices")
                              .Columns(columns =>
                              {

                                  columns.Command(command =>
                                      {
                                          if (permisos.HasClaim("Cuentas por Cobrar.Factura.Ver Detalle", "true"))
                                          {
                                              command.Custom("Detalles").Text(" ").IconClass("far fa-list-alt").Click("EditCotizacion");
                                          }
                                              if (User.HasClaim("Cuentas por Cobrar.Factura.Revisar", "true"))
                                              {
                                                  command.Custom("Revisar").Text(" ").IconClass("fa fa-check").Click("Revisar");
                                              }
                                              if (User.HasClaim("Cuentas por Cobrar.Factura.Aprobar", "true"))
                                              {
                                                  command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("Aprobar");
                                              }
                                              if (User.HasClaim("Cuentas por Cobrar.Factura.Generar", "true"))
                                              {
                                                  command.Custom("GenerarFactura").Text(" ").IconClass("fa fa-file-invoice").Click("GenerarFactura");
                                                  command.Custom("AnularFactura").Text(" ").IconClass("fa fa-ban").Click("AnularFactura");
                                              }
                                              command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirFactura");
                                              command.Custom("ImprimirProforma").Text(" ").IconClass("fa fa-print").Click("ImprimirProforma");
                                          
                                      }).Title("Acciones").Width(180);

                                  columns.Bound(p => p.InvoiceId).Title("No. Proforma").Width(150);
                                  columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Title("Fecha").Width(170);
                                  columns.Bound(p => p.ExpirationDate).Format("{0:dd/MM/yyyy}").Title("Vencimiento").Width(170);
                                  columns.Bound(p => p.CustomerName).Title("Cliente").Width(250);
                                  columns.Bound(p => p.NumeroDEI).Title("No Factura").Width(150);
                                  columns.Bound(p => p.ProductName).Title("Servicio").Width(200);
                                  columns.Bound(p => p.Exonerado).Title("Exonerado").ClientTemplate("#= Exonerado? 'Si' : 'No'#").Width(150);
                                  columns.Bound(p => p.BranchName).Title("Sucursal").Width(200); 
                                  columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(200)
                                  .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
                                  columns.Bound(p => p.Estado).Title("Estado").Width(200);

                              })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")

                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
                              .ToolBar(tools =>
                              {
                                  // tools.Create();
                                  if (User.HasClaim("Cuentas por Cobrar.Factura.Agregar", "true"))
                                  {
                                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacion();" });
                                  }
                                  if (User.HasClaim("Cuentas por Cobrar.Factura.Reporte Libro de Cuentas por Cobrar", "true"))
                                  {
                                      tools.Custom().Text("Libro Auxiliar de Ventas").IconClass("k-icon k-i-file")
                                     .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirLibroVentas();" });
                                  }
                                    
                                      tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                      tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                      tools.Custom().Text("Reporte de Facturas").IconClass("k-icon k-i-file")
                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ReporteInvoice();" });

                              })
                               .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .AutoBind(true)
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                .Resizable(r => r.Columns(true))
                                // .ClientDetailTemplateId("template")
                                .Pdf(pdf => pdf.FileName("FacturaReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                  .Excel(excel => excel.FileName("FacturaReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                //.Events(e=>e.Save("onsave"))
                                .DataSource(dataSource =>

                               dataSource
                               //.Ajax()
                               .WebApi()
                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.InvoiceId);
                                    model.Field(p => p.InvoiceName).Editable(true);
                                    model.Field(p => p.InvoiceId).Editable(true);
                                })
                                .Events(events =>
                                {
                                    events.Error("error_handler");
                                    //events.upda("EditHandler");

                                })
                                .Read(read => read.Action("Get", "Invoice"))
                                .Create(create => create.Action("Insert", "Invoice"))
                                .Update(update => update.Action("Update", "Invoice", new { id = "{0}" }))
                                .Destroy(destroy => destroy.Action("Delete", "Invoice", new { id = "{0}" }))
                          ).Events(e => e.DataBound("dataBound"))
)

<div id="divInvoice">
    @await Html.PartialAsync("pvwInvoice", new ERPMVC.DTO.InvoiceDTO { InvoiceId = 0, InvoiceDate = DateTime.Now, DeliveryDate = DateTime.Now, ExpirationDate = DateTime.Now.AddDays(30) })
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridInvoices").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridInvoices").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-AnularFactura", "Anular Factura");
    setRowButtonTooltip(".k-grid-GenerarFactura", "Generar Factura");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir Factura"); 
    setRowButtonTooltip(".k-grid-ImprimirProforma", "Imprimir Proforma");
    setRowButtonTooltip(".k-grid-Detalles", "Ver Detalle");
    setRowButtonTooltip(".k-grid-Agregar", "Nueva Factura Proforma"); 
</script>


