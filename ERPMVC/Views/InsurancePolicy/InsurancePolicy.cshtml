@using Kendo.Mvc.UI

@*{
        ViewData["Title"] = "POLIZA";
    }*@

<h3 class="text-themecolor">Poliza</h3>
<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }
    function clearsession() {
            var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalCustomerDocument').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
          });
      }

    //AddInsurancePolicy
    function AddInsurancePolicy() {

        var dataObject = null;
        var dataObject = {
            InsurancePolicyId:0,
            editar: 1
        };


        $.ajax({
            url: '@Url.Action("pvwAddInsurancePolicy", "InsurancePolicy")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#InsurancePolicyDocument").html('');
                $("#InsurancePolicyDocument").html(result);
              @*  $("#files").kendoUpload({
                        async: {
                            saveUrl: "@Url.Action("SaveInsurancePolicyDocument","InsurancePolicy")",
                            removeUrl: "@Url.Action("QuitarFoto","InsurancePolicy")",
                            autoUpload: true,
                    },
                    localization: {
                        select: "Seleccionar Archivos",
                        cancel: "Cancelar",
                        dropFilesHere: "Soltar Archivo aquí",
                        invalidFileExtension: "Extensión de Archivo Invalido",
                        retry: "Reintentar",
                    },
                    });
                $("#files").data("kendoUpload").disable();
                *@
                $("#files").data("kendoUpload").disable();
                $('#myModalInsurancePolicyDocumentUpload').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });






      }


    function EditInsurancePolicy(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            InsurancePolicyId: dataItem.InsurancePolicyId,
                editar : 0
            };

            $.ajax({
                 url: '@Url.Action("pvwAddInsurancePolicy", "InsurancePolicy")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#InsurancePolicyDocument").html('');
                    $("#InsurancePolicyDocument").html(result);
                    //debugger;
                    //var fileName = dataItem.DocumentName;
                    //var fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);
                    //var files = [
                    //    { name: fileName, extension: "." + fileExtension },
                    //];

                    $('#InsurancePolicyId').val(dataItem.InsurancePolicyId);

                    $('#myModalInsurancePolicyDocumentUpload').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }


</script>

@(Html.Kendo().Grid<ERPMVC.Models.InsurancePolicy>()
                                                            .Name("gridInsurancePolicyDocument")
                                                            .Columns(columns =>
                                                            {
                                                                columns.Command(command =>
                                                                {
                                                                    //command.Custom("Ver detalles").Click("Detalles");
                                                                    //command.Custom("Editar").Click("EditTypeAccount");
                                                                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditInsurancePolicy");

                                                                    //  command.Destroy();
                                                                }).Width(30);
                                                                columns.Bound(p => p.InsurancePolicyId).Title("Codigo").Width(100);
                                                                columns.Bound(p => p.InsurancesName).Title("Nombre Aseguradora").Width(150);
                                                                columns.Bound(p => p.PolicyDate).Title("Fecha Poliza").Width(150);
                                                                columns.Bound(p => p.CustomerName).Title("Cliente").Width(150);
                                                                columns.Bound(p => p.Status).Title("Estado").Width(150);

                                                                

                                                            })
                                                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                                       .Clear()
                                                                                       .Contains("Contiene")
                                                                                       .DoesNotContain("No contiene")
                                                                                       .EndsWith("Termina con")
                                                                                       .IsEqualTo("Es igual a")
                                                                                       .IsNotEqualTo("No es igual a")
                                                                                       .IsNull("Es nulo")
                                                                                       .StartsWith("Inicia con")


                                                                                 )
                                                                                 .ForNumber(n => n
                                                                                   .Clear()
                                                                                   .IsEqualTo("Es igual a")
                                                                                   .IsGreaterThan("Es mayor que")
                                                                                   .IsLessThan("Es menor que")
                                                                                   .IsNull("Es nulo")
                                                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                 )
                                                                                 .ForDate(d => d
                                                                                 .Clear()
                                                                                 .IsEqualTo("Es igual que")
                                                                                 .IsGreaterThan("Es mayor que")
                                                                                 .IsLessThan("Es menor que")
                                                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                 .IsNotEqualTo("No es igual que")
                                                                                  )
                                                                               ))
                                                            .ToolBar(tools =>
                                                            {
                                                                // tools.Create();
                                                                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddInsurancePolicy();" });
                                                                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                                                            })
                                                            .Editable(e => e.Mode(GridEditMode.PopUp))
                                                            .Sortable()
                                                            .Pageable()
                                                            .Filterable()
                                                            .Scrollable()
                                                            .Pdf(pdf => pdf.FileName("InsurancePolicyReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                .Excel(excel => excel.FileName("InsurancePolicyReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                            .DataSource(dataSource =>
                                                                dataSource
                                                                .WebApi()

                                                                .ServerOperation(true)
                                                                .Model(model =>
                                                                {
                                                                    model.Id(p => p.InsurancePolicyId);
                                                                    model.Field(p => p.InsurancePolicyId).Editable(false);

                                                                })
                                                                .Events(events => events.Error("error_handler"))
                                                                .Read(read => read.Action("Get", "InsurancePolicy"))
                                                                .Create(create => create.Action("Insert", "InsurancePolicy"))
                                                                .Update(update => update.Action("Update", "InsurancePolicy", new { InsurancePolicyId = "{0}" }).Type(HttpVerbs.Put))
                                                            //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

                                                            )
                                                                .Events(e =>
                                                                {
                                                                    //  e.Save("onsave");

                                                                })
)

<div id="InsurancePolicyDocument">
    @await Html.PartialAsync("pvwAddInsurancePolicy", new ERPMVC.Models.InsurancePolicy { InsurancePolicyId = 0 })
</div>

