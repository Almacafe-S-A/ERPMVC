@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Tipos Documento";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

</script>


@(Html.Kendo().Grid<ERPMVC.Models.TiposDocumento>
    ()
    .Name("gridTiposDocumento")
    .Columns(columns =>
    {
    columns.Bound(p => p.IdTipoDocumento).Width(170);
    columns.Bound(p => p.Codigo).Width(100);
    columns.Bound(p => p.Descripcion).Width(170);
    columns.Bound(p => p.UsuarioCreacion).Width(200);
    columns.Bound(p => p.UsuarioModificacion).Width(200);
    columns.Command(command =>
    {
    //command.Custom("Ver detalles").Click("Detalles");
    command.Edit(); command.Destroy();
    }).Width(250);

    })
    .ToolBar(tools =>
    {
    tools.Create();
    tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
    tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



    })
    .Editable(e => e.Mode(GridEditMode.PopUp))
    .Sortable()
    .Pageable()
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("TiposDocumentoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
    .Excel(excel => excel.FileName("TiposDocumentoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .DataSource(dataSource =>
    dataSource
    .WebApi()

    .ServerOperation(true)
    .Model(model =>
    {
    model.Id(p => p.IdTipoDocumento);
    model.Field(p => p.IdTipoDocumento).Editable(false);
    model.Field(p => p.FechaCreacion).Editable(true);
    model.Field(p => p.FechaModificacion).Editable(true);
    model.Field(p => p.UsuarioCreacion).Editable(false);
    model.Field(p => p.UsuarioModificacion).Editable(false);

    })
    .Events(events => events.Error("error_handler"))
    .Read(read => read.Action("GetTiposDocumento", "TiposDocumento"))
    .Create(create => create.Action("Insert", "TiposDocumento"))
    .Update(update => update.Action("Update", "TiposDocumento", new { IdTipoDocumento = "{0}" }).Type(HttpVerbs.Put))
    .Destroy(destroy => destroy.Action("Delete", "TiposDocumento", new { IdTipoDocumento = "{0}" }).Type(HttpVerbs.Delete))

    )
    .Events(e =>
    {
    e.Save("onsave");

    })
    )

