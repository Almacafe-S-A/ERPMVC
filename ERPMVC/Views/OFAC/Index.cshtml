<script>
    function RefreshOFAC() {
        var grid = $("#gridListaOFAC").getKendoGrid();
        grid.dataSource.read();

        $("#myModalOFAC").modal('show');
    }

    function DataOFAC() {
       return {
            firstName: $("#SalesOrderName").val(),
            lastName: $("#SalesOrderName").val()
        };

    }
</script>

<div id="myModalOFAC" class="modal fade" role="dialog" style="z-index:9999">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Información Listados OFAC</h4>
            </div>
            <div class="modal-body">

                @( Html.Kendo().Grid<OFAC.sdnListSdnEntryM>
                   ()
                   .Name("gridListaOFAC")
                   .Columns(columns =>
                   {
                       columns.Bound(p => p.firstName).Width(100);
                       columns.Bound(p => p.lastName).Width(150);
                       columns.Bound(p => p.title).Width(100);
                       columns.Bound(p => p.programList).Width(100);
                       columns.Bound(p => p.remarks).Width(100);
                       columns.Command(command =>
                       {
                           //command.Custom("Ver detalles").Click("Detalles");
                           command.Edit(); command.Destroy();
                       }).Width(250);

                   })
                   .ToolBar(tools =>
                   {
                       // tools.Create();
                       tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                       tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });

                   })
                   .Editable(e => e.Mode(GridEditMode.PopUp))
                   .Sortable()
                   .Pageable()
                   .Filterable()
                   .Scrollable()
                   .Pdf(pdf => pdf.FileName("OFACReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                   + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                   .ProxyURL(Url.Action("Export", "Home")).AllPages())
                       .Excel(excel => excel.FileName("OFACReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                   + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                   .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                   .DataSource(dataSource =>
                       dataSource
                       .WebApi()

                       .ServerOperation(true)
                       .Model(model =>
                       {
                           model.Id(p => p.Id);
                           model.Field(p => p.Id).Editable(false);
                           model.Field(p => p.firstName).Editable(true);
                           model.Field(p => p.lastName).Editable(true);
                           model.Field(p => p.title).Editable(false);
                           model.Field(p => p.remarks).Editable(false);

                       })
                       .Events(events => events.Error("error_handler"))
                       .Read(read => read.Action("GetPersonByName", "OFAC").Data("DataOFAC"))
                       .Create(create => create.Action("Insert", "OFAC"))
                       .Update(update => update.Action("Update", "OFAC", new { IdPuntoEmision = "{0}" }).Type(HttpVerbs.Post))
                       .Destroy(destroy => destroy.Action("Delete", "OFAC", new { IdPuntoEmision = "{0}" }).Type(HttpVerbs.Delete))

                   )
                   .Events(e =>
                   {
                       // e.Save("onsave");

                   })
                )

            </div>
        </div>
    </div>
</div>