<script>


    function sleep(miliseconds) {
        var currentTime = new Date().getTime();

        while (currentTime + miliseconds >= new Date().getTime()) {
        }
    }

    function RefreshOFAC() {
        var grid = $("#gridListaOFAC").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
        var gridListaOFAClen = $("#gridListaOFAC").data().kendoGrid.dataSource.data();
        console.log('Listado OFAC' + gridListaOFAClen.length);
        if (gridListaOFAClen.length > 0) {
            $("#myModalOFAC").modal('show');
        }

        var gridListaPEPS = $("#gridListaPEPS").getKendoGrid();
        gridListaPEPS.dataSource.read();
        gridListaPEPS.refresh();
        var gridListalengthpeps = $("#gridListaPEPS").data().kendoGrid.dataSource.data();
        console.log('Listado PEPS' + gridListalengthpeps.length);

        if (gridListalengthpeps.length > 0) {
            $("#myModalPEPS").modal('show');
        }

        var gridListaNegra = $("#gridListaNegra").getKendoGrid();
        gridListaNegra.dataSource.read();
        gridListaNegra.refresh();
        var gridListalengthNegra = $("#gridListaNegra").data().kendoGrid.dataSource.data();
        if (gridListalengthNegra.length > 0) {
            $("#myModalListaNegra").modal('show');
        }

        var gridListaONU = $("#gridListaONU").getKendoGrid();
        gridListaONU.dataSource.read();
        gridListaONU.refresh();
        var gridListalengthONU = $("#gridListaONU").data().kendoGrid.dataSource.data();
        console.log(gridListalengthONU.length);
        if (gridListalengthONU.length > 0) {

            $("#myModalListaONU").modal('show');
        }


       // sleep(3000);
        //RefreshOFAC();
    }

    function DataOFAC() {
        debugger;
        var mfirstname = $("#SalesOrderName").val();
        var mlastName = $("#SalesOrderName").val();
        if (($("#SalesOrderName").val() == '' || $("#SalesOrderName").val() == null)
             && ($("#PartnerName").val() != '' || $("#PartnerName").val() != null)) {
            mfirstname = $("#PartnerName").val();
            mlastName = $("#PartnerName").val();
        }
        else if (($("#SalesOrderName").val() == '' || $("#SalesOrderName").val() == null) && ($("#PartnerName").val() == '' || $("#PartnerName").val() ==null) ) {
            mfirstname = $("#NombreAS").val();
            mlastName = $("#NombreAS").val();
        }

       return {
            firstName: mfirstname,
           lastName: mlastName
        };

    }
</script>

<div id="myModalOFAC" class="modal fade" role="dialog" style="z-index:9999">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Información Listados OFAC</h4>
            </div>
            <div class="modal-body">

                @( Html.Kendo().Grid<OFAC.sdnListSdnEntryM>
                   ()
                   .Name("gridListaOFAC")
                   .Columns(columns =>
                   {
                       columns.Bound(p => p.firstName).Width(100);
                       columns.Bound(p => p.lastName).Width(150);
                       columns.Bound(p => p.title).Width(100);
                       columns.Bound(p => p.programList).Width(100);
                       columns.Bound(p => p.remarks).Width(100);                      
                       columns.Command(command =>
                       {
                           //command.Custom("Ver detalles").Click("Detalles");
                           //command.Edit();
                           // command.Destroy();
                       }).Width(150);

                   })
                       .Filterable(f => f.Operators(o => o.ForString(s => s
                                       .Clear()
                                       .Contains("Contiene")
                                       .DoesNotContain("No contiene")
                                       .EndsWith("Termina con")
                                       .IsEqualTo("Es igual a")
                                       .IsNotEqualTo("No es igual a")
                                       .IsNull("Es nulo")
                                       .StartsWith("Inicia con")


                                 )
                                 .ForNumber(n => n
                                   .Clear()
                                   .IsEqualTo("Es igual a")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsNull("Es nulo")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 )
                                 .ForDate(d => d
                                 .Clear()
                                 .IsEqualTo("Es igual que")
                                 .IsGreaterThan("Es mayor que")
                                 .IsLessThan("Es menor que")
                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 .IsNotEqualTo("No es igual que")
                                  )
                               ))
                   .ToolBar(tools =>
                   {
                       // tools.Create();
                       tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                       tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                   })
                   .Editable(e => e.Mode(GridEditMode.PopUp))
                   .Sortable()
                   .Pageable()
                   .Filterable()
                   .Scrollable()
                   .Pdf(pdf => pdf.FileName("OFACReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                   + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                   .ProxyURL(Url.Action("Export", "Home")).AllPages())
                       .Excel(excel => excel.FileName("OFACReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                   + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                   .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                   .DataSource(dataSource =>
                       dataSource
                       .WebApi()

                       .ServerOperation(true)
                       .Model(model =>
                       {
                           model.Id(p => p.Id);
                           model.Field(p => p.Id).Editable(false);
                           model.Field(p => p.firstName).Editable(true);
                           model.Field(p => p.lastName).Editable(true);
                           model.Field(p => p.title).Editable(false);
                           model.Field(p => p.remarks).Editable(false);

                       })
                       .Events(events => events.Error("error_handler"))
                       .Read(read => read.Action("GetPersonByName", "OFAC").Data("DataOFAC"))
                       .Create(create => create.Action("Insert", "OFAC"))
                       .Update(update => update.Action("Update", "OFAC", new { IdPuntoEmision = "{0}" }).Type(HttpVerbs.Post))
                       .Destroy(destroy => destroy.Action("Delete", "OFAC", new { IdPuntoEmision = "{0}" }).Type(HttpVerbs.Delete))

                   )
                   .Events(e =>
                   {
                       // e.Save("onsave");

                   })
                )

            </div>
        </div>
    </div>
</div>