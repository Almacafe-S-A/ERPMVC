@model ERPMVC.DTO.EmployeeExtraHoursDetailDTO

<script>

    function onsaveEmployeesHoursDetail(e) {
        console.log(e);
        try {
            e.model.EndTime = e.model.EndTime.toJSON();
            e.model.StartTime = e.model.StartTime.toJSON();
        } catch (e) {

        }
    }

    function addRowD() {
        $('.k-grid-add').trigger('click');
        var notification = $("#notification").data("kendoNotification");
        //console.log('Horas extras detalle');
        if (Number($("#EmployeeExtraHoursId").val()) > 0) {
            //if ($("#CustomerId").val () > 0) {
                let grid = $("#gridEmployeesExtraHoursDetail").data("kendoGrid");
                var today = new Date();
                let fechaactual = String(today.getDate()).padStart(2, '0') + "/" + String(today.getMonth() + 1).padStart(2, '0') + "/" + today.getFullYear();
                //grid.addRow({EmployeeExtraHoursDetailId: 0, EmployeeExtraHoursId: $("#EmployeeExtraHoursId").val(), StartTime: "00:00:00", EndTime: "09:00:00" });
                grid.dataSource.insert({ EmployeeExtraHoursDetailId: 0, EmployeeExtraHoursId: $("#EmployeeExtraHoursId").val(), StartTime: fechaactual + " 00:00:00", EndTime: fechaactual + " 09:00:00", CustomerId: $("#CustomerId").val(), CustomerName: "Seleccione el cliente" });
                //  grid.dataSource.add({ EmployeeExtraHoursDetailId: 0, EmployeeExtraHoursId: $("#EmployeeExtraHoursId").val(), StartTime: fechaactual + " 00:00:00", EndTime: fechaactual + " 09:00:00", CustomerName: "Seleccione el cliente" });
            }
            //else {
            //    notification.show({
            //        title: "Validación",
            //        message: "Seleccione el cliente!"
            //    }, "error");
            //}
        //}
        else {
            notification.show({
                title: "Validación",
                message: "Debe guardar la fecha de trabajo!"
            }, "error");
        }


    }

    function dataEmployeeExtraHoursId() {
        return { EmployeeExtraHoursId: $("#EmployeeExtraHoursId").val() }
    }
   
</script>
                    <h3 class="text-themecolor">Detalle de horarios</h3>

                    @(Html.Kendo().Grid<ERPMVC.Models.EmployeeExtraHoursDetail>
                                                      ()

                                                        .Name("gridEmployeesExtraHoursDetail")
                                                        .Columns(columns =>
                                                        {
                                                            columns.Command(command =>
                                                            {

                                                                //command.Custom("Editar").Click("Editar");
                                                                command.Edit().Text("Editar");
                                                                command.Destroy().Text("Eliminar");

                                                            }).Width(250);
                                                            columns.Bound(p => p.EmployeeExtraHoursDetailId).Width(127);
                                                            columns.Bound(p => p.EmployeeExtraHoursId).Width(125);
                                                            columns.Bound(p => p.CustomerId).EditorTemplateName("Customer").Width(135);
                                                            columns.Bound(p => p.CustomerName).Title("Nombre Cliente").Width(120);
                                                            columns.Bound(p => p.StartTime).EditorTemplateName("TimePicker").Format("{0:dd/MM/yyyy HH:mm:ss}").Width(190);
                                                            columns.Bound(p => p.EndTime).EditorTemplateName("TimePicker").Format("{0:dd/MM/yyyy HH:mm:ss}").Width(190);
                                                            columns.Bound(p => p.QuantityHours).Width(170);
                                                            columns.Bound(p => p.HourlySalary).Width(170);

                                                        })
                                                        .ToolBar(tools =>
                                                        {
                                                            //tools.Create().Text("Agregar");
                                                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "addRowD()" });
                                                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                                                        })
                                                        .Editable(e => e.Mode(GridEditMode.InLine).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                                        .Sortable()
                                                        .Pageable()
                                                        .Filterable()
                                                        .Scrollable()
                                                        .Pdf(pdf => pdf.FileName("EmployeeExtraHoursReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                        .Excel(excel => excel.FileName("EmployeeExtraHoursReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                        .DataSource(dataSource =>
                                                        dataSource
                                                        .WebApi()

                                                        .ServerOperation(true)
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.EmployeeExtraHoursDetailId);
                                                            model.Field(p => p.EmployeeExtraHoursDetailId).Editable(false);
                                                            model.Field(p => p.QuantityHours).Editable(false);
                                                            model.Field(p => p.CustomerName).Editable(false);
                                                            model.Field(p => p.EmployeeExtraHoursId).Editable(false);
                                                            model.Field(p => p.HourlySalary).Editable(false);
                                                        })
                                                        .Events(events => events.Error("error_handler"))
                                                        .Read(read => read.Action("GetEmployeeExtraHoursDetailByEmployeeExtraHoursId", "EmployeeExtraHoursDetail").Data("dataEmployeeExtraHoursId"))
                                                        .Create(create => create.Action("Insert", "EmployeeExtraHoursDetail").Type(HttpVerbs.Post))
                                                        .Update(update => update.Action("UpdateEmployeeExtraHoursDetail", "EmployeeExtraHoursDetail").Type(HttpVerbs.Post))
                                                        .Destroy(destroy => destroy.Action("Delete", "EmployeeExtraHoursDetail").Type(HttpVerbs.Post))
                                                        //.Destroy(destroy => destroy.Action("Delete", "Employees", new { IdEmpleado = "{0}" }).Type(HttpVerbs.Delete))
                                                        )
                                                        .Events(e =>
                                                        {
                                                            e.Save("onsaveEmployeesHoursDetail");

                                                        })
                    )

                    @*<div id="numEmployeesDetail">
                            @await Html.PartialAsync("pvwAddEmployeeExtraHours", new ERPMVC.DTO.EmployeeExtraHoursDTO { EmployeeExtraHoursId = 0, WorkDate = DateTime.Now })
                        </div>*@
