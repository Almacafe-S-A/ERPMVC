@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Empleado";

}

<script>
    $(document).ready(function () {
        ClearSession();
    });


    function ClearSession() {
        var dataObject = ["listadoEmployeeSalary"];
         $.ajax({
            url: '@Url.Action("ClearSession", "Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }
        function Detalles(e) {
    }

    function Editar(e) {
        ClearSession();

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("pvwEditEmployees", "Employees")?IdEmpleado=" + dataItem.IdEmpleado;
    }

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddEmployees() {
        ClearSession();
       
        var dataObject = {
            EmployeeExtraHoursId: 0,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddEmployeeExtraHours", "EmployeeExtraHours")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
               // console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);


                //$("#btnCAI").hide();
                $('#ModalEmployees').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }


    function EditEmployeeExtraHours(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            EmployeeExtraHoursId: dataItem.EmployeeExtraHoursId,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddEmployeeExtraHours", "EmployeeExtraHours")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);


                //$("#btnCAI").hide();
                $('#ModalEmployees').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function RefrescarGrid() {
        var grid = $("#gridEmployees").getKendoGrid();
        grid.dataSource.read();
    }

</script>

<h3 class="text-themecolor">Empleado</h3>

        @(Html.Kendo().Grid<ERPMVC.Models.EmployeeExtraHours>
                      ()

                        .Name("gridEmployees")

                        .Columns(columns =>
                        {
                            columns.Command(command =>
                            {
                                //command.Custom("Ver detalles").Click("Detalles");
                                //command.Destroy();
                                command.Custom("Editar").Click("EditEmployeeExtraHours");
                              //  command.Destroy().Text("Eliminar");

                            }).Width(140);
                            columns.Bound(p => p.EmployeeExtraHoursId).Width(150);
                            columns.Bound(p => p.EmployeeId).Width(130);
                            columns.Bound(p => p.EmployeeName).Width(170);
                            columns.Bound(p => p.WorkDate).Format("{0:dd/MM/yyyy}").Width(200);
                            //columns.Bound(p => p.).Width(150);

                        })
                        .ToolBar(tools =>
                        {

                            //tools.Create();
                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEmployees()" });
                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                        })
                        .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                        .Sortable()
                        .Pageable()
                        .Filterable()
                        .Scrollable()
                        .Pdf(pdf => pdf.FileName("EmployeeExtraHoursReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("EmployeeExtraHoursReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                        .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.EmployeeExtraHoursId);
                            model.Field(p => p.EmployeeExtraHoursId).Editable(false);

                        })
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("Get", "EmployeeExtraHours"))
                        //.Create(create => create.Action("Insert", "Employees").Type(HttpVerbs.Post))
                        //.Update(update => update.Action("Update", "Employees").Type(HttpVerbs.Post))
                        .Destroy(destroy => destroy.Action("Delete", "EmployeeExtraHours").Type(HttpVerbs.Post))
                        //.Destroy(destroy => destroy.Action("Delete", "Employees", new { IdEmpleado = "{0}" }).Type(HttpVerbs.Delete))
                        )
                        .Events(e =>
                        {
                            e.Save("onsave");

                        })
                    )

<div id="numEmployees">
    @await Html.PartialAsync("pvwAddEmployeeExtraHours", new ERPMVC.DTO.EmployeeExtraHoursDTO { EmployeeExtraHoursId = 0 , WorkDate=DateTime.Now })
</div>

