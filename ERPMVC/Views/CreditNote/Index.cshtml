@using System.Security.Claims
@{
    ViewData["Title"] = "Nota de Crédito";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}
<script>

    function ClearSession() {
        var dataObject = ["listadoproductosCreditNote"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddCotizacion() {
       // $('#myModalSalesOrder').find(':input').not(':submit').val('');
         //$('#myModalSalesOrder').modal('show');

        ClearSession();

         var dataObject = {
             CreditNoteId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwCreditNote", "CreditNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log(result);
                $("#divCreditNote").html('');
                $("#divCreditNote").html(result);
                $("#Tefono").kendoMaskedTextBox({
                    mask: "(999) 0000-0000"
                });
                $("#TefonoAlert").hide();
                //$("#BranchId").data("kendoDropDownList").value(0);
                //document.getElementById('FacturaFiscal').style.display = 'inline';
                //document.getElementById('FacturaInterna').style.display = 'none';
                //document.getElementById('InvoiceDetail').style.display = 'inline';
                //RefreshCreditNoteDetail();
                // $("#btnSaveCreditNote").show();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditCotizacion(e) {
        e.preventDefault();

        ClearSession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            CreditNoteId: dataItem.CreditNoteId,
            editar : 0
        };

        var IdPuntoEmision = 0;
        $.ajax({
            url: '@Url.Action("pvwCreditNote", "CreditNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#divCreditNote").html('');
                $("#divCreditNote").html(result);
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function ImprimirCotizacion(e) {
        e.preventDefault();
        debugger
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.Fiscal) {
            //window.location.href = '@Url.Action("SFCreditNoteInterna", "CreditNote")/' + dataItem.CreditNoteId;
        }
        else {
            var url = '@Url.Action("SFCreditNoteFiscal", "CreditNote")/' + dataItem.CreditNoteId;
           var win = window.open(url, '_blank');
           win.focus();
        }


    }


    function Aprobar(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.Estado == 6) {
            notification.show({
                title: "Validación",
                message: "la Autorizacion ha sido aprobada"
            }, "error");
        }
        if (!confirm('Esta seguro de aprobar la Nota de Credito?')) {
            return;

        }

        var dataObject = {
            CreditNoteId: dataItem.CreditNoteId,
        };

        $.ajax({
            url: '@Url.Action("Aprobar", "CreditNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'La Nota de Credito Proforma se ha aprobado correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 7000,
                    stack: 6
                });
                RefreshCotizaciones();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                notification.show({
                    title: "Validación",
                    message: textStatus + ": " + XMLHttpRequest.responseText
                }, "error");
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }




    function Revisar(e) {
        
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (!confirm('Esta seguro de marcar como revisada esta Nota de Crédito?')) {
            return;

        }

        var dataObject = {
            CreditNoteId: dataItem.CreditNoteId,
        };

        $.ajax({
            url: '@Url.Action("Revisar", "CreditNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'La Nota de Credito Proforma se ha revisado correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 7000,
                    stack: 6
                });
                RefreshCotizaciones();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                notification.show({
                    title: "Validación",
                    message: textStatus + ": " + XMLHttpRequest.responseText
                }, "error");
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }


    function Generar(e) {
        if (confirm('Esta seguro de generar una Nota de Credito?')) {
            e.preventDefault();
            debugger;
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CreditNoteId: dataItem.CreditNoteId,
                interna:0
            };

            $.ajax({
                url: '@Url.Action("Generar", "CreditNote")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    MostrarMensaje('Nota de Credito Generada!', "success", "Satisfactorio", 6000);
                    RefreshCotizaciones();
                    return;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }


    function GenerarInterna(e) {
        if (confirm('Esta seguro de generar una Nota de Credito Interna?')) {
            e.preventDefault();
            debugger;
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CreditNoteId: dataItem.CreditNoteId,
                interna:1
            };

            $.ajax({
                url: '@Url.Action("Generar", "CreditNote")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    MostrarMensaje('Nota de Credito Generada!', "success", "Satisfactorio", 6000);
                    RefreshCotizaciones();
                    return;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }

    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (this.Estado != "Revisado") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();

            }
            if (this.Estado != "Aprobado") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Generar').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-GenerarInterna').hide();
            }

            if (this.Estado != "Revisión") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Revisar').hide();
            }
            if (this.Estado != "Emitido") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Imprimir').hide();
                 $('[data-uid=' + this.uid + ']').find('.k-grid-Anular').hide();
            }


        })
    }


    function Anular(e) {

        e.preventDefault();
        debugger;
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            CreditNoteId: dataItem.CreditNoteId,
        };

        if (!confirm('Esta seguro de anular la Nota de Credito No ' + dataItem.NumeroDEI + '?')) {
            return;
        }

        $.ajax({
            url: '@Url.Action("Anular", "CreditNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                MostrarMensaje('Nota de Credito Anulada!', "success", "Satisfactorio", 6000);
                RefreshCotizaciones();
                return;
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
            }
        });

    }



</script>

<h3 class="text-themecolor">Notas Crédito</h3>

@(Html.Kendo().Grid<ERPMVC.Models.CreditNote>()
                                  .Name("gridCreditNotes")
                                  .Columns(columns =>
                                  {
                                      
                                      columns.Command(command =>
                                          {
                                              
                                              command.Custom("Editar").Text(" ").IconClass("far fa-eye").Click("EditCotizacion");
                                              command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCotizacion");
                                              

                                              if (User.HasClaim("Cuentas por Cobrar.Nota de Credito.Aprobar", "true"))
                                                  {
                                                      
                                                  command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("Aprobar");
                                                  }
                                              
                                              if (User.HasClaim("Cuentas por Cobrar.Nota de Credito.Generar", "true"))
                                                  {
                                                      
                                                      command.Custom("Generar").Text(" ").IconClass("fa fa-file-invoice").Click("Generar");
                                                      command.Custom("GenerarInterna").Text(" ").IconClass("fa fa-file-invoice").Click("GenerarInterna");
                                                      command.Custom("Anular").Text(" ").IconClass("fa fa-ban").Click("Anular");
                                                  }

                                              if (User.HasClaim("Cuentas por Cobrar.Nota de Credito.Revisar", "true"))
                                                  {
                                                      command.Custom("Revisar").Text(" ").IconClass("fa fa-check").Click("Revisar");
                                                  }
                                          }).Width(160).Title("Acciones");
                                      columns.Bound(p => p.CreditNoteId).Title("No Ref").Width(100);
                                      columns.Bound(p => p.BranchName).Title("Sucursal").Width(140);
                                      columns.Bound(p => p.NumeroDEI).Title("Número").Width(200);
                                      columns.Bound(p => p.NumeroDEIDocumentoAsociado).Title("No Doc. Asociado").Width(200);
                                      columns.Bound(p => p.CustomerName).Width(300).Title("Cliente");
                                      columns.Bound(p => p.ProductName).Width(180).Title("Servicio");
                                      columns.Bound(p => p.CreditNoteDate).Title("Fecha").Format("{0:dd/MM/yyyy}").Width(130);
                                      columns.Bound(p => p.Total).Title("Total").Format("{0:N2}").Width(130)
                                      .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right; " }); 
                                      columns.Bound(p => p.CreditNoteDate).Title("Vencimiento").Format("{0:dd/MM/yyyy}").Width(130);
                                      columns.Bound(p => p.Estado).Title("Estado").Width(130);
                                  })
                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                                  .ToolBar(tools =>
                                  {
                                      // tools.Create();
                                      if (permisos.HasClaim("Ventas.Nota de Credito.Agregar", "true"))
                                      {
                                          
                                      }
                                         tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacion();" });

                                          tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                          tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                      

                                  })
                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .AutoBind(true)
                                    .Pageable(s => s
                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                    .Empty("No hay datos."))
                                    )
                                    .Filterable()
                                    .Scrollable()
                                    .Resizable(r => r.Columns(true))
                                    // .ClientDetailTemplateId("template")
                                    .Pdf(pdf => pdf.FileName("Nota_Crédito_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                      .Excel(excel => excel.FileName("Nota_Crédito_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    //.Events(e => e.DataBound("dataBound"))
                                    .DataSource(dataSource =>

                                   dataSource
                                   //.Ajax()
                                   .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.CreditNoteId);
                                        model.Field(p => p.CreditNoteName).Editable(true);
                                        model.Field(p => p.CreditNoteId).Editable(true);


                                    })
                                    .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                                    .Events(events =>
                                    {
                                        events.Error("error_handler");
                                        //events.upda("EditHandler");

                                    })
                                    .Read(read => read.Action("Get", "CreditNote"))
                                    .Create(create => create.Action("Insert", "CreditNote"))
                                    .Update(update => update.Action("Update", "CreditNote", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "CreditNote", new { id = "{0}" }))
                              ).Events(e => e.DataBound("dataBound"))
)


<div id="divCreditNote">
    @await Html.PartialAsync("pvwCreditNote", new ERPMVC.DTO.CreditNoteDTO { CreditNoteId = 0, CreditNoteDate = DateTime.Now })
</div>

<div id="ConditionView">
    @*  @await Html.PartialAsync("~/Views/Conditions/pvwConditions.cshtml", new ERPMVC.Models.Conditions { ConditionId = 0 });*@
</div>

<div id="CustomerConditionView">
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNotes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNotes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Nueva Nota de Crédito");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-Editar", "Ver Detalle");
    setRowButtonTooltip(".k-grid-Aprobar", "Aprobar");
    setRowButtonTooltip(".k-grid-Revisar", "Revisar");
    setRowButtonTooltip(".k-grid-Generar", "Generar Documento Fiscal");
    setRowButtonTooltip(".k-grid-GenerarInterna", "Generar Interna");
    setRowButtonTooltip(".k-grid-Anular", "Anular");

</script>
<script>

    // Import DejaVu Sans font for embedding



    // NOTE: Only required if the Kendo UI stylesheets are loaded

    // from a different origin, e.g. cdn.kendostatic.com

    kendo.pdf.defineFont({

        "DejaVu Sans": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans.ttf",

        "DejaVu Sans|Bold": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Bold.ttf",

        "DejaVu Sans|Bold|Italic": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf",

        "DejaVu Sans|Italic": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf"

    });

</script>