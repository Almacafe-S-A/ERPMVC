@{
    ViewData["Title"] = "Nota de Crédito";

}
<script>

    function ClearSession() {
        var dataObject = ["listadoproductosCreditNote"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddCotizacion() {
       // $('#myModalSalesOrder').find(':input').not(':submit').val('');
         //$('#myModalSalesOrder').modal('show');

        ClearSession();

         var dataObject = {
             CreditNoteId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwCreditNote", "CreditNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log(result);
                $("#divCreditNote").html('');
                $("#divCreditNote").html(result);
                $("#Tefono").kendoMaskedTextBox({
                    mask: "(999) 0000-0000"
                });
                $("#TefonoAlert").hide();
                //$("#BranchId").data("kendoDropDownList").value(0);
                //document.getElementById('FacturaFiscal').style.display = 'inline';
                //document.getElementById('FacturaInterna').style.display = 'none';
                //document.getElementById('InvoiceDetail').style.display = 'inline';
                //RefreshCreditNoteDetail();
                // $("#btnSaveCreditNote").show();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditCotizacion(e) {
        e.preventDefault();

        ClearSession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            CreditNoteId: dataItem.CreditNoteId,
            editar : 0
        };

        var IdPuntoEmision = 0;
        $.ajax({
            url: '@Url.Action("pvwCreditNote", "CreditNote")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#divCreditNote").html('');
                $("#divCreditNote").html(result);
                $("#Tefono").kendoMaskedTextBox({
                    mask: "(999) 0000-0000"
                });
                $("#TefonoAlert").hide();
                var txt = $(result);
                var found = $("#IdPuntoEmision", txt);
                IdPuntoEmision = $(found).val();

                 $("#IdPuntoEmision").data("kendoDropDownList").value(IdPuntoEmision);
                //$("#Fiscal").data("kendoDropDownList").value(IdPuntoEmision);
                //$("#Fiscal").val(result.Fiscal);
                 //RefreshCreditNoteDetail();
                 $("#btnSaveCreditNote").hide();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function ImprimirCotizacion(e) {
        e.preventDefault();
        debugger
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.Fiscal) {
            //window.location.href = '@Url.Action("SFCreditNoteInterna", "CreditNote")/' + dataItem.CreditNoteId;
        }
        else {
            var url = '@Url.Action("SFCreditNoteFiscal", "CreditNote")/' + dataItem.CreditNoteId;
           var win = window.open(url, '_blank');
           win.focus();
        }


    }

</script>

<h3 class="text-themecolor">Notas Crédito</h3>

@(Html.Kendo().Grid<ERPMVC.Models.CreditNote>()
                              .Name("gridCreditNotes")
                              .Columns(columns =>
                              {
                                  columns.Command(command =>
                                  {
                                      command.Custom("Editar").Text(" ").IconClass("far fa-list-alt").Click("EditCotizacion");
                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCotizacion");

                                  }).Width(130).Title("Acciones");

                                  columns.Bound(p => p.CreditNoteId).Width(100).Visible(false);
                                  columns.Bound(p => p.CreditNoteName).Width(250);
                                  columns.Bound(p => p.CreditNoteDate).Format("{0:dd/MM/yyyy}").Width(270);
                                  columns.Bound(p => p.ExpirationDate).Format("{0:dd/MM/yyyy}").Width(250);
                                  columns.Bound(p => p.IdPuntoEmision).Width(200);
                                  columns.Bound(p => p.Fiscal).ClientTemplate("#= Fiscal ? 'Si' : 'No' #").Width(150).Visible(false);
                              })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
                              .ToolBar(tools =>
                              {
                      // tools.Create();
                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacion();" });

                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                              })
                               .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .AutoBind(true)
                                .Pageable(s => s
                                .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                .Empty("No hay datos."))
                                )
                                .Filterable()
                                .Scrollable()
                                // .ClientDetailTemplateId("template")
                                .Pdf(pdf => pdf.FileName("Nota_Crédito_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                  .Excel(excel => excel.FileName("Nota_Crédito_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                //.Events(e=>e.Save("onsave"))
                                .DataSource(dataSource =>

                               dataSource
                               //.Ajax()
                               .WebApi()
                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.CreditNoteId);
                                    model.Field(p => p.CreditNoteName).Editable(true);
                                    model.Field(p => p.CreditNoteId).Editable(true);


                                })
                                .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                                .Events(events =>
                                {
                                    events.Error("error_handler");
                        //events.upda("EditHandler");

                    })
                                .Read(read => read.Action("Get", "CreditNote"))
                                .Create(create => create.Action("Insert", "CreditNote"))
                                .Update(update => update.Action("Update", "CreditNote", new { id = "{0}" }))
                                .Destroy(destroy => destroy.Action("Delete", "CreditNote", new { id = "{0}" }))
                          )
)

<div id="divCreditNote">
    @await Html.PartialAsync("pvwCreditNote", new ERPMVC.DTO.CreditNoteDTO { CreditNoteId = 0, CreditNoteDate = DateTime.Now, DeliveryDate = DateTime.Now, ExpirationDate = DateTime.Now })
</div>

<div id="ConditionView">
    @*  @await Html.PartialAsync("~/Views/Conditions/pvwConditions.cshtml", new ERPMVC.Models.Conditions { ConditionId = 0 });*@
</div>

<div id="CustomerConditionView">
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNotes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNotes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    //setRowButtonTooltip(".k-grid-GenerarFactura", "Generar una factura fiscal!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-Editar", "Ver Detalle");
</script>
<script>

    // Import DejaVu Sans font for embedding



    // NOTE: Only required if the Kendo UI stylesheets are loaded

    // from a different origin, e.g. cdn.kendostatic.com

    kendo.pdf.defineFont({

        "DejaVu Sans": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans.ttf",

        "DejaVu Sans|Bold": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Bold.ttf",

        "DejaVu Sans|Bold|Italic": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf",

        "DejaVu Sans|Italic": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf"

    });

</script>