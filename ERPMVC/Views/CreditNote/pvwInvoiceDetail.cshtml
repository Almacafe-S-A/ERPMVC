@model ERPMVC.Models.CreditNoteLine



<script>


    @*function GetInvoiceId() {
       // console.log($("#DescriptionDetail").val());
        var subproductname = '', unidaddemedida = '';
        if ($("#UnitOfMeasureId") != null) {
            if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
            }
        }

        if ($("#SubProductId") != null) {
            if ($("#SubProductId").data("kendoDropDownList") != null) {
                subproductname = $("#SubProductId").data("kendoDropDownList").text();
            }
        }

        var displayedData = $("#gridCreditNoteDetail").data().kendoGrid.dataSource.view();
        var id = -999999;
        debugger;
        if (Number($("#CreditNoteLineId").val()) === 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    //console.log('Linea:' + displayedData[i].InvoiceLineId);
                    //console.log('Linea:' + id);
                    if (displayedData[i].InvoiceLineId > id)
                        id = displayedData[i].InvoiceLineId;

                }

                id = id + 1;
            }
            else if ($("#SubProductId").val() > 0) {
                id =  1;
            }
        }
        else {
            id = $("#InvoiceLineId").val();
        }


        return {
                CreditNoteLineId : id,
                CreditNoteId: @Model.CreditNoteId,
                /*ProductId: $("#ProductId").val(),*/
                SubProductId: $("#SubProductId").val(),
                SubProductName: subproductname,
                UnitOfMeasureId: $("#UnitOfMeasureId").val(),
                UnitOfMeasureName: unidaddemedida,
                Description: $("#DescriptionDetail").val(),
                Quantity: $("#Quantity").val(),
                Price: $("#Price").val(),
                Amount: $("#AmountLine").val(),
                DiscountPercentage: $("#DiscountPercentage").val(),
                DiscountAmount: $("#DiscountAmount").val(),
                SubTotal: $("#SubTotalLine").val(),
                TaxPercentage: $("#TaxPercentage").val(),
                TaxCode: $("#TaxCode").val(),
                TaxAmount: $("#TaxAmount").val(),
                Total: $("#TotalLine").val(),
            }
        }

    function RefreshInvoiceDetail() {
        var grid = $("#gridInvoiceDetail").getKendoGrid();
        grid.dataSource.read();
    }*@


    @*function AddCotizacionDetalle() {
        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'  ) {

            llenarsubproduct();
            $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
            $('#TaxCode').val(0);
            $('#myModalInvoiceLine').modal('show');
        } else {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Validación",
                message: "Debe seleccionar un producto!"
            }, "error");

        }

    }

    function llenarsubproduct() {
        var combobox = $('#SubProductId').getKendoDropDownList();
        if (combobox != null) {
            var dataObject = { 'ProductId': $("#ProductId").val() };
            $.ajax({
                url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (data) {
                    combobox.setDataSource(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });
        }
    }

    var hcustom = 0;*@
    function SeleccionarInvoiceItem(e) {
        var notification = $("#notification").data("kendoNotification");
        e.preventDefault();
        debugger
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            //$("#SubProductId").data("kendoDropDownList").dataSource.read();
            $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
            $("#DescriptionDetail").val(dataItem.Description);
            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#AmountLine").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#TaxId").data("kendoDropDownList").value(dataItem.TaxId);
            $("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);
            ////$("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            //$("#DescriptionDetail").val(dataItem.Description);
    }


        @*function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "InvoiceLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridInvoiceDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }*@

</script>



<div class="box">
    <div class="box-body">
        <h3 class="text-themecolor">Seleccionar item de Factura</h3>
        @(Html.Kendo().Grid<ERPMVC.Models.CreditNoteLine>()
                                                          .Name("gridInvoiceDetail")
                                                          .Columns(columns =>
                                                          {
                                                              columns.Command(command =>
                                                              {
                                                                  //if (Model.editar == 1)
                                                                  //{
                                                                  //    command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                  //}
                                                                  command.Custom("Seleccionar").Text(" ").IconClass("fal fa-hand-pointer").Click("SeleccionarInvoiceItem");
                                                                  // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                  //  command.Edit(); command.Destroy();
                                                              }).Width(150);

                                                              columns.Bound(p => p.CreditNoteLineId).Title("Id Linea").Width(150);
                                                              columns.Bound(p => p.CreditNoteId).Title("Id Maestro").Width(150);
                                                              columns.Bound(p => p.SubProductId).Title("IdProducto").Width(150);
                                                              columns.Bound(p => p.SubProductName).Title("Producto").Width(150);
                                                              columns.Bound(p => p.Description).Title("Descripcion").Width(150);
                                                              columns.Bound(p => p.UnitOfMeasureId).Title("Unidad de medida").Width(150);
                                                              columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(150);
                                                              columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio").Format("{0:n2}").Width(150);
                                                              columns.Bound(p => p.Amount).Format("{0:n2}").Title("Monto").Width(150);
                                                              //  columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(150);
                                                              columns.Bound(p => p.DiscountPercentage).Format("{0:n2}").Title("Porcentaje Descuento").Width(150);
                                                              columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Descuentos").Width(150);
                                                              columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Width(150);
                                                              columns.Bound(p => p.TaxId).Title("Impuesto").Width(150);
                                                              columns.Bound(p => p.TaxPercentage).Format("{0:n2}").Title("Porcentaje Impuesto").Width(150);
                                                              //columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(150);
                                                              // columns.Bound(p => p.tax).Title("Tipo Impuesto").Width(150);
                                                              columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Impuestos").Width(150);

                                                              columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(150);

                                                          })
                                                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                       .DoesNotContain("No contiene")
                                                       .EndsWith("Termina con")
                                                       .IsEqualTo("Es igual a")
                                                       .IsNotEqualTo("No es igual a")
                                                       .IsNull("Es nulo")
                                                       .StartsWith("Inicia con")


                                                 )
                                                 .ForNumber(n => n
                                                   .Clear()
                                                   .IsEqualTo("Es igual a")
                                                   .IsGreaterThan("Es mayor que")
                                                   .IsLessThan("Es menor que")
                                                   .IsNull("Es nulo")
                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 )
                                                 .ForDate(d => d
                                                 .Clear()
                                                 .IsEqualTo("Es igual que")
                                                 .IsGreaterThan("Es mayor que")
                                                 .IsLessThan("Es menor que")
                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 .IsNotEqualTo("No es igual que")
                                                  )
                                               ))
                                                          .ToolBar(tools =>
                                                          {
                                                              //if (Model.editar == 1)
                                                              //{
                                                              //    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                              //    .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                              //}

                                                              tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                                              tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



                                                          })
                                                           .Editable(e => e.Mode(GridEditMode.PopUp))
                                                            .Sortable()
                                                            .AutoBind(true)
                                                            .Pageable()
                                                            .Filterable()
                                                            .Scrollable()
                                                            // .ClientDetailTemplateId("template")
                                                            .Pdf(pdf => pdf.FileName("FacturaDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                              .Excel(excel => excel.FileName("FacturaDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                            //.Events(e=>e.Save("onsave"))
                                                            .DataSource(dataSource =>

                                                           dataSource
                                                           //.Ajax()
                                                           .WebApi()

                                                            .ServerOperation(true)
                                                            .Model(model =>
                                                            {
                                                                model.Id(p => p.CreditNoteLineId);
                                                                model.Field(p => p.CreditNoteLineId).Editable(false);
                                                                model.Field(p => p.CreditNoteId).Editable(false);

                                                            })
                                                            .Events(events =>
                                                            {
                                                                events.Error("error_handler");
                                                                //events.upda("EditHandler");

                                                            })
                                                      //.Read(read => read.Action("GetCreditNoteLineByCreditNoteId", "CreditNoteLine").Data("GetInvoiceId"))
                                                      //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                      //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                      //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                      )
        )

    </div>
</div>


<script>

</script>