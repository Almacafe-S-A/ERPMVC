@model ERPMVC.DTO.CreditNoteDTO
@using System.Security.Claims
@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosCreditNote"];
}

<script>


    function GetInvoiceId() {
        var InvoiceId = $("#InvoiceId").val();
        var CreditNoteId = $("#CReditNoteId").val();

        return{
            InvoiceId: InvoiceId,
            CreditNoteId: CreditNoteId
        }
    }

    function RefreshInvoiceDetail() {
        var grid = $("#gridCreditNoteDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function AddCotizacionDetalle() {
        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0') {
            CalcularTotalDocumento();
            var validator = $("#frmSalesOrderLine").data("kendoValidator");
            validator.hideMessages();
            //$(".k-icon k-i-warning").empty();
            //document.getElementsByClassName("k-icon k-i-warning").innerHTML = "";
            llenarsubproduct();
            $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
            $("#CreditNoteLineId").val(0);
            $('#TaxId').data("kendoDropDownList").value(0);
            $('#DescriptionDetail').val('');
            $('#SubProductId').data("kendoDropDownList").value(0);
            $("#Quantity").data("kendoNumericTextBox").value(0);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(0);
            $("#DiscountAmount").data("kendoNumericTextBox").value(0);
            $("#Price").data("kendoNumericTextBox").value(0);
            //$("#Amount").data("kendoNumericTextBox").value(0);
            $("#SubTotalLine").data("kendoNumericTextBox").value(0);
            $("#TaxAmount").data("kendoNumericTextBox").value(0);
            $("#AmountLine").data("kendoNumericTextBox").value(0);
            $("#TotalLine").data("kendoNumericTextBox").value(0);
            $("#AccountId").data("kendoDropDownList").value('');
            //$("#UnitOfMeasureId").data("kendoDropDownList").value('');
            $("#TaxPercentage").data("kendoNumericTextBox").value(0);
            var x = document.getElementsByClassName("k-invalid");
            if (x.length > 0) {
                $("span").removeClass("k-invalid");
            }
            var validator = $("#frmSalesOrderLine").data("kendoValidator");
            validator.hideMessages();
            $('#myModalInvoiceLine').modal('show');
        } else {
            var notification = $("#notification").data("kendoNotification");
            //notification.show({
            //    title: "Validación",
            //    message: "Debe seleccionar un producto!"
            //}, "error");
            $.toast({
                heading: 'Validación',
                text: "Debe seleccionar un Servicio!",
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
            });

        }

    }

    function llenarsubproduct() {
        var combobox = $('#SubProductId').getKendoDropDownList();
        if (combobox != null) {
            var dataObject = { 'ProductId': $("#ProductId").val() };
            $.ajax({
                url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (data) {
                    combobox.setDataSource(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: textStatus + ": " + XMLHttpRequest.responseText,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });

                }
            });
        }
    }

    function llenarsubproductprincipal() {
        var combobox = $('#SubProductPrincipal').getKendoDropDownList();
        if (combobox != null) {
            var dataObject = { 'ProductId': $("#ProductId").val() };
            $.ajax({
                url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (data) {
                    combobox.setDataSource(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: textStatus + ": " + XMLHttpRequest.responseText,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });

                }
            });
        }
    }

    var hcustom = 0;
    function EditCotizacionDetalle(e) {
        var notification = $("#notification").data("kendoNotification");
        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //  //debugger;
        if (dataItem.CreditNoteId > 0) {
             $("#btnActualizarCotizacionLinea").prop("disabled", true);
            var subproducto = 0;
            var dataObject = { 'CreditNoteLineId': dataItem.CreditNoteLineId };
            $.ajax({
                url: '@Url.Action("pvwCreditNoteLine", "CreditNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    GetPercentage();
                    llenarsubproduct();
                    $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: textStatus + ": " + XMLHttpRequest.responseText,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });

                }
            });

            $("#frmSalesOrderLine :input").prop("disabled", true);
        }
        else {


            $("#btnActualizarCotizacionLinea").prop("disabled", false);
            var x = document.getElementsByClassName("k-invalid");
            if (x.length > 0) {
                $("span").removeClass("k-invalid");
            }
            var validator = $("#frmSalesOrderLine").data("kendoValidator");
            validator.hideMessages();
            $("#CreditNoteLineId").val(dataItem.CreditNoteLineId);
            llenarsubproduct();
            $("#AccountId").data("kendoDropDownList").value(dataItem.AccountId);
            $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
            $("#DescriptionDetail").val(dataItem.Description);
            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#AmountLine").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountAmount);
            $("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#TaxId").data("kendoDropDownList").value(dataItem.TaxId);
            $("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);
        }




        $('#myModalInvoiceLine').modal('show');

    }


        function Delete(e) {

        e.preventDefault();
        if (confirm('¿Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "CreditNoteLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: textStatus + ": " + XMLHttpRequest.responseText,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });

                }
            });

            var grid = $("#gridCreditNoteDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            CalcularTotalDocumento();
        }
    }

</script>



<div class="box">
    <h3 class="text-themecolor">Detalle de Nota de Crédito</h3>
    <div class="box-body">
        @(
            Html.Kendo().Grid<ERPMVC.Models.CreditNoteLine>()
                                                                                      .Name("gridCreditNoteDetail")
                                                                                      .Columns(columns =>
                                                                                      {

                                                                                          columns.Command(command =>
                                                                                  {                                                                    
                                                                                                  command.Destroy().Text(" ").IconClass("fa fa-trash-alt");

                                                                                          }).Width(80).Title(" ");

                                                                                      columns.Bound(p => p.CreditNoteLineId).Title("Id Línea").Width(150).Hidden(true);
                                                                                      columns.Bound(p => p.AccountId).Title("Cuenta").Width(150).Hidden(true);
                                                                                      columns.Bound(p => p.AccountName).Title("Nombre Cuenta").Width(250).Visible(false);
                                                                                      columns.Bound(p => p.SubProductId).Title("IdProducto").Width(150).Hidden(true);
                                                                                      columns.Bound(p => p.SubProductName).Title("Servicio").Width(150).Visible(false);
                                                                                      columns.Bound(p => p.SubProduct).Title("Producto")
                                                                                      .ClientTemplate("#=typeof SubProduct === 'undefined'||SubProduct===null?SubProductName:SubProduct.ProductName#").Width(250);
                                                                                      columns.Bound(p => p.UnitOfMeasure).Title("Unidad Medida")
                                                                                      .ClientTemplate("#=typeof UnitOfMeasure === 'undefined'||UnitOfMeasure===null?UnitOfMeasureName:UnitOfMeasure.UnitOfMeasureName#").Width(250);

                                                                                      columns.Bound(p => p.Description).Title("Descripción").Width(250).Hidden(true);
                                                                                      columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(150);
                                                                                      columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio").Format("{0:n2}").Width(150);
                                                                                      columns.Bound(p => p.Amount).Format("{0:n2}").Title("Monto").Width(150);
                                                                                      columns.Bound(p => p.DiscountPercentage).Format("{0:n2}").Title("Porcentaje Descuento").Width(250).Visible(false);
                                                                                      columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Descuentos").Width(200);
                                                                                      columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Width(150);
                                                                                      columns.Bound(p => p.TaxId).Format("{0:n2}").Title("Impuesto").Width(150).Visible(false);
                                                                                      columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(200).Visible(false);
                                                                                      columns.Bound(p => p.TaxPercentage).Format("{0:n2}").Title("Porcentaje Impuesto").Width(250).Visible(false);                                                                                      
                                                                                      columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Impuestos").Width(150);

                                                                                      columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(150);

                                                                                  })
                                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                               .Clear()
                                                                               .Contains("Contiene")
                                                                               .DoesNotContain("No contiene")
                                                                               .EndsWith("Termina con")
                                                                               .IsEqualTo("Es igual a")
                                                                               .IsNotEqualTo("No es igual a")
                                                                               .IsNull("Es nulo")
                                                                               .StartsWith("Inicia con")


                                                                         )
                                                                         .ForNumber(n => n
                                                                           .Clear()
                                                                           .IsEqualTo("Es igual a")
                                                                           .IsGreaterThan("Es mayor que")
                                                                           .IsLessThan("Es menor que")
                                                                           .IsNull("Es nulo")
                                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         )
                                                                         .ForDate(d => d
                                                                         .Clear()
                                                                         .IsEqualTo("Es igual que")
                                                                         .IsGreaterThan("Es mayor que")
                                                                         .IsLessThan("Es menor que")
                                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         .IsNotEqualTo("No es igual que")
                                                                          )
                                                                       ))
                                                                                  .ToolBar(tools =>
                                                                                  {
                                                                                      if (Model.NumeroDEIString != "")
                                                                                      {
                                                                                          
                                                                                                tools.Create().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm" });
                                                                                          
                                                                                      }
                                                                                      

                                                                                  })
                                                                                   .Editable(e => e.Mode(GridEditMode.InCell))
                                                                                    .Sortable()
                                                                                    .AutoBind(true)
                                                                                    .Pageable(s => s
                                                                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                                                    .Empty("No hay datos."))
                                                                                    .Enabled(false))
                                                                                    //.Events(e => e.DataBound("CalcularTotalDocumento"))
                                                                                    .Filterable()
                                                                                    .Scrollable()
                                                                                    // .ClientDetailTemplateId("template")
                                                                                    .Pdf(pdf => pdf.FileName("Nota_Crédito_Detalle_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                      .Excel(excel => excel.FileName("Nota_Crédito_Detalle_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                    //.Events(e=>e.Save("onsave"))
                                                                                    .DataSource(dataSource =>

                                                                                   dataSource
                                                                                   //.Ajax()
                                                                                   .WebApi()

                                                                                    .ServerOperation(true)
                                                                                    .Model(model =>
                                                                                    {
                                                                                        model.Id(p => p.CreditNoteLineId);
                                                                                        model.Field(p => p.CreditNoteLineId).Editable(false);
                                                                                        model.Field(p => p.CreditNoteId).Editable(false);

                                                                                    })
                                                                                    .Sort(s => s.Add(m => m.CreditNoteLineId).Descending())
                                                                                    .Events(events =>
                                                                                    {
                                                                                        events.Error("error_handler");
                                                                                        //events.upda("EditHandler");

                                                                                    })
                                                                                    .Read(read => read.Action("GetByCreditLineId", "CreditNoteLine").Data("GetInvoiceId"))
                                                                              
                                                                              )
        )

    </div>
</div>


<script>

    function GetProductType(){
        return { ProductType:1}
    }
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNoteDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNoteDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    if (@Model.CreditNoteId > 0) {
        setRowButtonTooltip(".k-grid-Editar", "Ver Detalle");
    }
    else {
        setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    }
</script>