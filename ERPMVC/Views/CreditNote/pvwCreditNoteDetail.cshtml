@model ERPMVC.DTO.CreditNoteDTO
@using System.Security.Claims
@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosCreditNote"];
    bool editable = Model.CreditNoteId == 0;
}

<script>


    function GetInvoiceId() {
        var InvoiceId = $("#InvoiceId").val();
        var CreditNoteId = $("#CreditNoteId").val();

        return{
            InvoiceId: InvoiceId,
            CreditNoteId: CreditNoteId
        }
    }

    function RefreshInvoiceDetail() {
        var grid = $("#gridCreditNoteDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function Calcular(e) {
        debugger;
        if (e.model.CreditValue > e.model.SaldoPendiente && e.model.Price != 0) {

            MostrarMensaje("La cantidad de credito no puede ser mayor al valor del item", "Error", "Validación", 6000);
            e.model.CreditValue = 0
            
        }
        e.model.SaldoPendiente = e.model.Amount;
        e.model.SaldoPendiente -= e.model.CreditValue;

            
        $("#gridCreditNoteDetail").data("kendoGrid").refresh();

            return;
    }


    function totalColumnas(tiporesultado, moneda) {
        var data = $("#gridCreditNoteDetail").getKendoGrid().dataSource.data();
        var total = 0;

        switch (tiporesultado) {
            case 1:
                data.forEach(r => total += r.CreditValue);
                break;
            case 2: /// Calcular el total CIB
                data.forEach(r => total += r.DiscountAmount);
                break;
            case 3: ////Calcular el total CIF LPS
                data.forEach(r => total += r.SubTotal);
                break;
            case 4://///Calcular el total de Valor de derechos importacion
                data.forEach(r => total += r.TaxAmount);
                break;
            case 5:
                data.forEach(r => total += r.Total);
                break;

            case 6:
                data.forEach(r => total += r.SaldoPendiente);
                break;
            case 7:
                data.forEach(r => total += r.Amount);
                break;

            default:
                break;
        }
        var formatter = new Intl.NumberFormat('es-HN', {
            style: 'currency',
            currency: 'LPS',
            minimumFractionDigits: 2
        });
        if (moneda == 1) {
            return formatter.format(total);
        }
        if (moneda == 2) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2
            });
            return formatter.format(total);
        }
        if (moneda == 0) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'LPS',
                minimumFractionDigits: 2
            });
            return formatter.format(total).replace(/[a-z]{3}/i, "").trim();
        }
        return total;
    }

</script>



<div class="box">
    <h3 class="text-themecolor">Detalle de Nota de Crédito</h3>
    <div class="box-body">
        @(
            Html.Kendo().Grid<ERPMVC.Models.CreditNoteLine>()
                                                                                      .Name("gridCreditNoteDetail")
                                                                                        .Events(e =>
                                                                                        e.CellClose("Calcular")
                                                                                        //.DataBound("Calcular")
                                                                                        )
                                                                                      .Columns(columns =>
                                                                                      {

                                                                                          columns.Command(command =>
                                                                                  {                                                                    
                                                                                                  command.Destroy().Text(" ").IconClass("fa fa-trash-alt");

                                                                                          }).Width(80).Title(" ");

                                                                                      columns.Bound(p => p.CreditNoteLineId).Title("Id Línea").Width(150).Hidden(true);                                                                                    
                                                                                      columns.Bound(p => p.SubProductId).Title("IdProducto").Width(150).Hidden(true);
                                                                                      columns.Bound(p => p.SubProductName).Title("SubServicio").Width(150).Visible(false);
                                                                                      columns.Bound(p => p.SubProduct).Title("Producto")
                                                                                      .ClientTemplate("#=typeof SubProduct === 'undefined'||SubProduct===null?SubProductName:SubProduct.ProductName#").Width(250);
                                                                                      columns.Bound(p => p.UnitOfMeasure).Title("Unidad Medida")
                                                                                      .ClientTemplate("#=typeof UnitOfMeasure === 'undefined'||UnitOfMeasure===null?UnitOfMeasureName:UnitOfMeasure.UnitOfMeasureName#").Width(150);

                                                                                      columns.Bound(p => p.Description).Title("Descripción").Width(250).Hidden(true);
                                                                                      columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(150).Hidden(true);
                                                                                      columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio").Format("{0:n2}").Width(150);
                                                                                      columns.Bound(p => p.Amount).Format("{0:n2}").Title("Valor del Servicio").Width(200)
                                                                                      .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(7,0)#</div>")
                                                                                         .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right; " });
                                                                                      columns.Bound(p => p.CreditValue).Format("{0:n2}").Title("Valor del Credito").Width(200)
                                                                                      .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(1,0)#</div>")
                                                                                         .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right; background-color:LightGray;" });
                                                                                      columns.Bound(p => p.SaldoPendiente).Format("{0:n2}").Title("Saldo Pendiente").Width(200)
                                                                                      .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(6,0)#</div>")
                                                                                         .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right; " });
                                                                                      columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Descuentos").Width(200).Visible(false);
                                                                                      columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Width(150).Visible(false);
                                                                                      columns.Bound(p => p.TaxId).Format("{0:n2}").Title("Impuesto").Width(150).Visible(false);
                                                                                      columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(200).Visible(false);
                                                                                      columns.Bound(p => p.TaxPercentage).Format("{0:n2}").Title("Porcentaje Impuesto").Width(250).Visible(false);                                                                                      
                                                                                      columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Impuestos").Width(150).Visible(false);

                                                                                      columns.Bound(p => p.Total).Format("{0:n2}").Title("Saldo Pendiente").Width(150).Visible(false);

                                                                                  })
                                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                               .Clear()
                                                                               .Contains("Contiene")
                                                                               .DoesNotContain("No contiene")
                                                                               .EndsWith("Termina con")
                                                                               .IsEqualTo("Es igual a")
                                                                               .IsNotEqualTo("No es igual a")
                                                                               .IsNull("Es nulo")
                                                                               .StartsWith("Inicia con")


                                                                         )
                                                                         .ForNumber(n => n
                                                                           .Clear()
                                                                           .IsEqualTo("Es igual a")
                                                                           .IsGreaterThan("Es mayor que")
                                                                           .IsLessThan("Es menor que")
                                                                           .IsNull("Es nulo")
                                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         )
                                                                         .ForDate(d => d
                                                                         .Clear()
                                                                         .IsEqualTo("Es igual que")
                                                                         .IsGreaterThan("Es mayor que")
                                                                         .IsLessThan("Es menor que")
                                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         .IsNotEqualTo("No es igual que")
                                                                          )
                                                                       ))
                                                                                  .ToolBar(tools =>
                                                                                  {
                                                                                      if (Model.NumeroDEI != "BORRADOR")
                                                                                      {
                                                                                          
                                                                                                tools.Create().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm" });
                                                                                          
                                                                                      }
                                                                                      

                                                                                  })
                                                                                   .Editable(e => e.Mode(GridEditMode.InCell))
                                                                                    .Sortable()
                                                                                    .Resizable(r => r.Columns(true))
                                                                                    .AutoBind(true)
                                                                                    .Pageable(s => s
                                                                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                                                    .Empty("No hay datos."))
                                                                                    .Enabled(false))
                                                                                    //.Events(e => e.DataBound("CalcularTotalDocumento"))
                                                                                    .Filterable()
                                                                                    .Scrollable()
                                                                                    // .ClientDetailTemplateId("template")
                                                                                    .Pdf(pdf => pdf.FileName("Nota_Crédito_Detalle_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                      .Excel(excel => excel.FileName("Nota_Crédito_Detalle_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                    //.Events(e=>e.Save("onsave"))
                                                                                    .DataSource(dataSource =>

                                                                                   dataSource
                                                                                   //.Ajax()
                                                                                   .WebApi()

                                                                                    .ServerOperation(true)
                                                                                    .Model(model =>
                                                                                    {
                                                                                        model.Id(p => p.CreditNoteLineId);
                                                                                        model.Field(p => p.CreditNoteLineId).Editable(false);
                                                                                        model.Field(p => p.CreditNoteId).Editable(false);
                                                                                        model.Field(p => p.Amount).Editable(false);
                                                                                        model.Field(p => p.Quantity).Editable(false);
                                                                                        model.Field(p => p.Price).Editable(false);
                                                                                        model.Field(p => p.CreditValue).Editable(editable);
                                                                                        model.Field(p => p.TaxAmount).Editable(false);

                                                                                        model.Field(p => p.DiscountAmount).Editable(false);
                                                                                        model.Field(p => p.Total).Editable(false);
                                                                                        model.Field(p => p.SubTotal).Editable(false);
                                                                                        model.Field(p => p.SubProduct).Editable(editable);
                                                                                        model.Field(p => p.UnitOfMeasure).Editable(editable);
                                                                                        model.Field(p => p.SaldoPendiente).Editable(false);


                                                                                    })
                                                                                    .Sort(s => s.Add(m => m.CreditNoteLineId).Descending())
                                                                                    .Events(events =>
                                                                                    {
                                                                                        events.Error("error_handler");
                                                                                        //events.upda("EditHandler");

                                                                                    })
                                                                                    .Read(read => read.Action("GetByCreditLineId", "CreditNoteLine").Data("GetInvoiceId"))
                                                                              
                                                                              )
        )

    </div>
</div>


<script>

    function GetProductType(){
        return { ProductType:1}
    }
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNoteDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCreditNoteDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    if (@Model.CreditNoteId > 0) {
        setRowButtonTooltip(".k-grid-Editar", "Ver Detalle");
    }
    else {
        setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    }
</script>