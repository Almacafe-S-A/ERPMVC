@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Horas Trabajadas";

}

<script>
    $(document).ready(function () {
        ClearSession();
    });

    function AddHoursWorked() {
        
        if ($("#IdEmpleado").val() != 0) {
            //if ($("#IdEmpleado").data("kendoDropDownList") != null) {
            $("#IdEmpleado").data("kendoDropDownList").value(0);
            //}
        }
        $('#myModalHoursWorked').find(':input').not(':submit').val('');
        $('#myModalHoursWorked').modal('show');
        ClearSession();

         var dataObject = {
            IdHorastrabajadas: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwAddHoursWorked", "HoursWorked")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#HoursWorked").html('');
                $("#HoursWorked").html(result);

                //RefreshHoursWorkedDetail();
                $("#btnSaveHoursWorked").show();
                $('#myModalHoursWorked').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });

        
    }

    function RefrescarGrid() {
        var grid = $("#gridHW").getKendoGrid();
        grid.dataSource.read();
    }
    function EditHW(e) {
        e.preventDefault();

        ClearSession();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            IdHorastrabajadas: dataItem.IdHorastrabajadas,
            editar : 0
        };
        
        $.ajax({
            url: '@Url.Action("pvwAddHoursWorked","HoursWorked")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numHoursWorked").html('');
                $("#numHoursWorked").html(result);
                //RefreshHoursWorkedDetail();
                 $('#myModalHoursWorked').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
        
    }
    function ClearSession() {
        var dataObject = ["listadoHoursWorkedDetail"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }
</script>

<h3 class="text-themecolor">Horas Trabajadas</h3>

@(Html.Kendo().Grid<ERPMVC.Models.HoursWorked>()
            .Name("gridHW")
            .Columns(columns =>
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    command.Custom("Editar").Click("EditHW");
                    //command.Edit().Text("Editar").UpdateText("Actualizar").CancelText("Cancelar"); ;
                }).Width(150).Title("Acciones");
                columns.Bound(p => p.IdHorastrabajadas).Width(80).Title("Id");
                columns.Bound(p => p.NombreEmpleado).Width(200);
                columns.Bound(p => p.FechaEntrada).Format("{0:dd/MM/yyyy}").Title("Entrada").Width(150);
                columns.Bound(p => p.EsFeriado).Width(150);
                columns.Bound(p => p.MultiplicaHoras).Width(150);


            })
                .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))

            .ToolBar(tools =>
            {

                //tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddHoursWorked()" });
                //tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                //tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("HoursWorkedReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("CAIReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.IdHorastrabajadas);
                model.Field(p => p.IdHorastrabajadas).Editable(false);

            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("GetHoursWorked", "HoursWorked"))
            .Create(create => create.Action("Insert", "HoursWorked").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "HoursWorked").Type(HttpVerbs.Post))
            .Destroy(destroy => destroy.Action("Delete", "HoursWorked").Type(HttpVerbs.Delete))

            )
)

<div id="numHoursWorked">
    @await Html.PartialAsync("pvwAddHoursWorked", new ERPMVC.DTO.HoursWorkedDTO { IdHorastrabajadas = 0 })
</div>