@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Horas Trabajadas";

}



<h3 class="text-themecolor">Horas Trabajadas</h3>

@(Html.Kendo().Grid<ERPMVC.Models.HoursWorked>()
            .Name("gridHW")
            .Columns(columns =>
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    //command.Custom("Editar").Click("EditEmp");
                    command.Edit().Text("Editar").UpdateText("Actualizar").CancelText("Cancelar"); ;
                }).Width(150).Title("Acciones");
                columns.Bound(p => p.IdHorastrabajadas).Width(80).Title("Id");
                columns.Bound(p => p.NombreEmpleado).Width(200);
                columns.Bound(p => p.FechaEntrada).Format("{0:dd/MM/yyyy}").Title("Entrada").Width(150);
                columns.Bound(p => p.EsFeriado).Width(150);
                columns.Bound(p => p.MultiplicaHoras).Width(150);


            })
                .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))

            .ToolBar(tools =>
            {

                //tools.Create();
                //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                //                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCAI()" });
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("HoursWorkedReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("CAIReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.IdHorastrabajadas);
                model.Field(p => p.IdHorastrabajadas).Editable(false);

            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("GetHoursWorked", "HoursWorked"))
            .Create(create => create.Action("Insert", "HoursWorked").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "HoursWorked").Type(HttpVerbs.Post))
            .Destroy(destroy => destroy.Action("Delete", "HoursWorked").Type(HttpVerbs.Delete))

            )
)

@*<div id="numCAI">
    @await Html.PartialAsync("pvwAddCAI", new ERPMVC.DTO.CAIDTO { IdCAI = 0, FechaLimiteEmision = DateTime.Now, FechaRecepcion = DateTime.Now })
</div>*@