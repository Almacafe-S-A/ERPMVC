@model ERPMVC.DTO.HoursWorkedDTO

<script>
    function GetIdHorasTrabajadas() {

        //console.log("Soy cool");
        //var Horaentrada = '', Horasalida = '', Multiplicahoras = '';
        //if ($("#Horaentrada") != null) {
        //    if ($("#Horaentrada").data("KendoDateTimePicker") != null) {
        //        Horaentrada = $("#Horaentrada").getKendoDateTimePicker().value();
        //    }
        //}

        //if ($("#Horasalida") != null) {
        //    if ($("#Horasalida").data("KendoDateTimePicker") != null) {
        //        Horasalida = $("#Horasalida").val();
        //    }
        //}
        var Horaentrada = '', Horasalida = '', Multiplicahoras = '', IdDetallehorastrabajadas;
        Multiplicahoras = $("#xHoras").val();
        IdDetallehorastrabajadas = $("#IdDetallehorastrabajadas").val();
        Horaentrada = $("#Horaentrada").val();
        Horasalida = $("#Horasalida").val();
        return {
            'Multiplicahoras': Multiplicahoras,
            'IdDetallehorastrabajadas': IdDetallehorastrabajadas,
            'IdHorasTrabajadas': @Model.IdHorastrabajadas,
            'Horaentrada': Horaentrada,
            'Horasalida': Horasalida,
        }
    }

    function RefreshHoursWorkedDetail() {
        var grid = $("#gridHWD").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }

    function AddHoursWorkedDetail() {
        var notification = $("#notification").data("kendoNotification");
        //  console.log($("#ProductId").val());

            // llenarsubproduct();
        $("#frmHoursWorkedDetail :input").not('#IdDetallehorastrabajadas').prop("disabled", false);
            //$("#frmEndososCertificadosLine :input").val('');
        $('#ModalHWD').modal('show');


        console.log($("#xHoras").val());
        console.log($("#Horaentrada").val())

        }

    function EditHoursWorkedDetail(e) {

        @*e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        //var subproducto = 0;
        //var dataObject = { 'SalesOrderLineId': dataItem.SalesOrderLineId };

        //var codigoimpuesto = 0;

        if (dataItem.SalesOrderId > 0) {
            $.ajax({
                url: '@Url.Action("pvwSalesOrderDetailMant", "SalesOrderLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    var txt = $(data);
                    var found = $("#SubProductId", txt);
                    subproducto = $(found).val();


                    //var foundcodigoimpuesto = $("#TaxCode", txt);
                    //console.log(foundcodigoimpuesto);
                    //codigoimpuesto = $(foundcodigoimpuesto).val();
                    //console.log(codigoimpuesto);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });


           // console.log(subproducto);
            $("#frmSalesOrderLine :input").prop("disabled", true);
            llenarsubproduct();
            var combobox = $('#SubProductId').getKendoDropDownList();
            combobox.value(subproducto);
            combobox.trigger('change');

            //var comboboxtaxcode = $('#TaxCode').getKendoDropDownList();
            //comboboxtaxcode.dataSource.read();
            //comboboxtaxcode.value(codigoimpuesto);
            //comboboxtaxcode.trigger('change');

        }
        else {
            $("#SalesOrderLineId").val(dataItem.SalesOrderLineId);
            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#Description").val(dataItem.Description);
            $("#Amount").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#Total").data("kendoNumericTextBox").value(dataItem.Total);
            $("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#SubTotal").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountAmount);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#SubProductId").data("kendoDropDownList").dataSource.read();
            $("#TaxCode").data("kendoDropDownList").value(dataItem.TaxCode);
            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);

        }

        $('#myModalSalesOrderLine').modal('show');*@

    }


        function Delete(e) {

        @*e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "SalesOrderLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridCotizacionesDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }*@
    }

</script>

<div class="box">
    <div class="box-body">
        @(Html.Kendo().Grid<ERPMVC.Models.HoursWorkedDetail>()
                        .Name("gridHWD")
                        .Columns(columns =>
                        {
                            columns.Command(command =>
                            {
                                //if (Model.editar == 1)
                                //{
                                command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                //}
                                //command.Custom("Ver detalles").Click("Detalles");
                                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditHoursWorkedDetail()");
                                //command.Destroy().Text("Eliminar");

                            }).Width(150).Title("Acciones");
                            columns.Bound(p => p.IdDetallehorastrabajadas).Width(80).Title("Id");
                            columns.Bound(p => p.Horaentrada).Format("{0:dd/MM/yyyy hh-mm-ss}").Title("Entrada").Width(150);
                            columns.Bound(p => p.Horasalida).Format("{0:dd/MM/yyyy hh-mm-ss}").Title("Salida").Width(150);
                            columns.Bound(p => p.Multiplicahoras).Title("Multiplicar por").Width(150);
                        })
                            .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                       .DoesNotContain("No contiene")
                                                       .EndsWith("Termina con")
                                                       .IsEqualTo("Es igual a")
                                                       .IsNotEqualTo("No es igual a")
                                                       .IsNull("Es nulo")
                                                       .StartsWith("Inicia con")
                                                 )
                                                 .ForNumber(n => n
                                                   .Clear()
                                                   .IsEqualTo("Es igual a")
                                                   .IsGreaterThan("Es mayor que")
                                                   .IsLessThan("Es menor que")
                                                   .IsNull("Es nulo")
                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 )
                                                 .ForDate(d => d
                                                 .Clear()
                                                 .IsEqualTo("Es igual que")
                                                 .IsGreaterThan("Es mayor que")
                                                 .IsLessThan("Es menor que")
                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 .IsNotEqualTo("No es igual que")
                                                  )
                                               ))

                        .ToolBar(tools =>
                        {

                            //tools.Create();
                            //if (Model.editar == 1)
                            //{
                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                  .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddHoursWorkedDetail()" });
                            //}
                            //tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                            //tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                        })
                        .Editable(e => e.Mode(GridEditMode.PopUp))
                        .Sortable()
                        .Pageable()
                        .Filterable()
                        .Scrollable()
                        .Pdf(pdf => pdf.FileName("HoursWorkedReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("CAIReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                        .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.IdDetallehorastrabajadas);
                            model.Field(p => p.IdDetallehorastrabajadas).Editable(false);
                            model.Field(p => p.IdHorasTrabajadas).Editable(false);

                        })
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("GetHoursWorkedDetailByIdHorasTrabajadas", "HoursWorkedDetail").Data("GetIdHorasTrabajadas()"))
                            //.Create(create => create.Action("Insert", "HoursWorkedDetail").Type(HttpVerbs.Post))
                            //.Update(update => update.Action("Update", "HoursWorkedDetail").Type(HttpVerbs.Post))
                            //.Destroy(destroy => destroy.Action("Delete", "HoursWorkedDetail").Type(HttpVerbs.Delete))
                            )
                     )
    </div>
</div>
