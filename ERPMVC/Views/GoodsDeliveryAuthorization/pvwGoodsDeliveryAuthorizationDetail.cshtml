@model ERPMVC.DTO.GoodsDeliveryAuthorizationDTO
@using System.Security.Claims

@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosDeliveryAuthorization"];
}
<script>

    function RefreshGoodsDeliveredDetail() {
      //  console.log('Refresca Entrada de mercaderias');
        var grid = $("#gridGoodsDeliveredAuthorizationLine").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }


    function AddGoodsDeliveredDetalle() {
        var notification = $("#notification").data("kendoNotification");

        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'
            && $("#CustomerId").val() !== '0' && $("#CustomerId").val() !== ''  ) {
           // $("#frmGoodsDeliveryAuthorizationLine :input").not('#GoodsReceiveLinedId').prop("disabled", false);


            $('#myModalGoodsDeliveryAuthorizationLine').modal('show');
        } else {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Validacion",
                message: "Debe seleccionar un producto y un cliente!"
            }, "error");

        }

    }

    function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "GoodsDeliveredLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridGoodsDeliveredAuthorizationLine").data("kendoGrid");
            grid.dataSource.remove(dataItem);
        }
    }

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveredAuthorizationLine").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveredAuthorizationLine").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.GoodsDeliveryAuthorizationLineDTO>()
                                                                  .Name("gridGoodsDeliveredAuthorizationLine")
                                                                  .Events(e =>
    e.CellClose("calculateField")

    )
                                                                  .Columns(columns =>
                                                                  {
                                                                      if (Model.editar == 1)
                                                                      {
                                                                          columns.Command(command =>
                                                                          {


                                                                              command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");


                                                                          }).Title("Acciones").Width(100);
                                                                      }
                                                                      columns.Bound(p => p.GoodsDeliveryAuthorizationLineId).Title("Id Línea").Width(100).Visible(false);
                                                                      columns.Bound(p => p.GoodsDeliveryAuthorizationId).Title("Entrega de Mercaderia").Width(195).Visible(false);
                                                                      columns.Bound(p => p.CertificadoLineId).Title("Entrega de Mercaderia").Width(195).Visible(false);
                                                                      //columns.Bound(p => p.pda).Title("CD No").Width(120);
                                                                      columns.Bound(p => p.NoCertificadoDeposito).Title("CD No").Width(120);
                                                                      columns.Bound(p => p.Pda).Title("Pda").Width(100).Visible(true);
                                                                      columns.Bound(p => p.SubProductName).Width(250).Title("Producto");
                                                                      columns.Bound(p => p.WarehouseName).Title("Bodega").Width(120).Visible(false);
                                                                      columns.Bound(p => p.ValorImpuestos).Visible(false).Width(0);
                                                                      columns.Bound(p => p.ValorImpuestosOriginal).Visible(false).Width(0);
                                                                      columns.Bound(p => p.QuantityOriginal).Visible(false).Width(0);
                                                                      columns.Bound(p => p.UnitOfMeasureName).Title("Unidad de medida").Width(170);
                                                                      columns.Bound(p => p.SaldoProducto).Title("Saldo CD").Width(170).Format("{0:2}")
                                                                                .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(11,0)#</div>")
                                                                                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                                 ;
                                                                      columns.Bound(p => p.Quantity).Title("Cant. Autorizada Retiro").Width(170).Format("{0:2}")
                                                                                    .ClientFooterTemplate("<div style='text-align: right'><span class='totalaut'>#=totalColumnas(12,0)#</span></div>")
                                                                                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                                 ;
                                                                      columns.Bound(p => p.Price).Title("Precio Unitario").Width(170).Format("{0:N2}").ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(13,0)#</div>")
                                                                                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                                 ; ;
                                                                      columns.Bound(p => p.valorcertificado).Title("Valor Retiro").Width(170).Format("{0:N2}").ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(14,0)#</div>")
                                                                                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                                 ; ;
                                                                      columns.Bound(p => p.ValorUnitarioDerechos).Title("Valor Unitario derechos").Format("{0:N2}").Width(170).ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(15,0)#</div>")
                                                                                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                                 ; ;
                                                                      columns.Bound(p => p.DerechosFiscales).Title("Total Derechos").Width(170).Format("{0:N2}").ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(16,0)#</div>")
                                                                                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                                 ; ;
                                                                  })
                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                               .Clear()
                                                               .Contains("Contiene")
                                                                       .DoesNotContain("No contiene")
                                                                       .EndsWith("Termina con")
                                                                       .IsEqualTo("Es igual a")
                                                                       .IsNotEqualTo("No es igual a")
                                                                       .IsNull("Es nulo")
                                                                       .StartsWith("Inicia con")


                                                                 )
                                                                 .ForNumber(n => n
                                                                   .Clear()
                                                                   .IsEqualTo("Es igual a")
                                                                   .IsGreaterThan("Es mayor que")
                                                                   .IsLessThan("Es menor que")
                                                                   .IsNull("Es nulo")
                                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 )
                                                                 .ForDate(d => d
                                                                 .Clear()
                                                                 .IsEqualTo("Es igual que")
                                                                 .IsGreaterThan("Es mayor que")
                                                                 .IsLessThan("Es menor que")
                                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 .IsNotEqualTo("No es igual que")
                                                                  )
                                                               ))
                                                                  .ToolBar(tools =>
                                                                  {
                                                                      if (Model.editar == 1)
                                                                      {
                                                                          if (permisos.HasClaim("Inventarios.Autorizacion.Agregar Autorizacion Detalle", "true"))
                                                                          {
                                                                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsDeliveredDetalle();" });
                                                                          }
                                                                      }
                                                                  })
                                                                   .Editable(e => e.Mode(GridEditMode.InCell))
                                                                    .Sortable()
                                                                    .AutoBind(true)
                                                                    //.Pageable()
                                                                    .Filterable()
                                                                    .Scrollable()
                                                                    .DataSource(dataSource =>

                                                                   dataSource
                                                                   //.Ajax()
                                                                   .WebApi()

                                                                    .ServerOperation(true)
                                                                    .Model(model =>
                                                                    {
                                                                        model.Id(p => p.GoodsDeliveryAuthorizationLineId);
                                                                        model.Field(p => p.GoodsDeliveryAuthorizationLineId).Editable(false);
                                                                        model.Field(p => p.GoodsDeliveryAuthorizationId).Editable(false);
                                                                        model.Field(p => p.UnitOfMeasureName).Editable(false);
                                                                        model.Field(p => p.SubProductName).Editable(false);
                                                                        model.Field(p => p.Price).Editable(false);
                                                                        model.Field(p => p.valorcertificado).Editable(false);
                                                                        model.Field(p => p.Quantity).Editable(Model.GoodsDeliveryAuthorizationId==0);
                                                                        model.Field(p => p.DerechosFiscales).Editable(false);
                                                                        model.Field(p => p.ValorUnitarioDerechos).Editable(false);
                                                                        model.Field(p => p.SaldoProducto).Editable(false);
                                                                        // model.Field(p => p.ControlPalletsId).Editable(true);

                                                                    })
                                                                    .Events(events =>
                                                                    {
                                                                        // events.Sync("CalcularTotalDocumento");
                                                                        events.Error("error_handler");
                                                                        //events.upda("EditHandler");

                                                                    })
                                                                    .Read(read => read.Action("GetARLine", "GoodsDeliveryAuthorizationLine").Data("GetCertificados"))
                                                                    //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                                    //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                                    .Destroy(destroy => destroy.Action("Delete", "GoodsDeliveryAuthorizationLine").Type(HttpVerbs.Post))
                                                              )
        )

    </div>
</div>


<script>



    formattear = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'LPS',
        minimumFractionDigits: 2
    });

    function calculateField(e) {
        debugger;
        if (e.container) {
            if (e.model.Quantity > e.model.SaldoProducto) {
                $.toast({
                    heading: 'Error',
                    text: 'La cantidad a Autorizar no puede ser mayor al Disponible',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                e.model.Quantity = e.model.SaldoProducto;
            }
            //Actualizar Saldo
            var footer = $('tr.k-footer-template'),
                idx = 11, // replace 3 with the column index you want to aggregate
                aggregate = $(footer).children('td')[idx];
            $(aggregate).text(totalColumnas(12, 0));


        }

    }


    function totalColumnas(tiporesultado, moneda) {
        var data = $("#gridGoodsDeliveredAuthorizationLine").getKendoGrid().dataSource.data();
        var total = 0;

        switch (tiporesultado) {
            case 11: ///////Calcular el Total FOB
                data.forEach(r => total += r.SaldoProducto);
                break;
            case 12: /// Calcular el total CIB
                data.forEach(r => total += r.Quantity);
                break;
            case 13: ////Calcular el total CIF LPS
                data.forEach(r => total += r.Price);
                break;
            case 14://///Calcular el total de Valor de derechos importacion
                data.forEach(r => total += r.valorcertificado);
                break;
            case 15:
                data.forEach(r => total += r.ValorUnitarioDerechos);
                break;
            case 16:
                data.forEach(r => total += r.DerechosFiscales);
                break;

            default:
                break;
        }
        var formatter = new Intl.NumberFormat('es-HN', {
            style: 'currency',
            currency: 'LPS',
            minimumFractionDigits: 2
        });
        if (moneda == 1) {
            return formatter.format(total);
        }
        if (moneda == 2) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2
            });
            return formatter.format(total);
        }
        if (moneda == 0) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'LPS',
                minimumFractionDigits: 2
            });
            return formatter.format(total).replace(/[a-z]{3}/i, "").trim();
        }
        return total;
    }



</script>