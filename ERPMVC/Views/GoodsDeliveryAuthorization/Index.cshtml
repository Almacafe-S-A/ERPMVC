@using Microsoft.AspNetCore.Http;
@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Autorización de Retiro de Mercadería";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}



<link href="~/admp/assets/plugins/wizard/steps.css" rel="stylesheet">
<script src="~/admp/assets/plugins/wizard/jquery.steps.min.js"></script>
<script src="~/admp/assets/plugins/wizard/jquery.validate.min.js"></script>


<script>

      $(document).ready(function () {
          clearsessiondeliveryautor();
    });


    function clearsessiondeliveryautor() {
           var dataObject = ["listadoproductosGoodsDeliveryAuthorization"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                // alert(textStatus + ": " + XMLHttpRequest.responseText);
                 MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
         });
    }


    function AddImage(e) {
        e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                GoodsDeliveryAuthorizationId: dataItem.GoodsDeliveryAuthorizationId,
            };
            $.ajax({
                url: '@Url.Action("pvwAddImage", "GoodsDeliveryAuthorization")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#AddImage").html('');
                    $("#AddImage").html(result);
                    $('#myModalCustomerDocumentUpload').modal('show');

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //alert(textStatus + ": " + XMLHttpRequest.responseText);
                    MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
        });

    }

    function AddGoodsDeliveryAuthorization() {


         var dataObject = {
             GoodsDeliveryAuthorizationId: 0,
             editar : 1
        };

        clearsessiondeliveryautor();

        $.ajax({
            url: '@Url.Action("pvwGoodsDeliveryAuthorization", "GoodsDeliveryAuthorization")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#GoodsDeliveryAuthorization").html('');
                $("#GoodsDeliveryAuthorization").html(result);

                //RefreshCotizacionesDetail();
                 //$("#btnSaveCotizacion").show();
                $('#myModalGoodsDeliveryAuthorization').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                 MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });


    }

    function EditGoodsDeliveryAuthorization(e) {
         e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            GoodsDeliveryAuthorizationId: dataItem.GoodsDeliveryAuthorizationId,
            editar : 0
        };

        clearsessiondeliveryautor();

        $.ajax({
            url: '@Url.Action("pvwGoodsDeliveryAuthorization", "GoodsDeliveryAuthorization")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#GoodsDeliveryAuthorization").html('');
                $("#GoodsDeliveryAuthorization").html(result);
                //var customer = $("#CustomerId").val();
                //$("#CustomerId").val(0);
                //$("#CustomerId").data("kendoDropDownList").select(customer);
                //$("#CustomerId").data("kendoDropDownList").value(customer);

                //hcustom = customer;
                $('#myModalGoodsDeliveryAuthorization').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                 MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });
    }

    function onChange(CustomerId) {
        $("#CustomerId").val(CustomerId);
    }

    @*function ImprimirGoodsDeliveryAuthorization(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //Var url = '@Url.Action("SFGoodsDeliveryAuthorization", "GoodsDeliveryAuthorization")/' + dataItem.GoodsDeliveryAuthorizationId;
         var url = './SFGoodsDeliveryAuthorization/' + dataItem.GoodsDeliveryAuthorizationId;
         var win = window.open(url, '_blank');
         win.focus();
    }*@


     function ImprimirGoodsDeliveryAuthorization(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = './SFAutorizacionRetiro/' + dataItem.GoodsDeliveryAuthorizationId;
           var win = window.open(url, '_blank');
           win.focus();
        }

    

    function ImprimirKardex(e) {
        e.preventDefault();
        debugger;
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("SFKardexAR", "GoodsDeliveryAuthorization")/' + dataItem.GoodsDeliveryAuthorizationId;
        var win = window.open(url, '_blank');
        win.focus();

    }

    function closecondition() {
        $('#myModalConditions').modal('hide');
    }

    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (this.Estado != "Revisado" ) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();
                
            }
            if (this.Estado != "Aprobado"){
                $('[data-uid=' + this.uid + ']').find('.k-grid-Imprimir').hide();
            }
            if (this.Estado != "Revisión"){
                $('[data-uid=' + this.uid + ']').find('.k-grid-Revisar').hide();
            }
        })
    }

    function Aprobar(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.Estado == 6) {
                    notification.show({
                    title: "Validación",
                    message: "la Autorizacion ha sido aprobada"
                }, "error");
            }
        if (!confirm('Esta seguro de aprobar Autorizacion?')) {
            return;

        }

        var dataObject = {
                GoodsDeliveryAuthorizationId: dataItem.GoodsDeliveryAuthorizationId,
            };

            $.ajax({
                url: '@Url.Action("Aprobar", "GoodsDeliveryAuthorization")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'La Autorizacion se ha aprobado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                    RefreshGoodsDelivered();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }




            function Revisar(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.Estado == 6) {
                    notification.show({
                    title: "Validación",
                    message: "la Autorizacion ha sido aprobada"
                }, "error");
            }
        if (!confirm('Esta seguro de marcar como revisada esta Autorizacion?')) {
            return;

        }

        var dataObject = {
                GoodsDeliveryAuthorizationId: dataItem.GoodsDeliveryAuthorizationId,
            };

            $.ajax({
                url: '@Url.Action("Revisar", "GoodsDeliveryAuthorization")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'La Autorizacion se ha aprobado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                    RefreshGoodsDelivered();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }


</script>

<div id="AddImage">
    @await Html.PartialAsync("pvwAddImage", new ERPMVC.Models.GoodsDeliveryAuthorization { GoodsDeliveryAuthorizationId = 0 })
</div>


<h3 class="text-themecolor">Autorización de Retiro de Mercadería</h3>

@(Html.Kendo().Grid<ERPMVC.Models.GoodsDeliveryAuthorization>()
            .Name("gridGoodsDeliveryAuthorization")
            .Columns(columns =>
            {
                if (permisos.HasClaim("Inventarios.Autorizacion.Editar", "true")
                || permisos.HasClaim("Inventarios.Autorizacion.Imprimir", "true"))
                {
                    columns.Command(command =>
                    {
                        if (permisos.HasClaim("Inventarios.Autorizacion.Imprimir", "true"))
                        {
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditGoodsDeliveryAuthorization");
                        }
                        if (permisos.HasClaim("Inventarios.Autorizacion.Imprimir", "true"))
                        {
                            command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirGoodsDeliveryAuthorization");
                            command.Custom("ImprimirKardex").Text(" ").IconClass("fa fa-print").Click("ImprimirKardex");
                        }

                        if (User.HasClaim("Inventarios.Autorizacion.Aprobar", "true"))
                                                  {
                                                      command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("Aprobar");
                                                  }

                        if (User.HasClaim("Inventarios.Autorizacion.Revisar", "true"))
                                                  {
                                                      command.Custom("Revisar").Text(" ").IconClass("fa fa-check").Click("Revisar");
                                                  }

                        command.Custom("AddImage").Text(" ").IconClass("fa fa-file").Click("AddImage");
                    }).Width(180).Title("Acciones");
                }
                columns.Bound(p => p.GoodsDeliveryAuthorizationId).Title("No").Width(100);
                columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").ClientTemplate("#=kendo.toString(DocumentDate,'dd/MM/yyyy')#").Title("Fecha").Width(150);
                columns.Bound(p => p.CustomerName).Title("Cliente").Width(250);
                columns.Bound(p => p.BankName).Title("Banco").Width(250);
                columns.Bound(p => p.ProductId).Title("Producto").Width(150).Visible(false);
                columns.Bound(p => p.ProductoAutorizado).Title("Producto").Width(150);
                columns.Bound(p => p.TotalCantidad).Title("Cantidad").Width(150).Format("{0:N2}")
                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
                columns.Bound(p => p.TotalAutorizado).Title("Valor Retiro").Width(150).Format("{0:N2}")
                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
                columns.Bound(p => p.ProductName).Title("Servicio").Width(150);
                columns.Bound(p => p.Certificados).Title("Certificados").Width(150);
                columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                columns.Bound(p => p.Estado).Title("Estado").Width(150);
            })
            .Filterable(f => f.Operators(o => o.ForString(s => s
                    .Clear()
                    .Contains("Contiene")
                    .DoesNotContain("No contiene")
                    .EndsWith("Termina con")
                    .IsEqualTo("Es igual a")
                    .IsNotEqualTo("No es igual a")
                    .IsNull("Es nulo")
                    .StartsWith("Inicia con")


                )
                .ForNumber(n => n
                .Clear()
                .IsEqualTo("Es igual a")
                .IsGreaterThan("Es mayor que")
                .IsLessThan("Es menor que")
                .IsNull("Es nulo")
                .IsLessThanOrEqualTo("Es menor o igual que")
                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                )
                .ForDate(d => d
                .Clear()
                .IsEqualTo("Es igual que")
                .IsGreaterThan("Es mayor que")
                .IsLessThan("Es menor que")
                .IsLessThanOrEqualTo("Es menor o igual que")
                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                .IsNotEqualTo("No es igual que")
                )
            ))

            .ToolBar(tools =>
            {
                //tools.Create();
                if (permisos.HasClaim("Inventarios.Autorizacion.Agregar", "true"))
                {
                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsDeliveryAuthorization();" });
                }
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .AutoBind(true)
            .Pageable(p => p.Refresh(true))
            .Filterable()
            .Scrollable()
            // .ClientDetailTemplateId("template")
            .Pdf(pdf => pdf.FileName("GoodsDeliveryAuthorizationReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("GoodsDeliveryAuthorizationReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            //.Events(e=>e.Save("onsave"))
            .DataSource(dataSource =>

            dataSource
            //.Ajax()
            .WebApi()
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.GoodsDeliveryAuthorizationId);
                model.Field(p => p.GoodsDeliveryAuthorizationId).Editable(true);
                model.Field(p => p.CustomerId).Editable(true);


            })
            .Events(events =>
            {
                events.Error("error_handler");
                //events.upda("EditHandler");

            })
            .Read(read => read.Action("Get", "GoodsDeliveryAuthorization"))
            .Create(create => create.Action("Insert", "GoodsDeliveryAuthorization"))
            .Update(update => update.Action("Update", "GoodsDeliveryAuthorization", new { id = "{0}" }))
            .Destroy(destroy => destroy.Action("Delete", "GoodsDeliveryAuthorization", new { id = "{0}" }))
        ).Events(e => e.DataBound("dataBound"))
)

<div id="GoodsDeliveryAuthorization">
    @await Html.PartialAsync("pvwGoodsDeliveryAuthorization", new ERPMVC.DTO.GoodsDeliveryAuthorizationDTO { GoodsDeliveryAuthorizationId = 0, DocumentDate = DateTime.Now, AuthorizationDate = DateTime.Now, BranchId = Convert.ToInt64(Context.Session.GetString("BranchId")) })
</div>




<div id="ConditionView">
</div>

<div id="CustomerConditionView">
</div>

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveryAuthorization").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveryAuthorization").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }


    function RefreshGoodsDelivered() {
      //  console.log('Refresca Entrada de mercaderias');
        var grid = $("#gridGoodsDeliveryAuthorization").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }

    
    setToolbarTooltip(".k-grid-ImprimirKardex", "Imprimir Kardex");
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-Editar", "Ver");
    setRowButtonTooltip(".k-grid-Aprobar", "Aprobar");
    setRowButtonTooltip(".k-grid-Revisar", "Revisar");

    setRowButtonTooltip(".k-grid-AddImage", "Documentos  Adjuntos");

</script>
