


<script>


   async function resolveAfter2Seconds() {
        return new Promise(resolve => {
            setTimeout(() => {
                RefreshGoodsDeliveredDetail();
            }, 3000);
        });
    }

    var id = -999999;
    async function AsociarCertificados() {

        clearsessiondeliveryautor();

        $("#CustomerId").data("kendoDropDownList").value($("#CustomerIdAsociarRecibo").val());
        $("#CustomerName").val($("#CustomerIdAsociarRecibo").data("kendoDropDownList").text());
        var notification = $("#notification").data("kendoNotification");

        var grid = $("#gridGoodsDeliveredAuthorizationLine").data("kendoGrid");
        var datasource = grid.dataSource;

        var raw = datasource._data;
        for (i = datasource._data.length - 1; i >= 0; i--) {
            item = raw[i];
            datasource.remove(item);
        }

        datasource.async = false;
        //var agregados = '';
        var list = [];
        $("#ddlRecibosAsociados > option").each(function () {
            list.push(this.value);
            //alert(this.text + ' ' + this.value);
            //agregados += this.value + ',';
        });


        var data;
        // agregados = agregados.substring(0, agregados.length - 1);
        //console.log(agregados);
        //enviar
        var dataObject = { 'CertificadosSeleccionados': list };
        $.ajax({
            url: '@Url.Action("AgruparCertificados", "CertificadoDeposito")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: '<br/><br/>Datos enviados correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });

                data = result;

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });

        //  console.log(data);
        var n = 0;
        for (j = 0; j < data.length; j++) {

            //debugger;
            hcustom = data[j].CustomerId;
            $("#FechaCertificado").val(data[j].FechaCertificado);
            $("#FechaDeVencimiento").val(data[j].FechaVencimiento);
            $("#ProductId").data("kendoDropDownList").value(data[j].ServicioId);
            $("#WarehouseId").data("kendoDropDownList").value(data[j].WarehouseId);
            $("#BranchId").data("kendoDropDownList").value(data[j].BranchId);
            $("#CurrencyId").data("kendoDropDownList").value(data[j].CurrencyId);
            $("#BankId").data("kendoDropDownList").value(data[j].BankId);
            // $("#idrecibo").text(data.NoCD);
            // $("#ServicioName").text(data.ServicioName);
            // $("#WarehouseName").text(data.WarehouseName);
            // console.log(data);
            var sumacantidad = 0, total = 0;
            if (data[j]._CertificadoLine.length <= 8) {


                // debugger;
                for (i = 0; i < data[j]._CertificadoLine.length; i++) {
                    console.log('Certificado Line ' + i + 'de ' + j);

                    //var multi = $("#ProductosCD").getKendoMultiSelect(),
                      //  multiDataItems = multi.dataItems();


                    var gridCertificadoProducto = $("#gridCertificadoProducto").data("kendoGrid");
                    var datasourcegridCertificadoProducto = gridCertificadoProducto.dataSource;
                    var rawdatasourcegridCertificadoProducto = datasourcegridCertificadoProducto._data;
                    for (var k = 0; k < datasourcegridCertificadoProducto._data.length; k += 1) {
                        var currentProduct = rawdatasourcegridCertificadoProducto[k];
                         
                          console.log(currentProduct);

                    //selectedProducts = [];

                    //for (var k = 0; k < multiDataItems.length; k += 1) {
                    //    var currentProduct = multiDataItems[k];


                        var dataObject = {
                            GoodsDeliveryAuthorizationLineId: n + 1
                            , GoodsDeliveryAuthorizationId: 0
                            , IdCD: data[j]._CertificadoLine[i].IdCD
                            , NoCertificadoDeposito: data[j].NoCD
                            , UnitOfMeasureId: data[j]._CertificadoLine[i].UnitMeasureId
                            , UnitOfMeasureName: data[j]._CertificadoLine[i].UnitMeasurName
                            , ValorImpuestos: data[j]._CertificadoLine[i].ValorImpuestos
                            , WarehouseId: data[j].WarehouseId
                            , WarehouseName: data[j].WarehouseName
                            , SubProductId: data[j]._CertificadoLine[i].SubProductId
                            , SubProductName: data[j]._CertificadoLine[i].SubProductName
                            , Quantity: data[j]._CertificadoLine[i].Quantity
                            , Price: data[j]._CertificadoLine[i].Price
                            , valorcertificado: data[j].Total
                        };


                        if (currentProduct.ProductId == data[j]._CertificadoLine[i].SubProductId && currentProduct.IdCD == data[j]._CertificadoLine[i].IdCD) {
                            datasource.insert(
                                dataObject
                            );


                           // if (currentProduct.IdCD == data[j]._CertificadoLine[i].IdCD) {
                             //   datasourcegridCertificadoProducto.remove(currentProduct);
                           // }
                             

                            $.ajax({
                                url: '@Url.Action("SetLinesInSession", "GoodsDeliveryAuthorizationLine")',
                                method: 'POST',
                                datatype: "json",
                                contentType: 'application/json',
                                async: false,
                                data: JSON.stringify(dataObject),
                                success: function (result) {
                                    // console.log(data);
                                    // data = result;

                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                                }
                            });


                            //$("#GoodsDeliveryAuthorizationLineId").val(n + 1);
                            //$("#NoCertificadoDeposito").data("kendoNumericTextBox").value(data[j].NoCD);
                            //$("#Quantity").data("kendoNumericTextBox").value(data[j]._CertificadoLine[i].Quantity);
                            //$("#Description").val('');
                            //$("#valorcertificado").data("kendoNumericTextBox").value(data[j].Total);
                            ////$("#valorfinanciado").data("kendoNumericTextBox").value(data[j].Total);
                            //$("#SubProductId").data("kendoDropDownList").value(data[j]._CertificadoLine[i].SubProductId);
                            //$("#UnitOfMeasureId").data("kendoDropDownList").value(data[j]._CertificadoLine[i].UnitMeasureId);
                            //$("#WarehouseId").data("kendoDropDownList").value(data[j].WarehouseId);
                            //$("#Price").val(data[j]._CertificadoLine[i].Price);
                            //$("#ValorImpuestos").data("kendoNumericTextBox").value(data[j]._CertificadoLine[i].ValorImpuestos);

                            // debugger;
                            $('#allescondidos').append(' <input type="hidden" id="ValorImpuestosOriginal' + (n + 1) + '" value="' + data[j]._CertificadoLine[i].ValorImpuestos + '" />');
                            $('#allescondidos').append(' <input type="hidden" id="QuantityOriginal' + (n + 1) + '" value="' + data[j]._CertificadoLine[i].Quantity + '" />');


                            // debugger;

                            //  RefreshGoodsDeliveredDetail();
                            //var result = await resolveAfter2Seconds();
                            //console.log('Resultado despues de x segundos');
                            // console.log(result);
                            // datasource.read();
                            n++;
                        }

                    }

                    //  datasource.refresh();
                    //sumacantidad += data._CertificadoLine[i].Quantity;
                    //total += (data._CertificadoLine[i].Price * data._CertificadoLine[i].Quantity) ;
                }



                fiscal();

                CalcularTotalDocumento();

                // $("#Quantitysum").data("kendoNumericTextBox").value(sumacantidad);
                //$("#Total").data("kendoNumericTextBox").value(total);

            }
            else {
                notification.show({
                    title: "Validación",
                    message: "No pueden existir mas de 8 productos!"
                }, "error");
            }
        }


    }

</script>

<!-- Validation wizard -->
<div class="row" id="validation">
    <div class="col-12">
        <div class="card wizard-content">
            <div class="card-body">
                <h4 class="card-title">Asociar certificados de depósito a Autorización</h4>
                <h6 class="card-subtitle">Solo seleccionar 8 productos</h6>
                <form action="#" class="validation-wizard wizard-circle"
                      data-ajax="true"
                      data-ajax-begin="AsociarCertificados">
                    <div class="alert alert-danger" style="display:none" id="alertamsj"></div>
                    <!-- Step 1 -->
                    <h6>Seleccione el Cliente</h6>
                    <section>

                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <script>

                                        function GetSubProductcustomer(e) {
                                       
                                            hcustom = $("#CustomerIdAsociarRecibo").val();
                                            $("#SubProductId").data("kendoDropDownList").dataSource.read();
                                        }

                                        function setToolbarTooltip(btn_cl, btn_tooltip) {
                                            $("#gridCertificadoProducto").kendoTooltip({
                                                filter: btn_cl,
                                                content: btn_tooltip
                                            });
                                        }



                                        function setRowButtonTooltip(btn_cl, btn_tooltip) {
                                            $("#gridCertificadoProducto").kendoTooltip({
                                                filter: btn_cl,
                                                content: btn_tooltip
                                            });
                                        }



                                       
                                        setRowButtonTooltip(".k-grid-delete", "Eliminar");

                                    </script>


                                    <label class="control-label"></label>

                                    <kendo-dropdownlist name="CustomerIdAsociarRecibo" filter="Kendo.Mvc.UI.FilterType.Contains"
                                                        option-label="Seleccione Cliente"
                                                        required
                                                        datatextfield="CustomerName"
                                                        datavaluefield="CustomerId"
                                                        class="required"
                                                        onchange="GetSubProductcustomer();"
                                                        style="width: 100%;">
                                        <datasource type="DataSourceTagHelperType.WebApi" page-size="999999999">
                                            <transport>
                                                <read url="@Url.Action("GetCustomer", "Common")" />
                                            </transport>
                                        </datasource>
                                    </kendo-dropdownlist>

                                </div>
                            </div>
                        </div>


                    </section>
                    <!-- Step 2 -->
                    <h6>Seleccione los certificados de deposito</h6>
                    <section>
                        
                        <div class="row">
                            <div class="col-md-8">
                                <div class="form-group">
                                    @*<label for="cbxBuscarCertificadosDeposito" class="control-label" style="width:100%">Asociar control de estiba</label>*@

                                    <script>
                                        function valueMapper(options) {
                                          //  console.log('llega value mapper');
                                              $.ajax({
                                                  url: "@Url.Action("Orders_ValueMapper", "CertificadoDeposito")",
                                                  data: convertValues(options.value),
                                                  //data: { 'CustomerId': $("#CustomerIdAsociarRecibo").val() , 'values': convertValues(options.value) },
                                                  success: function (data) {
                                                      options.success(data);
                                                  }
                                              });
                                          }

                                          function convertValues(value) {
                                              var data = {};
                                              value = $.isArray(value) ? value : [value];

                                              for (var idx = 0; idx < value.length; idx++) {
                                                  data["values[" + idx + "]"] = value[idx];
                                              }

                                              return data;
                                        }

                                          function changesetearvalues() {
                                             // var dataObject = { 'Id': $("#cbxBuscarCertificadosDeposito").val() };
                                             // console.log('changesetearvalues');


                                              if ($("#cbxBuscarCertificadosDeposito").val() > 0) {
                                                  $("#ProductosCD").data("kendoMultiSelect").dataSource.read();
                                                  $("#optional").data("kendoListBox").dataSource.read();
                                                  LlenarRecibo();
                                              }
                                          }

                                        function AddRecibos() {
                                            debugger;
                                            if ($("#cbxBuscarCertificadosDeposito").val() !== '')
                                            {
                                                var existe = false;
                                                $("#alertamsj").css('display', 'none');
                                                $("#ddlRecibosAsociados > option").each(function () {
                                                    if ($("#cbxBuscarCertificadosDeposito").val() === this.value) {
                                                        existe = true;
                                                    }
                                                });
                                                var productoscd = $("#ProductosCD").val();

                                                console.log(productoscd);
                                                if (productoscd == null) {
                                                    $("#alertamsj").css('display', 'block');
                                                    $("#alertamsj").text('Seleccione los productos que va a autorizar!!');
                                                    return;
                                                }

                                                if (existe === false) {
                                                    $('#ddlRecibosAsociados').append('<option value="' + $("#cbxBuscarCertificadosDeposito").val() + '">' + '' + $("#cbxBuscarCertificadosDeposito").data("kendoDropDownList").text() + '</option>');
                                                    var grid = $("#gridCertificadoProducto").data("kendoGrid");
                                                    var datasource = grid.dataSource;
                                                    //var raw = datasource._data;
                                                    //for (i = datasource._data.length - 1; i >= 0; i--) {
                                                    //    item = raw[i];
                                                    //    datasource.remove(item);
                                                    //}

                                                   
                                                    if (productoscd != null) {
                                                      //  var prodsplit = productoscd.split(',');
                                                        //console.log(productoscd);
                                                        for (var i = 0; i < productoscd.length; i++) {
                                                            console.log(productoscd.length);
                                                            console.log(productoscd[i]);
                                                            if (Number($("#cbxBuscarCertificadosDeposito").val()) > 0) {
                                                                datasource.insert({
                                                                    'IdCD': $("#cbxBuscarCertificadosDeposito").val(),
                                                                    'ProductId': productoscd[i]
                                                                });
                                                            }
                                                        }
                                                    }

                                                    //for (i = 0; i < data._CertificadoLine.length; i++) {
                                                    //    datasource.insert({
                                                    //        GoodsDeliveryAuthorizationLineId: 0, GoodsDeliveryAuthorizationId: 0
                                                    //        , Quantity: data._CertificadoLine[i].Quantity, NoCertificadoDeposito: data._CertificadoLine[i].NoCD
                                                    //        , UnitOfMeasureName: data._CertificadoLine[i].UnitMeasurName, UnitOfMeasureId: data._CertificadoLine[i].UnitMeasureId
                                                    //        , SubProductId: data._CertificadoLine[i].SubProductId, SubProductName: data._CertificadoLine[i].SubProductName
                                                    //        , WareHouseId: data._CertificadoLine[i].WarehouseId
                                                    //        , WarehouseName: data._CertificadoLine[i].WarehouseName

                                                    //    });
                                                    //}
                                                    
                                                }
                                                else {
                                                    $("#alertamsj").css('display', 'block');
                                                    $("#alertamsj").text('Ya existe el certificado!');
                                                }
                                            }
                                            else
                                            {
                                                $("#alertamsj").css('display', 'block');
                                                $("#alertamsj").text('Debe seleccionar un recibo!');
                                            }
                                        }

                                        function GetCustomerIdP() {
                                            return { 'CustomerId': $("#CustomerIdAsociarRecibo").val() }
                                        }


                                    </script>





                                    @(Html.Kendo().DropDownList()
                                              .Name("cbxBuscarCertificadosDeposito")
                                              .Filter(Kendo.Mvc.UI.FilterType.Contains)
                                              .OptionLabel("Buscar")
                                              .DataTextField("CustomerName")
                                              .DataValueField("IdCD")
                                              .HtmlAttributes(new { style = "width:100%" })
                                              .Height(290)
                                              .CascadeFrom("CustomerIdAsociarRecibo")
                                              .Events(e =>
                                              {
                                                  e.Change("changesetearvalues");
                                                                      // e.Filtering("applyFilterCustomer");
                                               })
                                              .AutoBind(true)
                                              .DataSource(source =>
                                              {
                                                  source.Ajax()
                                                  .PageSize(80)

                                                  .Read(r =>
                                                  {
                                                      r.Action("Virtualization_Read", "CertificadoDeposito").Data("GetCustomerIdP");

                                                  });
                                              })

                                              .Virtual(v => v.ItemHeight(26).ValueMapper("valueMapper"))
                                    )
                                </div>
                               
                            </div>

                            <div class="col-md-4">
                                <input type="button" class="btn waves-effect waves-light btn-primary" onclick="AddRecibos();" value="Agregar Certificado" />
                                @*<button id="btnAgregarRecibo" onclick="AddRecibos();" style="width:100%;height:100%;" class="btn-google-plus">Agregar Recibo</button>*@

                            </div>

                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <script>
                                        function GetLinesById() {

                                            return {
                                                'IdCD': $("#cbxBuscarCertificadosDeposito").val(),
                                            }
                                        }
                                    </script>
                                    <label id="SubProducto" class="control-label" style="width:100%">Productos</label>

                                    <kendo-multiselect  name="ProductosCD" filter="Kendo.Mvc.UI.FilterType.Contains"
                                                       option-label="Seleccione el/los Producto(s)"
                                                       datatextfield="SubProductName"
                                                       datavaluefield="SubProductId"
                                                       required
                                                       placeholder="Seleccione el/los Producto(s)"
                                                       style="width: 100%;">
                                        <datasource type="DataSourceTagHelperType.WebApi" page-size="999999999">
                                            <transport>
                                                <read url="@Url.Action("GetCertificadoLineByIdCD", "CertificadoLine")" data="GetLinesById" />
                                            </transport>
                                        </datasource>
                                    </kendo-multiselect>
                                    @*<span asp-validation-for="CustomerAreaProduct" class="text-danger"></span>*@
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                @{
                                    var botones = new string[] {
                                "moveUp",
                                "moveDown",
                                "transferTo",
                                "transferFrom",
                                "transferAllTo",
                                "transferAllFrom"
                            };
                                }

                                <div id="example" role="application">
                                    <div class="demo-section k-content wide">
                                        <label for="optional" id="employees">Employees</label>
                                        <br />

                                        <kendo-listbox name="optional" connect-with="selected" datatextfield="SubProductName" 
                                                       datavaluefield="SubProductId">
                                            <toolbar position="ListBoxToolbarPosition.Right" tools='botones' />
                                            <datasource type="DataSourceTagHelperType.WebApi" page-size="999999999">
                                                <transport>
                                                    <read url="@Url.Action("GetCertificadoLineByIdCD", "CertificadoLine")" data="GetLinesById" />
                                                </transport>
                                            </datasource>
                                        </kendo-listbox>

                                        <kendo-listbox name="selected" selectable="ListBoxSelectable.Multiple" bind-to="new List<string>()" datatextfield="SubProductName"
                                                       datavaluefield="SubProductId">
                                        </kendo-listbox>
                                    </div>
                                </div>

                            </div>
                            

                        </div>

                        <div hidden>
                             @await Html.PartialAsync("pvwCertificadoDepositoRead")
                        </div>
                       

               
                        

                    </section>
                    <!-- Step 3 -->
                    <h6>Recibos Asociados</h6>
                    <section>
                        <div class="row">
                            <div class="col-md-6">

                                <div class="form-group">
                                    <label for="wintType1">Certificados Asociados :</label>
                                    <select class="custom-select form-control required" id="ddlRecibosAsociados" data-placeholder="Type to search cities" name="wintType1"></select>
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            @(Html.Kendo().Grid<ERPMVC.DTO.CertificadoProducto>()
                                                           .Name("gridCertificadoProducto")
                                                           .Columns(columns =>
                                                           {
                                                               columns.Command(command =>
                                                               {
                                                                   //command.Edit().Text("Editar");
                                                                   command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                                                               }).Width(100);
                                                               columns.Bound(p => p.IdCD).Width(140);
                                                               columns.Bound(p => p.ProductId).Width(140);

                                                           })
                                                               .Filterable(f => f.Operators(o => o.ForString(s => s
                                                         .Clear()
                                                                .Contains("Contiene")
                                                                .DoesNotContain("No contiene")
                                                                .EndsWith("Termina con")
                                                                .IsEqualTo("Es igual a")
                                                                .IsNotEqualTo("No es igual a")
                                                                .IsNull("Es nulo")
                                                                .StartsWith("Inicia con")


                                                          )
                                                          .ForNumber(n => n
                                                            .Clear()
                                                            .IsEqualTo("Es igual a")
                                                            .IsGreaterThan("Es mayor que")
                                                            .IsLessThan("Es menor que")
                                                            .IsNull("Es nulo")
                                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                          )
                                                          .ForDate(d => d
                                                          .Clear()
                                                          .IsEqualTo("Es igual que")
                                                          .IsGreaterThan("Es mayor que")
                                                          .IsLessThan("Es menor que")
                                                          .IsLessThanOrEqualTo("Es menor o igual que")
                                                          .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                          .IsNotEqualTo("No es igual que")
                                                           )
                                                        ))
                                                        .ToolBar(tools =>
                                                        {
                                                            //tools.Create();
                                                            //                 tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                            //.HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCustomerCondition();" });
                                                            //     tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                            //     tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                                        })
                                                           .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                                           .Sortable()
                                                           .Pageable()
                                                           .Filterable()
                                                           .Scrollable()
                                                           .Pdf(pdf => pdf.FileName("CertificadoProductoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                           .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                               .Excel(excel => excel.FileName("CertificadoProductoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                           .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                           //.Events(e => e.DataBound("dataBoundCustomerConditions"))
                                                           .DataSource(dataSource =>
                                                               dataSource
                                                               .WebApi()

                                                               .ServerOperation(true)
                                                               .Model(model =>
                                                               {
                                                                   model.Id(p => p.Id);
                                                                   model.Field(p => p.IdCD).Editable(false);
                                                                   model.Field(p => p.ProductId).Editable(true);


                                                               })
                                                               .Events(events => events.Error("error_handler"))
                                                           //  .Read(read => read.Action("Get", "GoodsDeliveryAuthorization").Type(HttpVerbs.Get))   //.Data("filterdatacc"))
                                                           // .Create(create => create.Action("Insert", "GoodsDeliveryAuthorization").Type(HttpVerbs.Post))
                                                           //.Update(update => update.Action("Update", "GoodsDeliveryAuthorization", new { id = "{0}" }))
                                                           // .Destroy(destroy => destroy.Action("Delete", "GoodsDeliveryAuthorization").Type(HttpVerbs.Post))

                                                           )
                                                           .Events(e =>
                                                           {
                                                               // e.Save("onsave");

                                                           })
                            )

                        </div>
                    </section>

                </form>
            </div>
        </div>
    </div>
</div>
<!-- vertical wizard -->

<br />