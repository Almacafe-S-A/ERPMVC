@model ERPMVC.DTO.ControlPalletsDTO
@using System.Security.Claims
@{    
        ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosControlPallets"];
}

<script>

    function validarduplicado() {
        debugger;
        var displayedData = $("#gridControlPalletsDetail").data().kendoGrid.dataSource.data();
        var pesado = $("#ProductoPesado").data("kendoSwitch").check();
        var producto = $("#SubProductIddet").val();
        var bodega = $("#WarehouseIddet").val();
        var uom = $("#UnitofMeasureIddet").val();
        for (var i = 0; i < displayedData.length; i++) {
            if (!pesado && displayedData[i].SubProductId == producto && displayedData[i].WarehouseId == bodega && displayedData[i].UnitofMeasureId == uom) {
                $.toast({
                    heading: 'Error',
                    text: 'No puede duplicar el producto en la misma Bodega',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 30000,
                    stack: 6
                });
                return true;

            } else return false;

        }

    }


    function GetControlPalletsId() {
        debugger;

        CambioOpciones();

        if ($("#Totallinea").val() > 0 || @Model.ControlPalletsId > 0 || $("#Cantidad").val() > 0 ) {
            var displayedData = $("#gridControlPalletsDetail").data().kendoGrid.dataSource.data();
            var pesado = $("#ProductoPesado").data("kendoSwitch").check();
            var id = -999999;
            var producto = $("#SubProductIddet").val() ;
            var bodega = $("#WarehouseIddet").val();
            var uom = $("#UnitofMeasureIddet").val();
            var controlpalletsid = $("#ControlPalletsLineId").val();
            for (var i = 0; i < displayedData.length; i++) {
                if (!pesado && displayedData[i].ControlPalletsLineId != controlpalletsid && displayedData[i].SubProductId == producto && displayedData[i].WarehouseId == bodega && displayedData[i].UnitofMeasureId == uom) {
                    $.toast({
                        heading: 'Error',
                        text: 'No puede duplicar el producto en la misma Bodega',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                    return true;

                }

            }

            // debugger;
            var controllineid = Number($("#ControlPalletsLineId").val());
            var control = @Model.ControlPalletsId;
            var nuevo = controllineid == 0;
            if (controllineid <= 0) {
                if (displayedData.length > 0) {
                    for (var i = 0; i < displayedData.length; i++) {
                        //console.log('Linea:' + displayedData[i].CertificadoLineId);
                        //console.log('Linea:' + id);
                        if (displayedData[i].ControlPalletsLineId > id)
                            id = displayedData[i].ControlPalletsLineId;


                    }

                    id = id + 1;
                }
                else if ($("#Ancho").val() > 0 || $("#Cantidad").val()>0) {
                    id = 1;
                }
            }
            else {
                id = $("#ControlPalletsLineId").val();
            }

            var total = 0;
            if (pesado) {
                total = $("#Totallinea").val();

            } else {
                total = $("#Cantidad").val();
            }
            id = nuevo && control > 0 ? 0 : id;


             return {
                 'ControlPalletsLineId': id,
                 'ControlPalletsId': @Model.ControlPalletsId,
                 'Alto': $("#Alto").val(),
                 'Ancho': $("#Ancho").val(),
                 'Otros': $("#Otros").val(),
                 'Estiba':$("#Estiba").val(),
                 'SubProductId': pesado ? $("#SubProductId").val() : $("#SubProductIddet").val(),
                 'SubProductName': producto == "" ? $("#SubProductId").data("kendoDropDownList").text() : $("#SubProductIddet").data("kendoDropDownList").text(),
                 'WarehouseId': pesado ? $("#WarehouseId").val() : $("#WarehouseIddet").val(),
                 'WarehouseName': bodega == "" ? $("#WarehouseId").data("kendoDropDownList").text() : $("#WarehouseIddet").data("kendoDropDownList").text(),
                 'UnitofMeasureId': pesado ? $("#UnitOfMeasureId").val() : $("#UnitofMeasureIddet").val(),
                 'UnitofMeasureName': uom == "" ? $("#UnitOfMeasureId").data("kendoDropDownList").text() : $("#UnitofMeasureIddet").data("kendoDropDownList").text(),
                 'Qty': $("#Cantidad").val(),
                 'Observacion' : $("#Observacion").val(),
                 'Totallinea': total,
                 'cantidadPoliEtileno': $("#cantidadPoliEtileno").val(),
                 'cantidadYute': $("#cantidadYute").val(),

            }


        }




        }

    function RefreshControlPalletsDetail() {
        var grid = $("#gridControlPalletsDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
        record = 0;
        CalcularTotal();
        CalcularTotalDocumento();
    }


    function AddCotizacionDetalle() {
        debugger;
        var notification = $("#notification").data("kendoNotification");
        $('#myModalControlPalletsLine').find(':input').not('#ControlPalletsId :submit').val('0');
        var pesado = $("#ProductoPesado").data("kendoSwitch").check();



        if ($("#WeightBallot").val() == 0 && pesado) {

            $.toast({
                heading: 'Error',
                text: 'Seleccione una boleta de peso!',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
            });

            $("#btnSaveControlEstiba").prop("disabled", true);
            return;


        } else if ($("#BranchId").val() == 0) {

            $.toast({
                heading: 'Error',
                text: 'Esta Boleta no Contiene Sucursal!',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
            });

            $("#btnSaveControlEstiba").prop("disabled", true);
            return;

        }else if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0') {

            //setearvalor('cantidadYute', 0);
            if ($("#UnitOfMeasureId").val()==0 && pesado ) {
                $.toast({
                    heading: 'Error',
                    text: 'El producto no tiene asociada ninguna unidad de medida',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 30000,
                    stack: 6
                });

                $("#btnSaveControlEstiba").prop("disabled", true);
                return;




            }

            if ($("#WarehouseId").val() == 0 && pesado) {
                $.toast({
                    heading: 'Error',
                    text: 'Debe Seleccionar la Bodega',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 30000,
                    stack: 6
                });

                $("#btnSaveControlEstiba").prop("disabled", true);
                return;




            }

             var dataObject = { 'ControlPalletsLineId': 0 };
            $.ajax({
                url: '@Url.Action("pvwControlPalletsDetailMant", "ControlPalletsLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#ControlPalletsLineMant").html('');
                    $("#ControlPalletsLineMant").html(data);
                    var txt = $(data);
                    var found = $("#SubProductId", txt);
                    subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    $.toast({
                        heading: 'Validacion',
                        text: textStatus + ": " + XMLHttpRequest.responseText,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                    return;

                }
            });
            $('#myModalControlPalletsLine').modal('show');
            $("#btnSaveControlEstiba").prop("disabled", false);
        } else   {
            $.toast({
                heading: 'Validacion',
                text: 'Debe seleccionar un Servicio!',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
            });
        }
        CalcularTotal();

    }

    function EditControlPalletDetalle(e) {
        debugger;
        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (dataItem.ControlPalletsId > 0) {
            var subproducto = 0;
            var dataObject = { 'ControlPalletsLineId': dataItem.ControlPalletsLineId, 'ControlPalletsId': dataItem.ControlPalletsId };

            $.ajax({
                url: '@Url.Action("pvwControlPalletsDetailMant", "ControlPalletsLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#ControlPalletsLineMant").html('');
                    $("#ControlPalletsLineMant").html(data);
                    var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                    debugger;
                    //$("#SubProductIddet").val(data.SubProductId);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            //$("#frmControlPalletsLine :input").prop("disabled", true);
        }
        else {
            debugger;
           /* frmControlPalletsLine.reset();
            $("#ControlPalletsLineId").val(dataItem.ControlPalletsLineId);
            var Ancho = $("#Ancho").data("kendoNumericTextBox");
            Ancho.value(dataItem.Ancho);
            Ancho.trigger('change');

            var Alto = $("#Alto").data("kendoNumericTextBox");
            Alto.value(dataItem.Alto);
            Alto.trigger('change');

            var Otros = $("#Otros").data("kendoNumericTextBox");
            Otros.value(dataItem.Otros);
            Otros.trigger('change');


            var cantidadPoliEtileno = $("#cantidadPoliEtileno").data("kendoNumericTextBox");
            cantidadPoliEtileno.value(dataItem.cantidadPoliEtileno);
            cantidadPoliEtileno.trigger('change');


            $("#cantidadYute").val(dataItem.cantidadYute);


            var Totallinea = $("#Totallinea").data("kendoNumericTextBox");
            Totallinea.value(dataItem.Totallinea);
            Totallinea.trigger('change');


            var qty = $("#Cantidad").data("kendoNumericTextBox");
            qty.value(dataItem.Totallinea);
            qty.trigger('change');

            $("#Observacion").val(dataItem.Observacion);*/

            

            $.ajax({
                url: '@Url.Action("pvwControlPalletsDetailMant", "ControlPalletsLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    $("#ControlPalletsLineMant").html('');
                    $("#ControlPalletsLineMant").html(data);
                    var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                    debugger;
                    //$("#SubProductIddet").val(data.SubProductId);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });



            $("#btnActualizarCotizacionLinea").prop("disabled", false);
        }

        $('#myModalControlPalletsLine').modal('show');

        CalcularTotal();

    }

        function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "ControlPalletsLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    var grid = $("#gridControlPalletsDetail").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    //Sync it with the grid
                    //grid.dataSource.sync();
                    RefreshControlPalletsDetail();
                    grid.refresh();
                    record = 0;
                    CalcularTotal();
                    CalcularTotalDocumento();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });




            CalcularTotalDocumento();
            GetBoletaPeso();
        }
    }
</script>

<style>
    #gridControlPalletsDetail .k-grid-content {
        min-height: 100px;
        max-height: 200px;
    }
</style>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.ControlPalletsLine>()
                    .Name("gridControlPalletsDetail")
                    .Events(e =>
                    e.DataBound("CalcularTotalDocumento")
                    )
                    .Columns(columns =>
                    {
                        if (Model.Estado != "Recibido")
                        {

                            columns.Command(command =>
                            {
                                command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditControlPalletDetalle");
                            }).Title("Acciones").Width(100);
                        }
                        columns.Bound(p => p.Linea).Title("Linea").ClientTemplate("#= RowNum() #").Width(120);
                        columns.Bound(p => p.ControlPalletsId).Title("Id Control").Width(150).Visible(false);
                        columns.Bound(p => p.ControlPalletsLineId).Title("Id Linea").Width(120).Visible(false);
                        columns.Bound(p => p.SubProductName).Title("Producto").Width(250);
                        columns.Bound(p => p.UnitofMeasureName).Title("Unidad").Width(200);
                        columns.Bound(p => p.WarehouseName).Title("Bodega").Width(200);
                        columns.Bound(p => p.SubProductId).Visible(false);
                        columns.Bound(p => p.UnitofMeasureId).Visible(false);
                        columns.Bound(p => p.WarehouseId).Visible(false);
                        
                        columns.Bound(p => p.Qty).Width(100).Title("Cantidad").Visible(!Model.ProductoPesado).Format("{0:N2}").ClientFooterTemplate("Total: #=sum#");

                        columns.Bound(p => p.Alto).Title("Alto").Width(150).Visible(Model.ProductoPesado);
                        columns.Bound(p => p.Ancho).Title("Ancho").Width(150).Visible(Model.ProductoPesado);
                        columns.Bound(p => p.Otros).Title("Otros").Width(150).Visible(Model.ProductoPesado);
                        columns.Bound(p => p.Totallinea).Title("Total").Width(150).Format("{0:N2}").Visible(Model.ProductoPesado).ClientFooterTemplate("Total: #=sum#");;
                        columns.Bound(p => p.cantidadPoliEtileno).Width(240).Visible(Model.ProductoPesado).ClientFooterTemplate("Total: #=sum#");;
                        columns.Bound(p => p.cantidadYute).Width(240).Visible(Model.ProductoPesado).ClientFooterTemplate("Total: #=sum#");;
                        columns.Bound(p => p.Estiba).Title("Estiba").Width(250);
                        columns.Bound(p => p.Observacion).Width(200).Title("Observación");
                    })
                    .ToolBar(tools =>
                    {
                        if (Model.Estado != "Recibido")
                        {

                            tools.Custom().Text("Agregar Linea").IconClass("k-icon k-i-plus")
                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();", id = ("btnlinea") });

                        }

                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .AutoBind(true)
                    .Filterable()
                    .Scrollable()
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()
                    .PageSize(100)
                    .ServerOperation(true)
                    .Aggregates(a => {
                        a.Add(x => x.Totallinea).Sum();
                        a.Add(x => x.cantidadPoliEtileno).Sum();
                        a.Add(x => x.cantidadYute).Sum();
                        a.Add(x => x.Qty).Sum();
                    })
                    .Model(model =>
                    {
                        model.Id(p => p.ControlPalletsLineId);
                        model.Field(p => p.ControlPalletsLineId).Editable(false);
                        model.Field(p => p.ControlPalletsId).Editable(false);

                    })
                    .Events(events =>
                    {
                        events.Error("error_handler");


                    })
                    .Read(read => read.Action("GetControlPalletsLineByControlPalletId", "ControlPalletsLine").Data("GetControlPalletsId"))
                //.Create(create => create.Action("Insert", "SalesOrderLine"))
                //.Update(update => update.Action("Update", "SalesOrderLine", new { ControlPalletsLineId = "{0}" }))
                //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { ControlPalletsLineId = "{0}" }))
                )
)

    </div>
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridControlPalletsDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridControlPalletsDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    var record = 0;
    function RowNum() {

        return ++record;
    }


</script>
