
<script>
    function AddControlPallet() {
      
         var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });


         var dataObject = {
             ControlPalletsId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwControlPallets","ControlPallets")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#controlpallets").html('');
                $("#controlpallets").html(result);

                //RefreshCotizacionesDetail();
                 //$("#btnSaveCotizacion").show();
                $('#myModalControlPallets').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditControlPallet(e) {
         e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            ControlPalletsId: dataItem.ControlPalletsId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwControlPallets", "ControlPallets")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#controlpallets").html('');
                $("#controlpallets").html(result);

              //  RefreshCotizacionesDetail();
                // $("#btnSaveCotizacion").hide();
                $('#myModalControlPallets').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function ImprimirControlPallet(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFControlPallets", "ControlPallets")/' + dataItem.ControlPalletsId;    
    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

@(Html.Kendo().Grid<ERPMVC.Models.ControlPallets>()
                          .Name("gridEstibas")
                          .Columns(columns =>
                          {
                              columns.Command(command =>
                              {
                                  command.Custom("Editar").Click("EditControlPallet");
                                  command.Custom("Imprimir").Click("ImprimirControlPallet");
                                  //  command.Edit(); command.Destroy();
                                  }).Width(250);

                              columns.Bound(p => p.ControlPalletsId).Title("Id").Width(150);
                              columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Title("Fecha Documento").Width(150);
                              columns.Bound(p => p.CustomerName).Title("Cliente").Width(150);
                              columns.Bound(p => p.ProductId).Title("Producto").Width(150);
                              columns.Bound(p => p.DescriptionProduct).Title("Descripcion").Width(150);
                              //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                              columns.Bound(p => p.Placa).Title("Placa").Width(150);
                              columns.Bound(p => p.Marca).Title("Marca").Width(150);
                              columns.Bound(p => p.EsIngreso).Title("Es Ingreso").Width(150);
                              columns.Bound(p => p.SubTotal).Title("SubTotal").Width(150);
                              columns.Bound(p => p.TotalSacos).Title("Total Sacos").Width(150);
                          })
                          .ToolBar(tools =>
                          {
                               //tools.Create();
                               tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddControlPallet();" });

                              tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                              tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                          })
                           .Editable(e => e.Mode(GridEditMode.PopUp))
                            .Sortable()
                            .AutoBind(true)
                            .Pageable()
                            .Filterable()
                            .Scrollable()
                            // .ClientDetailTemplateId("template")
                            .Pdf(pdf => pdf.FileName("ControlPalletsReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                              .Excel(excel => excel.FileName("ControlPalletsReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                            //.Events(e=>e.Save("onsave"))
                            .DataSource(dataSource =>

                           dataSource
                           //.Ajax()
                           .WebApi()
                            .ServerOperation(true)
                            .Model(model =>
                            {
                                model.Id(p => p.ControlPalletsId);
                                model.Field(p => p.ControlPalletsId).Editable(true);
                                model.Field(p => p.CustomerId).Editable(true);


                            })
                            .Events(events =>
                            {
                                events.Error("error_handler");
                    //events.upda("EditHandler");

                })
                            .Read(read => read.Action("Get", "ControlPallets"))
                            .Create(create => create.Action("Insert", "ControlPallets"))
                            .Update(update => update.Action("Update", "ControlPallets", new { id = "{0}" }))
                            .Destroy(destroy => destroy.Action("Delete", "ControlPallets", new { id = "{0}" }))
                      )
)

<div id="controlpallets">
    @await Html.PartialAsync("pvwControlPallets", new ERPMVC.DTO.ControlPalletsDTO { ControlPalletsId = 0, DocumentDate = DateTime.Now, })
</div>




<div id="ConditionView">
</div>

<div id="CustomerConditionView">
</div>
