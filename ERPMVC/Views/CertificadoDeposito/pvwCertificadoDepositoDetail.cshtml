@model ERPMVC.DTO.CertificadoDepositoDTO
@using System.Security.Claims

@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosCertificadoDeposito"];
    bool editable = Model.IdCD == 0;
}



<script>
    const formatter = new Intl.NumberFormat("en-US");

    function RefreshCertificadoDepositoDetail() {
        var grid = $("#gridCertificadoDepositoDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
        //CalcularTotalDocumento();
    }


    
        function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "CertificadoLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                    record = 0;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridCertificadoDepositoDetail").data("kendoGrid");
            
            grid.dataSource.remove(dataItem);

            CalcularTotalDocumento();
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }
    var record = 0;
    function RowNum() {
        
        return ++record;
    }
    function CalcularTotalDocumento() {
        var displayedData = $("#gridCertificadoDepositoDetail").data().kendoGrid.dataSource.view();
        var total = 0, sumacantidad = 0, ValorImpuestos = 0, derechosfiscales = 0;

        $(displayedData).each(function (index, element) {
            var t = JSON.parse(JSON.stringify(element));
            //console.log(t);
            //console.log('Total 1'+total);
            //  console.log('sumacantidad 2' + sumacantidad);
            sumacantidad = sumacantidad + t["Quantity"];
            total = total + t["Amount"];
            ValorImpuestos = ValorImpuestos + t["ValorImpuestos"];
            derechosfiscales += t["DerechosFiscales"];
            t["Amount"] = t["Quantity"] * t["Price"]

        });

        //  console.log('Total Documento:' + total);
        setearvalor("Quantitysum", sumacantidad);
        //setearvalor("SujetasAPago", ValorImpuestos);
        setearvalor("TotalDerechos", derechosfiscales);
        setearvalor("Total", total);
        //$("#Quantitysum").data("kendoNumericTextBox").value(sumacantidad);
        //$("#Total").data("kendoNumericTextBox").value(total);

    }

    function setearvalor(nombrenumerico, valor) {
        var numeric = $("#" + nombrenumerico).data("kendoNumericTextBox");
        numeric.value(valor);
        numeric.trigger('change');
        numeric = null;
    }


    formattear = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'LPS',
        minimumFractionDigits: 2
    });

    function calculateField(e) {
        //debugger;
        if (e.container) {            
            if (e.model.Quantity > e.model.CantidadDisponible) {
                $.toast({
                    heading: 'Error',
                    text: 'La cantidad a Certificar no puede ser mayor al Disponible',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                e.model.Quantity = e.model.CantidadDisponible;
            }
            if (e.model.Quantity <=0) {
                $.toast({
                    heading: 'Error',
                    text: 'La cantidad a Certificar no puede ser cero para no certificar este producto elimine la fila',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                e.model.Quantity = e.model.CantidadDisponible;
            }
            var totalSpan = e.container.closest("TR").find(".totalSpan");
            var totalderechosSpan = e.container.closest("TR").find(".totalderechosSpan");
            e.model.Amount = e.model.Price * e.model.Quantity;
            e.model.DerechosFiscales = e.model.Quantity * e.model.ValorUnitarioDerechos;
            
            var total = formattear.format(e.model.Amount).replace(/[a-z]{3}/i, "").trim();
            totalSpan.html(total);


            var totalderechos = formattear.format(e.model.DerechosFiscales).replace(/[a-z]{3}/i, "").trim();
            totalderechosSpan.html(totalderechos);


            //Actualizar Total
            var footer = $('tr.k-footer-template'),
                idx = 4, // replace 3 with the column index you want to aggregate
                aggregate = $(footer).children('td')[idx];
            $(aggregate).text(totalColumnas(2, 0));
            
            //Actualizar Total
            var footer = $('tr.k-footer-template'),
                idx = 9, // replace 3 with the column index you want to aggregate
                aggregate = $(footer).children('td')[idx];
            $(aggregate).text(totalColumnas(4, 1));

            //Actualizar TotalDerechos
            var footer = $('tr.k-footer-template'),
                idx = 11, // replace 3 with the column index you want to aggregate
                aggregate = $(footer).children('td')[idx];
            $(aggregate).text(totalColumnas(6, 1));

            CalcularTotalDocumento();
            
        }
        
    }


</script>

<style>
    .numbers {
        text-align: right;
    }
</style>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.CertificadoLine>
    ()
    .Name("gridCertificadoDepositoDetail")
    .Events(e =>
    e.CellClose("calculateField")

    )
    .Columns(columns =>
    {

        columns.Command(command =>
        {
            if (Model.editar == 1)
            {

                command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");

            }
        }).Width(100).Visible(editable);
        //columns.Bound(p => p.PdaNo).Title("Pda No").ClientTemplate("#= RowNum()#").Width(110);
        columns.Bound(p => p.PdaNo).Title("Pda No").Width(110);
        columns.Bound(p => p.CertificadoLineId).Title("No").Width(100).Visible(false);
        columns.Bound(p => p.ReciboId).Title("Recibo No").Width(120).Visible(true);
        columns.Bound(p => p.GoodsReceivedLineId).Title("Recibo No").Width(120).Visible(false);
        columns.Bound(p => p.CantidadDisponible).Format("{0:n2}").Title("Disponible")
            .Width(150).ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(1,0)#</div>").Visible(editable)
             .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
        columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(120)
                .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(2,0)#</div>")
                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                 ;
        //.ClientTemplate("<input id='increment_#=ID#' class='numeric' max='#=CantidadDisponible#' />");
        columns.Bound(p => p.UnitMeasurName).Title("Unidad de medida").Width(170);
        columns.Bound(p => p.IdCD).Title("Certificado Id").Width(150).Visible(false);
        columns.Bound(p => p.SubProductId).Visible(false).Title("Producto").Width(0);
        columns.Bound(p => p.UnitMeasureId).Title("Unidad de medida").Width(0).Visible(false);
        columns.Bound(p => p.SubProductName).Title("Producto").Width(250);
        columns.Bound(p => p.WarehouseId).Title("Bodega").Width(150).Visible(false);
        columns.Bound(p => p.WarehouseName).Title("Bodega").Width(150);
        columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio")
         .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
        .Width(150);
        columns.Bound(p => p.Amount).Format("{0:n2}").Title("Total ")
        .ClientTemplate("<div style='text-align: right'><span class='totalSpan'>#= formattear.format(Price * Quantity).replace(/[a-z]{3}/i, '').trim() #</span></div>")
        .Width(200)
        .ClientFooterTemplate("<div style='text-align: right'><span class='totalsp'>#= totalColumnas(4,1)#</span></div>")
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
        columns.Bound(p => p.ValorUnitarioDerechos).Format("{0:n2}").Title("Unit Derechos Fiscales").Width(150)
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
        .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(5,1)#</div>");
        columns.Bound(p => p.DerechosFiscales).Format("{0:n2}").Title("Total Derechos").Width(150)
         .ClientTemplate("<div style='text-align: right'><span class='totalderechosSpan'>#= formattear.format(ValorUnitarioDerechos * Quantity).replace(/[a-z]{3}/i, '').trim() #</span></div>")
        .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(6,1)#</div>")
         .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });


    })
    .Editable(e => e.Mode(GridEditMode.InCell))
    .Filterable(f => f.Operators(o => o.ForString(s => s
    .Clear()
    
    .Contains("Contiene")
    .DoesNotContain("No contiene")
    .EndsWith("Termina con")
    .IsEqualTo("Es igual a")
    .IsNotEqualTo("No es igual a")
    .IsNull("Es nulo")
    .StartsWith("Inicia con")


    )
    .ForNumber(n => n
    .Clear()
    .IsEqualTo("Es igual a")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsNull("Es nulo")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    )
    .ForDate(d => d
    .Clear()
    .IsEqualTo("Es igual que")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    .IsNotEqualTo("No es igual que")
    )
    ))


    .Sortable()
    
    .AutoBind(true)
    //.Pageable()
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("CertificadoDepositoDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
    .Excel(excel => excel.FileName("CertificadoDepositoDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .DataSource(dataSource =>

    dataSource
    //.Ajax()
    .WebApi()
    .Batch(true)

    .ServerOperation(true)
    .Model(model =>
    {
        model.Id(p => p.CertificadoLineId);
        model.Field(p => p.PdaNo).Editable(false);
        model.Field(p => p.UnitMeasurName).Editable(false);
        model.Field(p => p.ReciboId).Editable(false);
        model.Field(p => p.SubProductName).Editable(false);
        model.Field(p => p.WarehouseName).Editable(false);
        model.Field(p => p.ValorUnitarioDerechos).Editable(false);
        model.Field(p => p.CertificadoLineId).Editable(false);
        model.Field(p => p.IdCD).Editable(false);
        model.Field(p => p.Quantity).Editable(editable);
        model.Field(p => p.CantidadDisponible).Editable(false);
        model.Field(p => p.Amount).Editable(false);
        model.Field(p => p.DerechosFiscales).Editable(false);
        model.Field(p => p.Price).Editable(false);

    })
    .Sort(s => s.Add(a => a.PdaNo).Ascending())
    .Events(events =>
    {
        events.Error("error_handler");


    })
    .Read(read => read.Action("GetCertificadoLine", "CertificadoLine").Data("GetRecibos"))
    )
    )

</div>
</div>