@using Microsoft.AspNetCore.Http;
@using System.Security.Claims
@using Kendo.Mvc.UI;
@{
    ViewData["Title"] = "Certificado de Deposito";
}

<link href="~/admp/assets/plugins/wizard/steps.css" rel="stylesheet">
<script src="~/admp/assets/plugins/wizard/jquery.steps.min.js"></script>
<script src="~/admp/assets/plugins/wizard/jquery.validate.min.js"></script>


<script>


    $(document).ready(function () {
        clearsession();
    });


     var hcustom = 0;
    function clearsession() {
            var dataObject = ["listadoproductoscertificadodeposito"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddCertificadoDeposito() {
         clearsession();
         var dataObject = {
            IdCD: 0,
            editar : 1
        };
        $.ajax({
            url: '@Url.Action("pvwCertificadoDeposito", "CertificadoDeposito")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

                RefreshCertificadoDepositoDetail();
                 $("#btnSaveCotizacion").show();
                $('#myModalCertificadoDeposito').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditCertificadoDeposito(e) {
         e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            IdCD: dataItem.IdCD,
            editar : 0
        };

        clearsession();

        $.ajax({
            url: '@Url.Action("pvwCertificadoDeposito", "CertificadoDeposito")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

              //  RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").hide();
                $('#myModalCertificadoDeposito').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }




    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


    function AnularCD(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var dataObject = {
            IdCD: dataItem.IdCD
        }

        if (confirm("Esta seguro que desea anular el certificado de deposito?")) {
            $.ajax({
                url: '@Url.Action("AnularCD", "CertificadoDeposito")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                        $.toast({
                        heading: 'Satisfactorio',
                        text: 'El Certificado se ha anulado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                        RefreshCertificadoDeposito();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    
                    $.toast({
                        heading: 'Satisfactorio',
                        text: XMLHttpRequest.responseText,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 7000,
                        stack: 6
                    });
                }
            });
        }
    }


      function ImprimirCertificadoDeposito(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if(!confirm("Esta seguro que desea imprimir esta accion se agrega a la auditoria")) return;

        var url = '@Url.Action("SFCertificadoDeposito", "CertificadoDeposito")/' + dataItem.IdCD;
       RefreshCertificadoDeposito();
        var win = window.open(url , '_blank');
        win.focus();



    }


    function ImprimirTalon(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if(!confirm("Esta seguro que desea imprimir esta accion se agrega a la auditoria")) return;
        var url = '@Url.Action("SFImprimirTalon", "CertificadoDeposito")/' + dataItem.IdCD;
       RefreshCertificadoDeposito();
        var win = window.open(url , '_blank');
        win.focus();


    }
    
    function ImprimirSolicitudesEmitidasDetallado() {

        var url = '@Url.Action("SFSolicitudesEmitidasDetallado", "SolicitudCertificadoDeposito")/';
        var win = window.open(url , '_blank');
        win.focus();

    }


    function ImprimirCertificadosEmitidosDetallado() {

        var url = '@Url.Action("SFCertificadosEmitidosDetallado", "CertificadoDeposito")/';
        var win = window.open(url , '_blank');
        win.focus();

    }


    function ImprimirSolicitudDeposito(e) {
        e.preventDefault();
        debugger;
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("SFSolicitudCertificadoDeposito", "SolicitudCertificadoDeposito")/' + dataItem.SolicitudCertificadoId;
        var win = window.open(url , '_blank');
        win.focus();

    }

    function ImprimirKardex(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("SFKardexCertificado", "CertificadoDeposito")/' + dataItem.IdCD;
        var win = window.open(url, '_blank');
        win.focus();
    }


    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (Number(this.IdEstado) != 5) {
               $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();
            }
            if (Number(this.IdEstado) != 6) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Imprimir').hide();
            }
        })
    }


    function Aprobar(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.IdEstado != 5) {
            }
        if (!confirm('Esta seguro de aprobar este Certificado?')) {
            return;

        }

        var dataObject = {
                IdCD: dataItem.IdCD,
            };

            $.ajax({
                url: '@Url.Action("Aprobar", "CertificadoDeposito")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'El Certificado se ha aprobado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                    RefreshCertificadoDeposito();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }

    function ImprimirListadoCD(e) {
        var url = '@Url.Action("SFListadoCD", "CertificadoDeposito")/';
        var win = window.open(url, '_blank');
        win.focus();
    }
    

</script>



<h3 class="text-themecolor">Solicitud/Certificado de depósito</h3>

@(Html.Kendo().Grid<ERPMVC.Models.CertificadoDeposito>()
                                      .Name("gridCertificadoDeposito")
                                      .Columns(columns =>
                                      {
                                          if (User.HasClaim("Inventarios.Solicitud Certificado Deposito.Editar", "true")
                                          || User.HasClaim("Inventarios.Solicitud Certificado Deposito.Imprimir Certificado", "true")
                                          || User.HasClaim("Inventarios.Solicitud Certificado Deposito.Anular", "true")
                                          || User.HasClaim("Inventarios.Solicitud Certificado Deposito.Imprimir Solicitud", "true"))
                                          {
                                              columns.Command(command =>
                                              {
                                                  if (User.HasClaim("Inventarios.Solicitud Certificado Deposito.Editar", "true"))
                                                  {
                                                      command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCertificadoDeposito");
                                                      
                                                  }
                                                  if (User.HasClaim("Inventarios.Solicitud Certificado Deposito.Imprimir Certificado", "true"))
                                                  {
                                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCertificadoDeposito");
                                                      command.Custom("ImprimirTalon").Text(" ").IconClass("fa fa-print").Click("ImprimirTalon");
                                                      command.Custom("ImprimirKardex").Text(" ").IconClass("fa fa-print").Click("ImprimirKardex");
                                                  }
                                                  if (User.HasClaim("Inventarios.Solicitud Certificado Deposito.Anular", "true"))
                                                  {
                                                      command.Custom("Anular").Text(" ").IconClass("fa fa-times-circle").Click("AnularCD");
                                                      command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("Aprobar");
                                                  }
                                                  if (User.HasClaim("Inventarios.Solicitud Certificado Deposito.Imprimir Solicitud", "true"))
                                                  {
                                                      command.Custom("ImprimirSolicitud").Text(" ").IconClass("fa fa-print").Click("ImprimirSolicitudDeposito");
                                                  }
                                              }).Width(220).Title("Acciones");
                                          }
                                          columns.Bound(p => p.IdCD).Title("No. CD").Width(120);
                                          columns.Bound(p => p.SolicitudCertificadoId).Title("No. SCD").Width(120);
                                          columns.Bound(p => p.FechaCertificado).Format("{0:dd/MM/yyyy}").Title("Fecha Certificado").Width(150);
                                          columns.Bound(p => p.FechaVencimientoDeposito).Format("{0:dd/MM/yyyy}").Title("Fecha de Vencimiento").Width(150);
                                          columns.Bound(p => p.CustomerName).Title("Cliente").Width(200);
                                          columns.Bound(p => p.ServicioName).Title("Servicio").Width(150);
										  columns.Bound(p => p.Endoso.BankName).Title("Banco").Width(150);
                                          columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                                          columns.Bound(p => p.NoPoliza).Title("NoPoliza").Width(150);
                                          columns.Bound(p => p.Producto).Title("Producto").Width(150);
                                          columns.Bound(p => p.Quantitysum).Title("Cantidad").Format("{0:N2}").Width(150)
                                          .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
                                          columns.Bound(p => p.Estado).Title("Estado").Width(150);
                                          columns.Bound(p => p.Impresiones).Title("Impresiones").Width(150);
                                          columns.Bound(p => p.impresionesTalon).Title("Impresiones Talon").Width(150);
                                      }).Filterable(f => f.Operators(o => o.ForString(s => s
                                                             .Clear()
                                                             .Contains("Contiene")
                                                             .DoesNotContain("No contiene")
                                                             .EndsWith("Termina con")
                                                             .IsEqualTo("Es igual a")
                                                             .IsNotEqualTo("No es igual a")
                                                             .IsNull("Es nulo")
                                                             .StartsWith("Inicia con")


                                                       )
                                                       .ForNumber(n => n
                                                         .Clear()
                                                         .IsEqualTo("Es igual a")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsNull("Es nulo")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       )
                                                       .ForDate(d => d
                                                       .Clear()
                                                       .IsEqualTo("Es igual que")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       .IsNotEqualTo("No es igual que")
                                                        )
                                                     ))
                                          .ToolBar(tools =>
                                          {
                                              // tools.Create();

                                              if (User.HasClaim("Inventarios.Solicitud Certificado Deposito.Agregar", "true"))
                                              {
                                                  tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCertificadoDeposito();" });
                                              }
                                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                              tools.Custom().Text("Reporte Solicitudes Emitidas Detallado").IconClass("k-icon k-i-print")
                                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirSolicitudesEmitidasDetallado();" });
                                              tools.Custom().Text("Reporte Certificados Emitidos Detallado").IconClass("k-icon k-i-print")
                                                     .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirCertificadosEmitidosDetallado();" });
                                              tools.Custom().Text("Listado de Saldos").IconClass("k-icon k-i-file")
                                                     .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirListadoCD();" });


                                              
                                          })
                                       .Editable(e => e.Mode(GridEditMode.PopUp))
                                        .Sortable()
                                        .AutoBind(true)
                                        .Pageable(p => p.Input(true))
                                        .Filterable()
                                        .Scrollable()
                                        .Pdf(pdf => pdf.FileName("CertificadoDepositoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                          .Excel(excel => excel.FileName("CertificadoDepositoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                        .DataSource(dataSource =>

                                       dataSource
                                       //.Ajax()
                                       .WebApi()
                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.IdCD);
                                            model.Field(p => p.IdCD).Editable(true);


                                        })
                                        .Events(events =>
                                        {
                                            events.Error("error_handler");
                                        })
                                        .Read(read => read.Action("GetCertificadoDeposito", "CertificadoDeposito"))
                                        .Create(create => create.Action("Insert", "CertificadoDeposito"))
                                        .Update(update => update.Action("Update", "CertificadoDeposito", new { id = "{0}" }))
                                        .Destroy(destroy => destroy.Action("Delete", "CertificadoDeposito", new { id = "{0}" }))
                                  ).Events(e => e.DataBound("dataBound"))
)

<div id="salesorder">
    @await Html.PartialAsync("pvwCertificadoDeposito", new ERPMVC.DTO.CertificadoDepositoDTO
    {
        IdCD = 0,
        FechaCertificado = DateTime.Now,
        FechaVencimientoCertificado = DateTime.Now.AddDays(60),     
        BranchId = Convert.ToInt32(Context.Session.GetString("BranchId"))
})
</div>

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCertificadoDeposito").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCertificadoDeposito").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    
    setRowButtonTooltip(".k-grid-ImprimirKardex", "Imprimir Kardex");
    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    setRowButtonTooltip(".k-grid-Anular", "Anular un certificado de deposito!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir Certificado");
    setRowButtonTooltip(".k-grid-ImprimirTalon", "Imprimir Talon");
    setRowButtonTooltip(".k-grid-ImprimirSolicitud", "Imprimir Solicitud");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Aprobar", "Aprobar");

</script>



