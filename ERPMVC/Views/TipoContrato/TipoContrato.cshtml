@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "TipoContrato";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

     function AddTipoContrato() {

         $('#ModalTipoContrato').find(':input').not(':submit').val('');
         $('#ModalTipoContrato').modal('show');
         $("#TipoContratoId").val('0');
         $("#IdEstado").data("kendoDropDownList").value(0);
         var validator = $("#frmTipoContrato").data("kendoValidator");
         validator.hideMessages();




    }


         function EditTipoContrato(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 IdTipoContrato: dataItem.IdTipoContrato,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddTipoContrato", "TipoContrato")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    console.log('success', result)

                    $("#numTipoContrato").html('');
                    $("#numTipoContrato").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalTipoContrato').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

    function RefrescarGrid() {
        var grid = $("#gridTipoContrato").getKendoGrid();
        grid.dataSource.read();
    }

</script>

<h3 class="text-themecolor">Tipo de Contrato</h3>

@(Html.Kendo().Grid<ERPMVC.Models.TipoContrato>
                      ()

                        .Name("gridTipoContrato")

                        .Columns(columns =>
                        {
                            if (permisos.HasClaim("RRHH.Parametros.Tipo Contrato.Editar", "true")
                                || permisos.HasClaim("RRHH.Parametros.Tipo Contrato.Eliminar", "true"))
                            {
                                columns.Command(command =>
                                {
                                    //command.Custom("Ver detalles").Click("Detalles");
                                    //command.Custom("Editar").Click("EditTipoContrato");
                                    //command.Destroy().Text("Eliminar");
                                    if (permisos.HasClaim("RRHH.Parametros.Tipo Contrato.Editar", "true"))
                                    {
                                        command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditTipoContrato");
                                    }
                                  //  if (permisos.HasClaim("RRHH.Parametros.Tipo Contrato.Eliminar", "true"))
                                  //  {
                                        command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                                   /// }
                                }).Width(100).Title("Acciones");
                            }
                            columns.Bound(p => p.IdTipoContrato).Width(150);
                            columns.Bound(p => p.NombreTipoContrato).Width(170);
                            columns.Bound(p => p.IdEstado).ClientTemplate("#if (IdEstado =='1') {#Activo#} else {#Inactivo#} #").Width(150);
                            columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy HH:mm:ss}").Width(100).Hidden();


                        })


                        .ToolBar(tools =>
                        {
                            //tools.Create();
                            if (permisos.HasClaim("RRHH.Parametros.Tipo Contrato.Agregar", "true"))
                            {
                                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                  .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddTipoContrato()" });
                            }
                                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                            
                        })
                        .Editable(e => e.Mode(GridEditMode.PopUp))
                        .Sortable()
                        .Pageable()
                        .Filterable()
                        .Scrollable()
                        .Pdf(pdf => pdf.FileName("TipoContratoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("TipoContratoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                        .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.IdTipoContrato);
                            model.Field(p => p.IdTipoContrato).Editable(false);


                        })
                        .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("Get", "TipoContrato"))
                       .Create(create => create.Action("Insert", "TipoContrato").Type(HttpVerbs.Post))
                       .Update(update => update.Action("Update", "TipoContrato").Type(HttpVerbs.Post))
                       .Destroy(destroy => destroy.Action("Delete", "TipoContrato").Type(HttpVerbs.Post))
                        )
                        .Events(e =>
                        {
                            e.Save("onsave");

                        })
)

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridTipoContrato").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridTipoContrato").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>
<div id="numTipoContrato">
    @await Html.PartialAsync("pvwAddTipoContrato", new ERPMVC.DTO.TipoContratoDTO { IdTipoContrato = 0 })
</div>

