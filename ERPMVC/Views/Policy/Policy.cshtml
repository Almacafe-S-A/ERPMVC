@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Policy";
}


<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

</script>

<h3 class="text-themecolor">Política</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Policy>
          ()

            .Name("gridCPolicy")

            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Width(250);
                columns.Bound(p => p.Name).Width(100);
                columns.Bound(p => p.Description).Width(170);
                columns.Bound(p => p.type).Width(100);
          
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    command.Edit(); command.Destroy();
                }).Width(250);

            })


            .ToolBar(tools =>
            {

                tools.Create();
                tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("PolicyReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("PolicyReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.Id);
                model.Field(p => p.Id).Editable(false);
  
            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("Get", "Policy"))
            .Create(create => create.Action("Insert", "Policy").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "Policy").Type(HttpVerbs.Put))
            .Destroy(destroy => destroy.Action("Delete", "Policy", new { Id = "{0}" }).Type(HttpVerbs.Delete))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)

