@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Configuración de Proveedores";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function AddConfigurationVendor() {



        $('#ModalConfigurationVendor').find(':input').not(':submit').val('');

        $('#ModalConfigurationVendor').modal('show');
        $("#ConfigurationVendorId").val('0');


        var validator = $("#frmConfigurationVendor").data("kendoValidator");
        validator.hideMessages();


      }


    function EditConfigurationVendor(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            ConfigurationVendorId: dataItem.ConfigurationVendorId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddConfigurationVendor", "ConfigurationVendor")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumConfigurationVendor").html('');
                    $("#NumConfigurationVendor").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalConfigurationVendor').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }



</script>

<h3 class="text-themecolor">Configuracion de Proveedores</h3>
@(Html.Kendo().Grid<ERPMVC.Models.ConfigurationVendor>
                                    ()
                                    .Name("gridNumeracionConfigurationVendor")
                                    .Columns(columns =>
                                    {
                                        if (permisos.HasClaim("Proveedores.Configuracion de Proveedor.Editar", "true"))
                                        {
                                            columns.Command(command =>
                                            {
                                                //command.Custom("Ver detalles").Click("Detalles");
                                                //command.Custom("Editar").Click("EditTypeAccount");
                                                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditConfigurationVendor");

                                                //  command.Destroy();
                                            }).Title("Acciones").Width(100);
                                        }
                                        columns.Bound(p => p.ConfigurationVendorId).Title("Código").Width(150);
                                        columns.Bound(p => p.QtyMonth).Title("Limite Mensual Permitido").Width(200).Format("{0:c2}");
                                        columns.Bound(p => p.Estado).Title("Estado").Width(200);




                                    })
                                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                                               .Clear()
                                                               .Contains("Contiene")
                                                               .DoesNotContain("No contiene")
                                                               .EndsWith("Termina con")
                                                               .IsEqualTo("Es igual a")
                                                               .IsNotEqualTo("No es igual a")
                                                               .IsNull("Es nulo")
                                                               .StartsWith("Inicia con")


                                                         )
                                                         .ForNumber(n => n
                                                           .Clear()
                                                           .IsEqualTo("Es igual a")
                                                           .IsGreaterThan("Es mayor que")
                                                           .IsLessThan("Es menor que")
                                                           .IsNull("Es nulo")
                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         )
                                                         .ForDate(d => d
                                                         .Clear()
                                                         .IsEqualTo("Es igual que")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         .IsNotEqualTo("No es igual que")
                                                          )
                                                       ))
                                    .ToolBar(tools =>
                                    {
                                        // tools.Create();
                                        if (permisos.HasClaim("Proveedores.Configuracion de Proveedor.Agregar", "true"))
                                        {
                                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddConfigurationVendor();" });
                                        }
                                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                        


                                    })
                                    .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .Pageable()
                                    .Filterable()
                                    .Scrollable()
                                    .Pdf(pdf => pdf.FileName("ConfigurationVendorReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                        .Excel(excel => excel.FileName("ConfigurationVendorReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    .DataSource(dataSource =>
                                        dataSource
                                        .WebApi()

                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.ConfigurationVendorId);
                                            model.Field(p => p.Estado).Editable(true);
                                            model.Field(p => p.IdEstado).Editable(true);

                                        })
                                        .Events(events => events.Error("error_handler"))
                                        .Read(read => read.Action("GetConfigurationVendor", "ConfigurationVendor"))
                                        .Create(create => create.Action("Insert", "ConfigurationVendor"))
                                        .Update(update => update.Action("Update", "ConfigurationVendor", new { ConfigurationVendorId = "{0}" }).Type(HttpVerbs.Put))
                                    //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

                                    )
                                    .Events(e =>
                                    {
                                        e.Save("onsave");

                                    })
)

<div id="NumConfigurationVendor">
    @await Html.PartialAsync("pvwAddConfigurationVendor", new ERPMVC.DTO.ConfigurationVendorDTO { ConfigurationVendorId = 0 })
</div>
<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionConfigurationVendor").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionConfigurationVendor").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Verdetalles", "Ver detalles");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");

</script>