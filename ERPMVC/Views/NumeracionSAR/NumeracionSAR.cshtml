@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Númeriación SAR";
    bool permisoAgregar, permisoEditar, permisoEliminar, permisoExportar;
    permisoAgregar = (bool)ViewData["permisoAgregar"];
    permisoEditar = (bool)ViewData["permisoEditar"];
    permisoEliminar = (bool)ViewData["permisoEliminar"];
    permisoExportar = (bool)ViewData["permisoExportar"];
}



<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddCai() {
        //$('#myModalNumeracion').find(':input').not(':submit').val('');
        //$('#myModalNumeracion').modal('show');
        //$("#IdNumeracion").val('0');

        var dataObject = {
            IdNumeracion: 0,
            editar: 1
        };

        $.ajax({
            url: '@Url.Action("GripEditar","NumeracionSAR")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numsar").html('');
                $("#numsar").html(result);

                //  RefreshCotizacionesDetail();
                $("#btnNunsar").hide();
                $('#myModalNumeracion').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });

    }

         function EditNumeracion(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                IdNumeracion: dataItem.IdNumeracion,
                editar : 0
            };


             var puntoemision = 0;
            $.ajax({
                url: '@Url.Action("GripEditar","NumeracionSAR")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#numsar").html('');
                    $("#numsar").html(result);

                   

                    var txt = $(result);
                    var found = $("#IdPuntoEmision", txt);
                    puntoemision = $(found).val();

                    GetPuntoEmision();

                    $("#IdPuntoEmision").data("kendoDropDownList").value(puntoemision);
                
                  //  RefreshCotizacionesDetail();
                    $("#btnNunsar").hide();
                    $('#myModalNumeracion').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

</script>


<h3 class="text-themecolor">Numeración SAR</h3>

@(Html.Kendo().Grid<ERPMVC.Models.NumeracionSAR>
                                        ()
                                        .Name("gridNumeracionSAR")
                                        .Columns(columns =>
                                        {
                                            if (permisoEditar == true || permisoEliminar == true)
                                            {
                                                columns.Command(command =>
                                                {
                                                    //command.Custom("Ver detalles").Click("Detalles");
                                                    if (permisoEditar)
                                                    {
                                                        command.Custom("Editar").Click("EditNumeracion").IconClass("fa fa-edit").Text(" ");
                                                    }
                                                    if (permisoEliminar)
                                                    {
                                                        command.Destroy().Text(" ").IconClass("fa fa-trash");
                                                    }
                                                }).Width(150).Title("Acciones");
                                            }
                                            columns.Bound(p => p.IdNumeracion).Width(150);
                                            // columns.Bound(p => p.IdCAI).Width(150);
                                            columns.Bound(p => p._cai).Width(250);
                                            columns.Bound(p => p.NoInicio).Width(180);
                                            columns.Bound(p => p.NoFin).Width(160);
                                            columns.Bound(p => p.FechaLimite).Format("{0:dd/MM/yyyy}").Width(200);
                                            columns.Bound(p => p.CantidadOtorgada).Width(220);
                                            // columns.Bound(p => p.SiguienteNumero).Width(220);
                                            columns.Bound(p => p.PuntoEmision).Width(200);
                                            columns.Bound(p => p.DocType).Width(170);
                                            // columns.Bound(p => p.DocSubType).Width(170);
                                            columns.Bound(p => p.Estado).Width(150);



                                        })
                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                       .Clear()
                                       .Contains("Contiene")
                                       .DoesNotContain("No contiene")
                                       .EndsWith("Termina con")
                                       .IsEqualTo("Es igual a")
                                       .IsNotEqualTo("No es igual a")
                                       .IsNull("Es nulo")
                                       .StartsWith("Inicia con")


                                 )
                                 .ForNumber(n => n
                                   .Clear()
                                   .IsEqualTo("Es igual a")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsNull("Es nulo")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 )
                                 .ForDate(d => d
                                 .Clear()
                                 .IsEqualTo("Es igual que")
                                 .IsGreaterThan("Es mayor que")
                                 .IsLessThan("Es menor que")
                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 .IsNotEqualTo("No es igual que")
                                  )
                               ))
                                        .ToolBar(tools =>
                                        {
                                            //tools.Create();
                                            if (permisoAgregar)
                                            {
                                                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCai()" });
                                            }
                                            if (permisoExportar)
                                            {
                                                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                            }
                                        })
                                        .Editable(e => e.Mode(GridEditMode.PopUp))
                                        .Sortable()
                                        .Pageable()
                                        .Filterable()
                                        .Scrollable()
                                        .Pdf(pdf => pdf.FileName("NumeracionSARReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                            .Excel(excel => excel.FileName("NumeracionSARReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                        .DataSource(dataSource =>
                                            dataSource
                                            .WebApi()

                                            .ServerOperation(true)
                                            .Model(model =>
                                            {
                                                model.Id(p => p.IdNumeracion);
                                                model.Field(p => p.IdNumeracion).Editable(false);
                                                model.Field(p => p.FechaCreacion).Editable(true);
                                                model.Field(p => p.FechaLimite).Editable(true);
                                                model.Field(p => p.UsuarioCreacion).Editable(false);
                                                model.Field(p => p.UsuarioModificacion).Editable(false);

                                            })
                                            .Events(events => events.Error("error_handler"))
                                            .Read(read => read.Action("GetNumeracion", "NumeracionSAR"))
                                            .Create(create => create.Action("Insert", "NumeracionSAR").Type(HttpVerbs.Post))
                                            .Update(update => update.Action("Update", "NumeracionSAR", new { IdNumeracion = "{0}" }).Type(HttpVerbs.Put))
                                            .Destroy(destroy => destroy.Action("Delete", "NumeracionSAR", new { IdNumeracion = "{0}" }).Type(HttpVerbs.Delete))

                                        )
                                        .Events(e =>
                                        {
                                            e.Save("onsave");

                                        })
)

<div id="numsar">
    @await Html.PartialAsync("GripEditar", new ERPMVC.DTO.DTO_NumeracionSAR { IdNumeracion = 0, IdCAI = 0, FechaLimite=DateTime.Now })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionSAR").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionSAR").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>



