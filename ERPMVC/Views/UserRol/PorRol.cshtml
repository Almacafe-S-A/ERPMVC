
@{ 
    Layout = null;
}

<script>
   

</script>

@(Html.Kendo().Grid<ERPMVC.Models.ApplicationRole>()
                  .Name("gridUsersRoles")
                  .Columns(columns =>
                  {
                      columns.Bound(p => p.Id).Title("Rol Id").Width(150);
                      columns.Bound(p => p.Name).Title("Rol name").Width(150);

                      //.ClientTemplate("#:RoleName#").EditorTemplateName("RoleId").Width(160)                 
                      //.Filterable(filterable => filterable
                      //                   .Extra(true)
                      //                   .Operators(op => op.ForString(st => st.Clear().Contains("Contiene")))).Width(170).Width(160);
                      //columns.Bound(p => p.RoleName).Width(150);                

                      //  columns.Command(command => {
                      //command.Custom("Ver detalles").Click("Detalles");
                      // command.Edit();
                      //    command.Destroy();
                      //  }).Width(250);

                  })
                  .ToolBar(tools =>
                  {
                       //tools.Create();
                     tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                  .HtmlAttributes(new { @class="k-i-plus-sm", onclick = "AddUserRol();" });

                      tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                      tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                  })
                   .Editable(e => e.Mode(GridEditMode.PopUp))//.TemplateName("popupPorRol"))
               .Sortable()
               .AutoBind(true)
               .Pageable()
               .Filterable()
               .Scrollable()
               .ClientDetailTemplateId("template")
               .Pdf(pdf => pdf.FileName("UsersRolesReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
               .ProxyURL(Url.Action("Export", "Home")).AllPages())
                 .Excel(excel => excel.FileName("UsersRolesReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
               .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
               //.Events(e=>e.Save("onsave"))
               .DataSource(dataSource =>

                   dataSource
                   //.Ajax()
                   .WebApi()
                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.Id);
                        model.Field(p => p.Id).Editable(true);
                        model.Field(p => p.Name).Editable(true);



                    })
                    .Events(events => {
                        events.Error("error_handler");
                        //events.upda("EditHandler");

                    })
                    .Read(read => read.Action("GetRoles", "Roles"))
                    .Create(create => create.Action("Insert", "UserRol"))
                    .Update(update => update.Action("Update", "UserRol", new { id = "{0}" }))
                    .Destroy(destroy => destroy.Action("Delete", "UserRol", new { id = "{0}" }))
              )
)

<script>
 
</script>


<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
      .Name("tabStrip_#=Id#")
      .SelectedIndex(0)
      .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
      .Items(items =>
      {
          items.Add().Text("Usuarios").Content(@<text>
           @(Html.Kendo().Grid<ERPMVC.Models.ApplicationUserRole>()
             .Name("grid_#=Id#")
             .Columns(columns =>
             {
                 columns.Bound(o => o.UserId).Title("ID").Width(80);
                 columns.Bound(o => o.UserName).Width(110);
                 columns.Command(command => {
                     // command.Destroy();
                     command.Custom("Delete").Text("Eliminar").Click("EliminarUsuarioRol");
                 }).Width(250);
             })
             .DataSource(dataSource => dataSource
                .WebApi()
                .ServerOperation(true)
                .PageSize(5)
                .Read(read => read.Action("GetUsersByRoleId", "UserRol", new{ RoleId = "#=Id#" }))
                .Destroy(destroy => destroy.Action("Delete", "UserRol", new {  RoleId="#=Id#" }))
                // .Destroy(destroy => destroy.Action("Delete", "UserRol", new { UserId  = "{0}", RoleId="#=Id#" }))
                )
            .Pageable()
            .Sortable()
            .ToClientTemplate())</text>);
          //     items.Add().Text("Contact Information").Content(
          //    "<div class='employee-details'>" +
          //        "<ul>" +
          //            "<li><label>Country:</label>#= Country #</li>" +
          //            "<li><label>City:</label>#= City #</li>" +
          //            "<li><label>Address:</label>#= Address #</li>" +
          //            "<li><label>Home Phone:</label>#= HomePhone #<li>" +
          //        "</ul>" +
          //    "</div>"
          //);
      }).ToClientTemplate())
</script>

<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
</script>

<style>
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }

    .employee-details ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

        .employee-details ul li {
            margin: 0;
            line-height: 1.7em;
        }

    .employee-details label {
        display: inline-block;
        width: 90px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
    }
</style>