<script>
    function databranch() {
        return {
            BranchId: $("#BranchId").val()
        }
    }

    function AddWarehouse() {
        if ($("#BranchId").val() == 0) {
            alert('No puede agregar una bodega');
            $('#ModalWareHouse').modal('hide');
        }
        else {
         $('#ModalWareHouse').find(':input').not(':submit').val('');
        var grid = $("#gridWarehouse").getKendoGrid();
            grid.dataSource.read();
            $('#ModalWareHouse').modal('show');
        $("#WarehouseId").val('0');
        }
        $("#BranchIdWareHouse").val($("#BranchId").val());      
    }

    function EditWarehouse(e) {
          e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                WarehouseId: dataItem.WarehouseId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwWarehouse", "Warehouse")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#divpvwWarehouse").html('');
                    $("#divpvwWarehouse").html(result);

                
                    //$("#btnCAI").hide();
                    $('#ModalWareHouse').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }



    function RefrescarGridWareHouse() {

        var grid = $("#gridWarehouse").getKendoGrid();
        grid.dataSource.read();

    }

</script>

@(Html.Kendo().Grid<ERPMVC.Models.Warehouse>()
            .Name("gridWarehouse")
            .Columns(columns =>
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    //command.Custom("Editar").Click("EditWarehouse");
                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditWarehouse");
                    //command.Destroy().Text("Eliminar");
                }).Width(170);

                columns.Bound(p => p.WarehouseId).Width(150);
                columns.Bound(p => p.WarehouseName).Width(170);
                columns.Bound(p => p.BranchId).Width(170);
                columns.Bound(p => p.Description).Width(170);
                columns.Bound(p => p.Estado).Width(170);
            })
            .ToolBar(tools =>
            {

                //tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddWarehouse()", @id="IdBoton" });
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

            })
            .Editable(e => e.Mode(GridEditMode.InLine))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("WarehouseReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("WarehouseReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.WarehouseId);
                model.Field(p => p.WarehouseId).Editable(false);


            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("Get", "Warehouse").Data("databranch"))
            .Create(create => create.Action("Insert", "Warehouse").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "Warehouse").Type(HttpVerbs.Post))
            //.Destroy(destroy => destroy.Action("Delete", "Warehouse").Type(HttpVerbs.Post))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)

<div id="divpvwWarehouse">
    @await  Html.PartialAsync("pvwWarehouse.cshtml",new ERPMVC.Models.Warehouse { WarehouseId=0, FechaEmisionPoliza= DateTime.Now, FechaVencimientoPoliza= DateTime.Now} )
</div>