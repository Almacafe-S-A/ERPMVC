@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "SUCURSALES";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

</script>


@(Html.Kendo().Grid<ERPMVC.Models.Branch>
            ()
            .Name("gridNumeracionBranch")
            .Columns(columns =>
            {
                columns.Bound(p => p.BranchId).Width(65);
                columns.Bound(p => p.BranchName).Width(200);
                columns.Bound(p => p.Description).Width(150);
                columns.Bound(p => p.CurrencyId).Width(150);
                columns.Bound(p => p.Address).Width(170);
                columns.Bound(p => p.City).Width(200);
                columns.Bound(p => p.ZipCode).Width(150);
                columns.Bound(p => p.Phone).Width(200);
                columns.Bound(p => p.Email).Width(250);
                columns.Bound(p => p.ContactPerson).Width(200);
                //columns.Bound(p => p.UsuarioCreacion).Width(250);
                //columns.Bound(p => p.UsuarioModificacion).Width(250);
                //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(450);
                //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(450);

                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    command.Edit(); command.Destroy();
                }).Width(250);

            })
            .ToolBar(tools =>
            {
                tools.Create();
                tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("BranchReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("BranchReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
                dataSource
                .WebApi()

                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.BranchId);
                    model.Field(p => p.BranchId).Editable(false);
                    model.Field(p => p.FechaCreacion).Editable(true);
                    model.Field(p => p.UsuarioCreacion).Editable(false);
                    model.Field(p => p.UsuarioModificacion).Editable(false);

                })
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("GetBranch", "Branch"))
                .Create(create => create.Action("Insert", "Branch"))
                .Update(update => update.Action("Update", "Branch", new { BranchId = "{0}" }).Type(HttpVerbs.Put))
                .Destroy(destroy => destroy.Action("Delete", "Branch", new { BranchId = "{0}" }).Type(HttpVerbs.Delete))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)
