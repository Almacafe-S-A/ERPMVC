@using System.Security.Claims


@{
    ViewData["Title"] = "Periodo";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<h3 class="text-themecolor">Periodo</h3>


<script>
     function AddPeriodo() {

         var dataObject = {
             Id: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddPeriodo", "Periodo")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#periodo").html('');
                $("#periodo").html(result);
                $("#btnPeriodo").show();
                $("#Anio").val('');
                //$("#titulo").text("Agregar Nueva Unidad");
                //Mostrar modal con la información
                $('#ModalPeriodo').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

      //-- Editar --
    function EditPeriodo(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            Id: dataItem.Id
        };

        $.ajax({
            url: '@Url.Action("pvwAddPeriodo", "Periodo")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#periodo").html('');
                $("#periodo").html(result);
                $("#btnPeriodo").show();
                $('#ModalPeriodo').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function Delete(e) {
        e.preventDefault();
          if (confirm('¿Esta seguro que desea bloquear el periodo?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
                url: '@Url.Action("Bloquear", "Periodo")',
                method: 'Get',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: '' + errorThrown,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                }
            });
              var grid = $("#gridPeriodo").data("kendoGrid");
            grid.dataSource.remove(dataItem);
          }
    }


    function Bloquear(e) {
        e.preventDefault();
          if (confirm('¿Esta seguro que desea bloquear el periodo?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                    Id : dataItem.Id,
                    IdEstado : 108
                        };
            $.ajax({
                url: '@Url.Action("BloquearDesbloquear", "Periodo")' ,
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: '' + errorThrown,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                }
            });
              
            RefreshGridPerioddo();
          }
    }

    function Desbloquear(e) {
        e.preventDefault();
          if (confirm('¿Esta seguro que desea desbloquear el periodo?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                    Id : dataItem.Id,
                    IdEstado : 105
                        };
            $.ajax({
                url: '@Url.Action("BloquearDesbloquear", "Periodo")' ,
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: '' + errorThrown,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                }
            });
              
            RefreshGridPerioddo();
          }
    }
    function Cerrar(e) {
        e.preventDefault();
          if (confirm('¿Esta seguro que desea desbloquear el periodo?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                    Id : dataItem.Id,
                    IdEstado : 106
                        };
            $.ajax({
                url: '@Url.Action("BloquearDesbloquear", "Periodo")' ,
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: '' + errorThrown,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                }
            });
              
            RefreshGridPerioddo();
          }
    }
    function Reanudar(e) {
        e.preventDefault();
          if (confirm('¿Esta seguro que desea desbloquear el periodo?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                    Id : dataItem.Id,
                    IdEstado : 107
                        };
            $.ajax({
                url: '@Url.Action("BloquearDesbloquear", "Periodo")' ,
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $.toast({
                        heading: 'Validación',
                        text: '' + errorThrown,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                }
            });
              
            RefreshGridPerioddo();
          }
    }


    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (Number(this.IdEstado) == 105 ) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Desbloquear').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Reanudar').hide();
            }

            if (Number(this.IdEstado) == 108 ) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Bloquear').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Reanudar').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Cerrar').hide();
            }

            if (Number(this.IdEstado) == 106 ) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Bloquear').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Cerrar').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Desbloquear').hide();

            }
            if (Number(this.IdEstado) == 107 ) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Bloquear').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Reanudar').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Desbloquear').hide();
            }
        })
    }

</script>

@(Html.Kendo().Grid<ERPMVC.Models.Periodo>
                ()
                .Name("gridPeriodo")
                .Columns(columns =>
                {
                    if (permisos.HasClaim("Contabilidad.Periodo.Abrir", "true"))
                    {
                        columns.Command(command =>
                        {
                            command.Custom("Editar").Text(" ").IconClass("fa fa-eye").Click("EditPeriodo");
                            if (permisos.HasClaim("Contabilidad.Periodo.Bloquear", "true"))
                            {
                                command.Custom("Bloquear").Text(" ").IconClass("fa fa-lock-alt").Click("Bloquear");
                                command.Custom("Desbloquear").Text(" ").IconClass("fa fa-unlock-alt").Click("Desbloquear");
                                
                            }
                            if (permisos.HasClaim("Contabilidad.Periodo.AbrirTemp", "true"))
                            {
                                 command.Custom("Reanudar").Text(" ").IconClass("fa fa-clock").Click("Reanudar");
                                
                            }
                            if (permisos.HasClaim("Contabilidad.Periodo.Cerrar", "true"))
                            {
                                command.Custom("Cerrar").Text(" ").IconClass("fa fa-check").Click("Cerrar");
                                
                            }


                            
                               
                                
                        }).Title("Acciones").Width(150);
                    }
                    //columns.Bound(p => p.Id).Width(130);
                    columns.Bound(p => p.Anio).Title("Año").Width(100);
                    columns.Bound(p => p.Mensaje).Title("Mensaje").Width(300);
                    columns.Bound(p => p.Estado).Width(240);




                })
                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                                   .Clear()
                                                   .Contains("Contiene")
                                                   .DoesNotContain("No contiene")
                                                   .EndsWith("Termina con")
                                                   .IsEqualTo("Es igual a")
                                                   .IsNotEqualTo("No es igual a")
                                                   .IsNull("Es nulo")
                                                   .StartsWith("Inicia con")


                                             )
                                             .ForNumber(n => n
                                               .Clear()
                                               .IsEqualTo("Es igual a")
                                               .IsGreaterThan("Es mayor que")
                                               .IsLessThan("Es menor que")
                                               .IsNull("Es nulo")
                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             )
                                             .ForDate(d => d
                                             .Clear()
                                             .IsEqualTo("Es igual que")
                                             .IsGreaterThan("Es mayor que")
                                             .IsLessThan("Es menor que")
                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             .IsNotEqualTo("No es igual que")
                                              )
                                           ))
                .ToolBar(tools =>
                {
                    // tools.Create();
                    if (permisos.HasClaim("Contabilidad.Periodo.Abrir", "true"))
                    {
                        tools.Custom().Text("Abrir Periodo").IconClass("k-icon k-i-plus")
                                                                       .HtmlAttributes(new { @onclick = "AddPeriodo();" });
                    }
                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                })
                .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                .Sortable()
                .Pageable()
                .Filterable()
                .Scrollable()
                .Pdf(pdf => pdf.FileName("Periodo_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("Periodo_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.IdEstado);
                        model.Field(p => p.IdEstado).Editable(false);
                        model.Field(p => p.FechaCreacion).Editable(true);
                        model.Field(p => p.UsuarioCreacion).Editable(false);
                        model.Field(p => p.UsuarioModificacion).Editable(false);

                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "Periodo"))
                    .Create(create => create.Action("Insert", "Periodo"))
                    .Update(update => update.Action("Update", "Periodo", new { Id = "{0}" }))
                //.Destroy(destroy => destroy.Action("Delete", "Periodo", new { IdEstado = "{0}" }).Type(HttpVerbs.Delete))

                )
                .Events(e => e.DataBound("dataBound"))
)

<div id="periodo">
    @await Html.PartialAsync("pvwAddPeriodo", new ERPMVC.DTO.PeriodoDTO { Id = 0 })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridPeriodo").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridPeriodo").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    Desbloquear


    setRowButtonTooltip(".k-grid-Reanudar", "Abrir Temporalmente");
    setRowButtonTooltip(".k-grid-Cerrar", "Cerrar");

    setRowButtonTooltip(".k-grid-Bloquear", "Bloquear");
    setRowButtonTooltip(".k-grid-Desbloquear", "Desbloquear");
    setRowButtonTooltip(".k-grid-Editar", "Ver ");
    setRowButtonTooltip(".k-grid-Agregar", "Aperturar Período");
</script>
