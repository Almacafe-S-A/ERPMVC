@(Html.Kendo().Grid<ERPMVC.Models.PrecioCafe>
        ()
        .Name("gridPrecioCafe")
        .Columns(columns =>
        {

            columns.Command(command =>
            {
    //command.Custom("Ver detalles").Click("Detalles");
    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditEstado");
                command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
            }).Title("Acciones").Width(100);

            columns.Bound(p => p.Id).Width(130);
            columns.Bound(p => p.Fecha).Width(200);
            columns.Bound(p => p.PrecioBolsaUSD).Width(240);
            columns.Bound(p => p.DiferencialesUSD).Width(200).Visible(false);



})
            .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
        .ToolBar(tools =>
        {
// tools.Create();
tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                   .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEstados()" });
            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


        })
        .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("Estados_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("Estados_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.Id);
                model.Field(p => p.Id).Editable(false);
                model.Field(p => p.FechaCreacion).Editable(true);
                model.Field(p => p.UsuarioCreacion).Editable(false);
                model.Field(p => p.UsuarioModificacion).Editable(false);

            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("Get", "PrecioCafes"))
            .Create(create => create.Action("Insert", "Estados").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Put))
            .Destroy(destroy => destroy.Action("Delete", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Delete))

        )
        .Events(e =>
        {
            e.Save("onsave");

        })
)