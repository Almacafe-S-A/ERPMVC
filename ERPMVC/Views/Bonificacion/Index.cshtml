@{
    ViewData["Title"] = "Otros Ingresos y Bonificaciones";
    var today = DateTime.Today;
    var periodo = (int) (TempData.ContainsKey("Periodo")? TempData["Periodo"] : today.Year);
    var mes = (int) (TempData.ContainsKey("Mes") ? TempData["Mes"] : today.Month);
    var inactivo = (bool)(TempData.ContainsKey("Inactivo")? TempData["Inactivo"] : false);
    var meses = new[] {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
}
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h3 class="text-themecolor">Otros Ingresos y Bonificaciones</h3>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col">
            <h4>Filtro de Bonificaciones</h4>
        </div>
    </div>

    <form id="frmFiltroBono" kendo-validator="true" method="post" action="@Url.Action("PostFiltro", "Bonificacion")">
        <div class="row">
            <div class="col-md-3 col-sm-12">
                <label for="Periodo">Año:</label>
                <input id="Periodo" name="Periodo" value="@periodo" />
            </div>

            <div class="col-md-3 col-sm-12">
                <label for="Mes">Mes:</label>
                <select id="Mes" name="Mes">
                    <option value="1">Enero</option>
                    <option value="2">Febrero</option>
                    <option value="3">Marzo</option>
                    <option value="4">Abril</option>
                    <option value="5">Mayo</option>
                    <option value="6">Junio</option>
                    <option value="7">Julio</option>
                    <option value="8">Agosto</option>
                    <option value="9">Septiembre</option>
                    <option value="10">Octubre</option>
                    <option value="11">Noviembre</option>
                    <option value="12">Diciembre</option>
                </select>
            </div>

            <div class="col-md-3 col-sm-12">
                <input type="submit" value="Filtrar" class="btn btn-primary" />
            </div>
        </div>
    </form>

    <div class="row mt-4">
        <div class="col">
            <h4>Bonificaciones de @meses[mes - 1] de @periodo </h4>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col">
            <div class="row">
                <div id="grdConfiguracion"></div>
            </div>
        </div>
    </div>
</div>


@(Html.Kendo().Grid<ERPMVC.Models.Bonificacion>()
                  .Name("grdConfiguracion").NoRecords()
                  .Columns(columns =>
                  {
                      {
                          columns.Command(command =>
                          {
                              command.Edit().Text(" ").IconClass("fa fa-edit");
                          }).Width(90).Title("Acciones");
                      }
                      columns.Bound(p => p.EmpleadoId).Title("ID").Width(60);
                      columns.Bound(p => p.Empleado).Title("Empleado")
                      .ClientTemplate("#=typeof Empleado === 'undefined'||Empleado===null?null:Empleado.NombreEmpleado#").Width(180);
                      columns.Bound(p => p.Tipo).Title("Tipo Otros Ingresos o Bonificaciones")
                      .ClientTemplate("#=typeof Tipo === 'undefined'||Tipo===null?null:Tipo.Nombre#").Width(180);
                      columns.Bound(p => p.Cantidad).Title("Cantidad").Width(120)
                      .HtmlAttributes(new Dictionary<string, object> { ["style"] = "text-align: right;" });
                      columns.Bound(p => p.Tipo.Valor).Title("Valor Bono").Width(120)
                      .HtmlAttributes(new Dictionary<string, object> { ["style"] = "text-align: right;" })
                      .ClientTemplate("#=typeof Tipo === 'undefined'||Tipo===null?null:Tipo.Valor#");
                      columns.Bound(p => p.Monto).Title("Monto").Width(100).ClientFooterTemplate("#=totalColumnas(1,1)#")
                      .HtmlAttributes(new Dictionary<string, object> { ["style"] = "text-align: right;" })
                      .FooterHtmlAttributes(new Dictionary<string, object> { ["style"] = "text-align: right;" });
                      columns.Bound(p => p.NombreQuincena).Title("Quincena").Width(110);
                      columns.Bound(p => p.Estado).Title("Estado").Width(110)
                      .ClientTemplate("#=typeof Estado === 'undefined'||Estado===null?null:Estado.NombreEstado#");
                  }).Filterable(f => f.Operators(o => o.ForString(s => s
                                         .Clear()
                                         .Contains("Contiene")
                                         .DoesNotContain("No contiene")
                                         .EndsWith("Termina con")
                                         .IsEqualTo("Es igual a")
                                         .IsNotEqualTo("No es igual a")
                                         .IsNull("Es nulo")
                                         .StartsWith("Inicia con")
                                   )
                                     .ForNumber(n => n
                                     .Clear()
                                     .IsEqualTo("Es igual a")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsNull("Es nulo")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                   )
                                   .ForDate(d => d
                                   .Clear()
                                   .IsEqualTo("Es igual que")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                   .IsNotEqualTo("No es igual que")
                                    )
                                 ))
                                 .ToolBar(tools =>
                              {
                                  tools.Create().Text("Agregar").IconClass("k-icon k-i-plus")
                                     .HtmlAttributes(new { @class = "k-i-plus-sm"});
                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                              })
                    .Editable(e => e.Mode(GridEditMode.InLine))
                    .Sortable()
                    .AutoBind(true)
                    .Pageable(p => p.Input(true))
                    .Resizable(s => s.Columns(true))
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("BonificacionReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .DataSource(dataSource =>
                   dataSource
                   //.Ajax()
                   .WebApi()
                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.Id);
                        model.Field(p => p.Id).Editable(false);
                        model.Field(p => p.EmpleadoId).Editable(false);
                        model.Field(p => p.Monto).Editable(false);
                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("GetBonificacionesMesPeriodo", "Bonificacion").Data("Parametros"))
                    .Update(update => update.Action("Guardar", "Bonificacion").Type(HttpVerbs.Post).Data("Parametros"))
                    .Create(create => create.Action("Guardar", "Bonificacion").Type(HttpVerbs.Post).Data("Parametros"))
              ).Events(e => e.Save("RefrescarGrid"))
)

<script>
    $(document).ready(function () {
        $("#Periodo").kendoNumericTextBox({ spinners: false, decimals:0, restrictDecimals:true, format:"0000" });


        // Obtiene el elemento select por su id
        var selectMes = document.getElementById('Mes');

        // Obtiene el mes actual (de 1 a 12, donde enero es 1 y diciembre es 12)
        var mesActual = new Date().getMonth() + 1;

        // Establece el valor del select al mes actual
        selectMes.value = mesActual.toString();
    });

    function Validar(e) {
        debugger;
        if (e.model.Cantidad <= 0) {
             MostrarMensaje("La Cantidad debe ser mayor que 0", "Error", "Error", 6000);
            e.preventDefault();
            return false;
        }
    }
    function Parametros(data) {
        return{
        Periodo: @periodo,
            Mes: @mes

        }
    }

    function totalColumnas(tiporesultado, moneda) {
        var data = $("#grdConfiguracion").getKendoGrid().dataSource.data();
        var total = 0;

        switch (tiporesultado) {
            case 1:
                data.forEach(r => total += r.Monto);
                break;
            default:
                break;
        }
        var formatter = new Intl.NumberFormat('es-HN', {
            style: 'currency',
            currency: 'LPS',
            minimumFractionDigits: 2
        });
        if (moneda == 1) {
            return formatter.format(total);
        }
        if (moneda == 2) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2
            });
            return formatter.format(total);
        }
        if (moneda == 0) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'LPS',
                minimumFractionDigits: 2
            });
            return formatter.format(total).replace(/[a-z]{3}/i, "").trim();
        }
        return total;
    }

    function RefrescarGrid() {
        debugger;
        var grid = $("#grdConfiguracion").data("kendoGrid").dataSource.read();


    }

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#grdConfiguracion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#grdConfiguracion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltip(".k-grid-edit", "Editar Registro");
    //setRowButtonTooltip(".k-grid-delete", "Eliminar");
    setRowButtonTooltip(".k-grid-update", "Guardar Registro");
    setRowButtonTooltip(".k-grid-cancel", "Cancelar");
</script>
