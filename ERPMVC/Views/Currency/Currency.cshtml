@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Currency";

}

<script>

   

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

     function AddCurrency() {

         $('#ModalCurrency').find(':input').not(':submit').val('');
         $('#ModalCurrency').modal('show');
         $("#CurrencyId").val('0');
         $("#IdEstado").data("kendoDropDownList").value(0);

         var validator = $("#frmCurrency").data("kendoValidator");
         validator.hideMessages();



    }

    
    function EditCurrency(e) {
        debugger;
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CurrencyId: dataItem.CurrencyId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddCurrency", "Currency")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#numCurrency").html('');
                    $("#numCurrency").html(result);

                
                    //$("#btnCAI").hide();
                    $('#ModalCurrency').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function RefrescarGrid() {

        var grid = $("#gridCurrency").getKendoGrid();
        grid.dataSource.read();
    }


    function Delete(e) {
        debugger;
 

      
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));


            var dataObject = {
                CurrencyId: dataItem.CurrencyId
            }

            debugger;
            $.ajax({
                url: '@Url.Action("Delete", "Currency")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $.toast({
                    heading: 'Satisfactorio',
                    text: '<br/><br/>Se elimino correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });
                    debugger;
                    console.log(data)
                },
                
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

 

                }
            });
        }

        var grid = $("#gridCurrency").getKendoGrid();
        grid.dataSource.read();
    }

   

</script>

<h3 class="text-themecolor">Moneda</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Currency>
          ()

            .Name("gridCurrency")

            .Columns(columns =>
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCurrency");
                    command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                }).Title("Acciones").Width(250);
                columns.Bound(p => p.CurrencyId).Width(150);
                columns.Bound(p => p.CurrencyName).Width(170);
                columns.Bound(p => p.CurrencyCode).Width(170);
                columns.Bound(p => p.Description).Width(200);
                columns.Bound(p => p.Estado).Width(150);
                columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy HH:mm:ss}").Width(100).Hidden();

                //columns.Bound(p => p.UsuarioCreacion).Width(170);
                //columns.Bound(p => p.UsuarioModificacion).Width(190);


            })


            .ToolBar(tools =>
            {

                //tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                              .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCurrency()" });
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("CurrencyReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("CurrencyReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.CurrencyId);
                model.Field(p => p.CurrencyId).Editable(false);


            })
            .Sort(s => s.Add(m => m.FechaCreacion).Descending())
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("Get", "Currency"))
            .Create(create => create.Action("Insert", "Currency").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "Currency").Type(HttpVerbs.Post))
            .Destroy(destroy => destroy.Action("Delete", "Currency", new { CurrencyId = "{0}" }).Type(HttpVerbs.Delete))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCurrency").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCurrency").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    setToolbarTooltip(".k-grid-Agregar", "Agregar un nuevo registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Editar registro");

</script>

<div id="numCurrency">
    @await Html.PartialAsync("pvwAddCurrency", new ERPMVC.DTO.CurrencyDTO { CurrencyId = 0 })
</div>