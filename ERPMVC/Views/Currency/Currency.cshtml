@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Currency";

}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

     function AddCurrency() {

         $('#ModalCurrency').find(':input').not(':submit').val('');
         $('#ModalCurrency').modal('show');
         $("#CurrencyId").val('0');




    }

    
         function EditCurrency(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CurrencyId: dataItem.CurrencyId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddCurrency", "Currency")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#numCurrency").html('');
                    $("#numCurrency").html(result);

                
                    //$("#btnCAI").hide();
                    $('#ModalCurrency').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }


</script>

<h3 class="text-themecolor">Moneda</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Currency>
          ()

            .Name("gridCurrency")

            .Columns(columns =>
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    command.Custom("Editar").Click("EditCurrency");
                    command.Destroy();
                }).Width(250);
                columns.Bound(p => p.CurrencyId).Width(150);
                columns.Bound(p => p.CurrencyName).Width(170);
                columns.Bound(p => p.CurrencyCode).Width(170);
                columns.Bound(p => p.Description).Width(200);
                columns.Bound(p => p.Estado).Width(150);

                //columns.Bound(p => p.UsuarioCreacion).Width(170);
                //columns.Bound(p => p.UsuarioModificacion).Width(190);


            })


            .ToolBar(tools =>
            {

                //tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                              .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCurrency()" });
                tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("CurrencyReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("CurrencyReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.CurrencyId);
                model.Field(p => p.CurrencyId).Editable(false);


            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("Get", "Currency"))
            .Create(create => create.Action("Insert", "Currency").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "Currency").Type(HttpVerbs.Post))
            .Destroy(destroy => destroy.Action("Delete", "Currency", new { CurrencyId = "{0}" }).Type(HttpVerbs.Delete))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)

<div id="numCurrency">
    @await Html.PartialAsync("pvwAddCurrency", new ERPMVC.DTO.CurrencyDTO { CurrencyId = 0 })
</div>