@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Cuentas Bancarias";
    bool permisoAgregar, permisoEditar, permisoEliminar, permisoExportar;
    permisoAgregar = (bool)ViewData["permisoAgregar"];
    permisoEditar = (bool)ViewData["permisoEditar"];
    permisoEliminar = (bool)ViewData["permisoEliminar"];
    permisoExportar = (bool)ViewData["permisoExportar"];
}


<script>
    //$(document).ready(function () {
    //    $("#AccountTypeAlert").hide();
    //});
    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        //data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        //data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddAccountManagement() {

        $('#ModalAccountManagement').find(':input').not(':submit').val('');
        //$('#ModalCheckAccount').modal('show');
        var validator = $("#frmAccountManagement").data("kendoValidator");
        validator.hideMessages();
        $("#AccountManagementId").val('0');
        $("#TypeAccountId").data("kendoDropDownList").value(0);
        $("#Status").data("kendoDropDownList").value(0);
        var dataObject = {
            AccountManagementId: 0,
            editar: 0
        };
         $.ajax({
                url: '@Url.Action("pvwAddAccountManagement", "AccountManagement")',
                method: 'POST', 
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumAccountManagement").html('');
                    $("#NumAccountManagement").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalAccountManagement').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });

    }


    function EditAccountManagement(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                AccountManagementId: dataItem.AccountManagementId,
                AccountType: 'AccountType',
                Status: $("#Status").val(),
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddAccountManagement", "AccountManagement")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumAccountManagement").html('');
                    $("#NumAccountManagement").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalAccountManagement').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }
    function DeleteAccountManagement(e) {
        if (confirm('¿Esta seguro que desea eliminar este registro?')) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                AccountManagementId: dataItem.AccountManagementId
            };

            $.ajax({
                url: '@Url.Action("Delete", "AccountManagement")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    RefrescarGrid();
     
                    
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
        }
    }
    function RefrescarGrid() {
        var grid = $("#gridAccountManagement").getKendoGrid();
        grid.dataSource.read();
    }



</script>

<h3 class="text-themecolor">Cuentas Bancarias</h3>
@(Html.Kendo().Grid<ERPMVC.Models.AccountManagement>
                                    ()
                                    .Name("gridAccountManagement")
                                    .Columns(columns =>
                                    {
                                        if (permisoEditar == true || permisoEliminar == true)
                                        {
                                            columns.Command(command =>
                                            {
                                                //command.Custom("Ver detalles").Click("Detalles");
                                                if (permisoEditar)
                                                {
                                                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditAccountManagement");
                                                }
                                                if (permisoEliminar)
                                                {
                                                    command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash").Click("DeleteAccountManagement");
                                                }
                                                // command.Destroy().Text(" ").IconClass("fa fa-trash");

                                            }).Width(95).Title("Acciones");
                                        }
                                        columns.Bound(p => p.AccountManagementId).Title("Id").Width(50);
                                        columns.Bound(p => p.OpeningDate).Format("{0:dd/MM/yyyy}").Width(155);
                                        columns.Bound(p => p.AccountType).Title("Tipo de Cuenta").Width(140);
                                        columns.Bound(p => p.AccountNumber).Title("Número de Cuenta").Width(155);
                                        columns.Bound(p => p.BankName).Title("Institución Financiera").Width(165);
                                        //columns.Bound(p => p.CurrencyName).Width(100);
                                        //columns.Bound(p => p.Description).Width(100);
                                        columns.Bound(p => p.Status).Title("Estado").Width(80);
                                        columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy HH:mm:ss}").Width(100).Hidden();






                                    })
                                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                                               .Clear()
                                                               .Contains("Contiene")
                                                               .DoesNotContain("No contiene")
                                                               .EndsWith("Termina con")
                                                               .IsEqualTo("Es igual a")
                                                               .IsNotEqualTo("No es igual a")
                                                               .IsNull("Es nulo")
                                                               .StartsWith("Inicia con")


                                                         )
                                                         .ForNumber(n => n
                                                           .Clear()
                                                           .IsEqualTo("Es igual a")
                                                           .IsGreaterThan("Es mayor que")
                                                           .IsLessThan("Es menor que")
                                                           .IsNull("Es nulo")
                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         )
                                                         .ForDate(d => d
                                                         .Clear()
                                                         .IsEqualTo("Es igual que")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         .IsNotEqualTo("No es igual que")
                                                          )
                                                       ))
                                    .ToolBar(tools =>
                                    {
                                        // tools.Create();
                                        if (permisoAgregar)
                                        {
                                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                    .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddAccountManagement()" });
                                        }
                                        if (permisoExportar)
                                        {
                                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                        }
                                    })
                                    .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .Pageable()
                                    .Filterable()
                                    .Scrollable()
                                    .Pdf(pdf => pdf.FileName("Cuentas-Bancarias-Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                        .Excel(excel => excel.FileName("Cuentas-Bancarias-Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    .DataSource(dataSource =>
                                        dataSource
                                        .WebApi()

                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.AccountManagementId);
                                            model.Field(p => p.AccountManagementId).Editable(false);
                                            model.Field(p => p.FechaCreacion).Editable(true);
                                            model.Field(p => p.UsuarioCreacion).Editable(false);
                                            model.Field(p => p.UsuarioModificacion).Editable(false);

                                        })
                                        .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                                        .Events(events => events.Error("error_handler"))
                                        .Read(read => read.Action("GetAccountManagement", "AccountManagement"))
                                        .Create(create => create.Action("Insert", "AccountManagement"))
                                        .Update(update => update.Action("Update", "AccountManagement").Type(HttpVerbs.Put))
                                        .Destroy(destroy => destroy.Action("Delete", "AccountManagement").Type(HttpVerbs.Post))

                                    )
                                    .Events(e =>
                                    {
                                        e.Save("onsave");

                                    })
)
<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridAccountManagement").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridAccountManagement").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>
<div id="NumAccountManagement">
    @await Html.PartialAsync("pvwAddAccountManagement", new ERPMVC.DTO.AccountManagementDTO { AccountManagementId = 0, FechaCreacion = DateTime.Now })
</div>

