@using Kendo.Mvc.UI
@using System.Security.Claims

@{
    ViewData["Title"] = "Países GAFI";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddCountry() {

       var dataObject = {
            Id: 0,
            editar: 1
        };

        $.ajax({
            url: '@Url.Action("pvwAddCountry", "Alert")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numCountry").html('');
                $("#numCountry").html(result);

                $('#ModalCountry').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }


    function EditCountry(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            Id: dataItem.Id,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddCountry", "Alert")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numCountry").html('');
                $("#numCountry").html(result);


                //$("#btnCAI").hide();
                $('#ModalCountry').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

        function DeleteCountry(e) {
        if (confirm('¿Esta seguro que desea eliminar este registro?')) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                Id: dataItem.Id,
                editar: 0
            };
            $.ajax({
                url: '@Url.Action("Delete", "Country")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    RefrescarGrid();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    if (XMLHttpRequest.responseText == "No se puede eliminar este registro porque está siendo utilizado.") {
                        $.toast({
                            heading: 'Validación',
                            text: "No se puede eliminar este registro porque está siendo utilizado.",
                            position: 'top-right',
                            loaderBg: '#ff6849',
                            icon: 'error',
                            hideAfter: 30000,
                            stack: 6
                        });
                    }
                    else {
                        $.toast({
                            heading: 'Error',
                            text: textStatus + ": " + XMLHttpRequest.responseText,
                            position: 'top-right',
                            loaderBg: '#ff6849',
                            icon: 'error',
                            hideAfter: 30000,
                            stack: 6
                        });
                    }
                }
            });
        }
    }

    function RefrescarGrid() {
        var grid = $("#gridCountry").getKendoGrid();
        grid.dataSource.read();
    }

    function EsGafi() {
        return { GAFI: true }
    }


</script>

<h3 class="text-themecolor">Países de alto riesgo segun GAFI</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Country>()
        .Name("gridCountry")

        .Columns(columns =>
        {
            if (permisos.HasClaim("Monitoreo.Paises GAFI.Editar Paises GAFI", "true")
            || permisos.HasClaim("Monitoreo.Paises GAFI.Eliminar Paises GAFI", "true"))
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    if (permisos.HasClaim("Monitoreo.Paises GAFI.Editar Paises GAFI", "true"))
                    {
                        command.Custom("Editar").Text(" ").Click("EditCountry").IconClass("fa fa-edit");
                    }
                    if (permisos.HasClaim("Monitoreo.Paises GAFI.Eliminar Paises GAFI", "true"))
                    {
                        command.Custom("Eliminar").Text(" ").Click("DeleteCountry").IconClass("fa fa-trash-alt");
                        //command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                    }
                }).Width(150).Title("Acciones");
            }
            columns.Bound(p => p.Id).Width(100);
            columns.Bound(p => p.SortName).Width(250).Title("Nombre de clasificación");
            columns.Bound(p => p.Name).Width(170);
            // columns.Bound(p => p.PhoneCode).Width(170);
            columns.Bound(p => p.NivelRiesgoName).Width(170);
            columns.Bound(p => p.AccionName).Width(200);
            columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(200);
            columns.Bound(p => p.ListaName).Width(170);
            columns.Bound(p => p.TipoAlertaName).Width(170);
        })


        .ToolBar(tools =>
        {

            //tools.Create();
            if (permisos.HasClaim("Monitoreo.Paises GAFI.Agregar Paises GAFI", "true"))
            {
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCountry()" });
            }
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


        })
        .Editable(e => e.Mode(GridEditMode.PopUp))
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("CountryReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
        .Excel(excel => excel.FileName("CountryReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
        dataSource
        .WebApi()

        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.Id);
            model.Field(p => p.Id).Editable(false);


        })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("Get", "Country").Data("EsGafi"))
        .Create(create => create.Action("Insert", "Country").Type(HttpVerbs.Post))
        .Update(update => update.Action("Update", "Country").Type(HttpVerbs.Post))
        .Destroy(destroy => destroy.Action("Delete", "Country").Type(HttpVerbs.Post))

        )
        .Events(e =>
        {
            e.Save("onsave");

        })
)

<div id="numCountry">
    @await Html.PartialAsync("pvwAddCountry", new ERPMVC.DTO.CountryDTO { Id = 0, GAFI = true, Actualizacion = DateTime.Now })
</div>


<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCountry").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCountry").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>