@model ERPMVC.DTO.InsurancesCertificateDTO


@{ Layout = null;
    var messages = new Dictionary<string, string>() { { "custom", "Ingrese un valor correcto." },
{"required","Valor requerido" }
};
    var rules = new Dictionary<string, string>() { { "custom", "customFunction" } };
}

<script>

    function customFunction(input) {

        if (input.attr('name') === "InsurancesCertificateId" && input.val() === "0") {
            return false;
        }

        //dropdownlist3.selected

        // Dropchange();

    }




</script>


@*
    <div id="divOFACFind">
        @await Html.PartialAsync("~/Views/OFAC/Index.cshtml")
    </div>

    <div id="divOFACFindIdentity">
        @await Html.PartialAsync("~/Views/OFAC/ListOfacIdentity.cshtml")
    </div>*@


<div id="ModalInsurancesCertificate" class="modal fade" role="dialog">
    <!-- Modal content-->
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" name="btnprueba" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Datos de Poliza de Seguro</h4>
            </div>
            <div class="modal-body">

                <div class="row" id="validation">
                    <div class="col-lg-12">
                        <div class="card">
                            <div class="card-body">
                                <form id="frmInsurancesCertificate" kendo-validator="true" kendo-messages="messages"
                                      data-ajax="true"
                                      data-ajax-method="post"
                                      data-ajax-begin="SaveInsurancesCertificate"
                                      class="validation-wizard wizard-circle">
                                    <div class="form-body">
                                        <h3 class="card-title">Poliza de Seguro</h3>
                                        <hr>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label asp-for="InsurancesCertificateId" class=" control-label" style="width:100%"></label>
                                                    <input type="text" asp-for="InsurancesCertificateId" id="InsurancesCertificateId"  name="InsurancesCertificateId" class="form-control" disabled="disabled" style="min-width:100%" />
                                                    <span asp-validation-for="InsurancesCertificateId" class="text-danger"></span>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label asp-for="InsurancesId" class="control-label" style="width:100%"></label>
                                                    <kendo-dropdownlist name="InsurancesId"
                                                                        for="@Model.InsurancesId"
                                                                        filter="Kendo.Mvc.UI.FilterType.Contains"
                                                                        option-label="Seleccionar Aseguradora"
                                                                        auto-bind="true"
                                                                        datatextfield="InsurancesName"
                                                                        required
                                                                        datavaluefield="InsurancesId" style="min-width:100%">
                                                        <datasource type="DataSourceTagHelperType.WebApi" server-operation="true">
                                                            <transport>
                                                                <read url="@Url.Action("Get", "Insurances")" />
                                                            </transport>
                                                        </datasource>
                                                    </kendo-dropdownlist>
                                                    @*  <span asp-validation-for="VendorName" class="text-danger"></span>
                                                    *@
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label asp-for="NoPoliza" class=" control-label" style="width:100%"></label>
                                                    <input asp-for="NoPoliza" name="NoPoliza" required class="form-control" autocomplete="off" style="min-width:100%" onkeypress="return SoloNumeros(event)" />
                                                    <span asp-validation-for="NoPoliza" class="text-danger k-invalid-msg" data-for="RTN"></span>


                                                </div>

                                            </div>


                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label asp-for="BeginDateofInsurance" class=" control-label" style="width:100%"></label>
                                                    <kendo-datetimepicker name="BeginDateofInsurance"
                                                                          style="width: 100%;"
                                                                          format="dd/MM/yyyy hh:mm:ss"
                                                                          time-format="hh:mm:ss"
                                                                           readonly
                                                                          data-val-required="La fecha es requerida"
                                                                          value="Model.BeginDateofInsurance"/>
                                                    <span asp-validation-for="BeginDateofInsurance" class="text-danger"></span>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label asp-for="EndDateofInsurance" class=" control-label" style="width:100%"></label>
                                                    <kendo-datetimepicker name="EndDateofInsurance"
                                                                          style="width: 100%;"
                                                                          format="dd/MM/yyyy hh:mm:ss"
                                                                          time-format="hh:mm:ss"
                                                                          readonly
                                                                          data-val-required="La fecha es requerida"
                                                                          value="Model.EndDateofInsurance"/>
                                                    <span asp-validation-for="EndDateofInsurance" class="text-danger"></span>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-group">
                                                    <label asp-for="DateofInsurance" class=" control-label" style="width:100%"></label>
                                                    <kendo-datetimepicker name="DateofInsurance"
                                                                          style="min-width: 100%;"
                                                                          format="dd/MM/yyyy hh:mm:ss"
                                                                          time-format="hh:mm:ss"
                                                                          readonly
                                                                          data-val-required="La fecha es requerida"
                                                                          value="Model.DateofInsurance"/>
                                                    <span asp-validation-for="DateofInsurance" class="text-danger"></span>
                                                </div>
                                            </div>







                                        </div>
                                        <div class="row">
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label asp-for="Ratedeductible" class=" control-label" style="width:100%"></label>
                                                    <kendo-numerictextbox name="Ratedeductible"
                                                                          for="@Model.Ratedeductible"
                                                                          format="n4" spinners="false"
                                                                            decimals="4"
                                                                          min="0"
                                                                          auto-bind="true"
                                                                          required class="control-label right bold"
                                                                          style="min-width: 100%;text-align:right;padding-right: 3px"
                                                                          max="999999999"/>
                                                    <span asp-validation-for="Ratedeductible" class="text-danger"></span>

                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label asp-for="RateInsurance" class=" control-label" style="width:100%"></label>
                                                    <kendo-numerictextbox name="RateInsurance"
                                                                          format="n4" spinners="false"
                                                                          decimals="4"
                                                                          min="0"
                                                                          required 
                                                                          class="control-label right bold"
                                                                          style="width: 100%;text-align:right;padding-right: 3px"
                                                                          max="999999999"
                                                                          for="@Model.RateInsurance"/>
                                                    <span asp-validation-for="RateInsurance" class="text-danger"></span>

                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label asp-for="RateofProduct" class=" control-label" style="width:100%"></label>
                                                    <kendo-numerictextbox name="RateofProduct"
                                                                          format="n4" spinners="false"
                                                                            decimals="4"
                                                                          min="0"
                                                                          required 
                                                                          class="control-label right bold"
                                                                          style="width: 100%;text-align:right;padding-right: 3px"
                                                                          max="999999999"
                                                                          for="@Model.RateofProduct"/>
                                                    <span asp-validation-for="RateofProduct" class="text-danger"></span>

                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label asp-for="QtyofMonths" class=" control-label" style="width:100%"></label>
                                                    <kendo-numerictextbox name="QtyofMonths"
                                                                          format="n0" spinners="false"
                                                                          min="0"
                                                                          required 
                                                                          class="control-label right bold"
                                                                          style="width: 100%;text-align:right;padding-right: 3px"
                                                                          max="999999999"
                                                                          for="@Model.QtyofMonths"/>
                                                    <span asp-validation-for="QtyofMonths" class="text-danger"></span>

                                                </div>
                                            </div>

                                        </div>


                                        <div class="row">
                                            <div class="col-md-12">
                                                <button id="btnInsurancesCertificate" class="form-control btn-miboton" type="submit"> Guardar </button>
                                            </div>
                                        </div>



                                    </div>
                                </form>
                            </div>


                        </div>
                    </div>
                </div>
            </div>
            <div id="InsurancesCertificateLine">

                @await Html.PartialAsync("~/Views/InsurancesCertificate/pvwInsurancesCertificateDetailMant.cshtml", new ERPMVC.DTO.InsurancesCertificateLineDTO { InsurancesCertificateLineId = 0, InsurancesCertificateId = @Model.InsurancesCertificateId })
            </div>
            <div id="Certificate">

                @await Html.PartialAsync("~/Views/InsurancesCertificate/pvwInsurancesCertificateDetailCertificate.cshtml", new ERPMVC.DTO.InsurancesCertificateLineDTO { InsurancesCertificateLineId = 0, InsurancesCertificateId = @Model.InsurancesCertificateId })
            </div>

            <div class="modal-body">
                <div class="row" id="validation">
                    <div class="col-lg-12">
                        <div class="card">
                            <div class="card-body">
                                @(Html.Kendo().Grid<ERPMVC.DTO.InsurancesCertificateLineDTO>()
                                                                           .Name("gridInsurancesCertificateDetail")
                                                                           .Columns(columns =>
                                                                           {
                                                                              /* columns.Command(command =>
                                                                               {
                                                                                   if (Model.editar == 1)
                                                                                   {

                                                                                    //   command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                                   }

                                                                                   //   command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                                                   // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                                   //  command.Edit(); command.Destroy();
                                                                               }).Width(100);
                                */
                                                                               columns.Bound(p => p.InsurancesCertificateLineId).Title("Id Line").Visible(false).Width(0);
                                                                               columns.Bound(p => p.InsurancesCertificateId).Title("Certificado Id").Visible(false).Width(0);

                                                                               //columns.Bound(p => p.BranchId).Title("Sucursal").Width(300);
                                                                               columns.Bound(p => p.WarehouseId).Title("Bodega").Width(300);
                                                                               columns.Bound(p => p.TotalInsurancesLine).Format("{0:n2}").Title("Valor Asegurado").Width(200);
                                                                               columns.Bound(p => p.TotaldeductibleLine).Format("{0:n2}").Title("Deducible").Width(200);
                                                                               columns.Bound(p => p.TotalofProductLine).Format("{0:n2}").Title("Valor Fisico").Width(200);
                                                                              // columns.Bound(p => p.CustomerId).Title("Cliente").Width(300);

                                                                               columns.Bound(p => p.TotalInsurancesofProductLine).Format("{0:n2}").Title("Valor Asegurado").Width(200);
                                                                               columns.Bound(p => p.DifferenceTotalofProductInsuranceLine).Format("{0:n2}").Title("Diferencia Asegurada").Width(200);
                                                                               columns.Bound(p => p.TotaldeductibleofProduct).Format("{0:n2}").Title("Deducible").Width(200);
                                                                               //columns.Bound(p => p.TotalCantidad).Title("Total Cantidad");
                                                                               //columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(150);
                                                                               //columns.Bound(p => p.SubTotal).Title("Sub Total").Width(150);
                                                                               //columns.Bound(p => p.DiscountAmount).Title("Descuentos").Width(150);
                                                                               //columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(150);
                                                                               //columns.Bound(p => p.tax).Title("Tipo Impuesto").Width(150);
                                                                               // columns.Bound(p => p.TaxAmount).Title("Impuestos").Width(150);
                                                                               //columns.Bound(p => p.Total).Title("Total").Width(150);

                                                                           })
                                                                               .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                        .Clear()
                                                                        .Contains("Contiene")
                                                                        .DoesNotContain("No contiene")
                                                                        .EndsWith("Termina con")
                                                                        .IsEqualTo("Es igual a")
                                                                        .IsNotEqualTo("No es igual a")
                                                                        .IsNull("Es nulo")
                                                                        .StartsWith("Inicia con")


                                                                  )
                                                                  .ForNumber(n => n
                                                                    .Clear()
                                                                    .IsEqualTo("Es igual a")
                                                                    .IsGreaterThan("Es mayor que")
                                                                    .IsLessThan("Es menor que")
                                                                    .IsNull("Es nulo")
                                                                    .IsLessThanOrEqualTo("Es menor o igual que")
                                                                    .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                  )
                                                                  .ForDate(d => d
                                                                  .Clear()
                                                                  .IsEqualTo("Es igual que")
                                                                  .IsGreaterThan("Es mayor que")
                                                                  .IsLessThan("Es menor que")
                                                                  .IsLessThanOrEqualTo("Es menor o igual que")
                                                                  .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                  .IsNotEqualTo("No es igual que")
                                                                   )
                                                                ))
                                                                           .ToolBar(tools =>
                                                                           {
                                                                               // if (Model.editar == 1)
                                                                               //{
                                                                               tools.Custom().Text("Agregar Bodega").IconClass("k-icon k-i-plus")
                                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddInsurancesCertificateLine()" });
                                                                               tools.Custom().Text("Agregar Certificado").IconClass("k-icon k-i-plus")
                                                                                              .HtmlAttributes(new { @class = "k-i-plus-sm",  onclick = "AddCertificate();" });

                                                                               // }

                                                                               tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                               tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                                                           })
                                                                            .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                             .Sortable()
                                                                             .AutoBind(true)
                                                                             .Pageable()
                                                                             .Filterable()
                                                                             .Scrollable()
                                                                             // .ClientDetailTemplateId("template")
                                                                             .Pdf(pdf => pdf.FileName("InsurancesCertificateLineDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                             + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                             .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                               .Excel(excel => excel.FileName("InsurancesCertificateLineDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                             + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                             .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                             //.Events(e=>e.Save("onsave"))
                                                                             .DataSource(dataSource =>

                                                                            dataSource
                                                                            //.Ajax()
                                                                            .WebApi()

                                                                             .ServerOperation(true)
                                                                             .Model(model =>
                                                                             {
                                                                                 model.Id(p => p.InsurancesCertificateLineId);
                                                                                 model.Field(p => p.InsurancesCertificateId).Editable(false);
                                                                                 //  model.Field(p => p.IdCD).Editable(false);

                                                                             })
                                                                             .Events(events =>
                                                                             {
                                                                                 events.Error("error_handler");
                                                                                 //events.upda("EditHandler");

                                                                             })
                                                                             .Read(read => read.Action("GetInsurancesCertificateLineById", "InsurancesCertificateLine").Data("GetInsurancesCertificateId"))
//.Create(create => create.Action("Insert", "SalesOrderLine"))
//.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
//.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
//"~/Views/OFAC/ListOfacIdentity.cshtml"
)
                                )



                            </div>


                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>




<script>
  
    function GetInsurancesCertificateId() {
        return {
            InsurancesCertificateId: $("#InsurancesCertificateId").val()
        }
    }
    function SoloNumeros(e) {
        key = e.keyCode || e.which;
        tecla = String.fromCharCode(key).toLowerCase();
        letras = "1234567890";
        especiales = "8-37-39-46";



        tecla_especial = false
        for (var i in especiales) {
            if (key == especiales[i]) {
                tecla_especial = true;
                break;
            }
        }



        if (letras.indexOf(tecla) == -1 && !tecla_especial) {
            return false;
        }
    }
    function setearvalor(nombrenumerico, valor) {
        var numeric = $("#" + nombrenumerico).data("kendoNumericTextBox");
        numeric.value(valor);
        numeric.trigger('change');
        numeric = null;
    }
    function Dropchange() {
        debugger;


        // alert("Valor de deducible" + $('TotalInsurancesLine').val());
        var cantidad = $("#Ratedeductible").val(); //parseFloat($('Ratedeductible').val());
        // alert("Valor de deducible" + cantidad);

        var Valor = $('#TotalInsurancesLine').val();
        var Total = Valor * cantidad;
        
        setearvalor("TotaldeductibleLine", Total);
        //
        //document.getElementById('myDivCategoriaMayor').style.display = 'none';

    };
    function Dropchange2() {
        //debugger;


        var cantidad3 = $("#Ratedeductible").val();
        var Valor3 = $('#TotalInsurancesofProductLine').val();
        var Total3 = Valor3 * cantidad3;
        setearvalor("TotaldeductibleofProduct", Total3);

        //
        //document.getElementById('myDivCategoriaMayor').style.display = 'none';

    };
            function RefrescarGrid() {
                debugger;
                //gridInsurancesCertificateDetail
                var grid = $("#gridInsurancesCertificate").getKendoGrid();
                grid.dataSource.read();
    }
    function RefrescarGridDetail() {
        debugger;
        //gridInsurancesCertificateDetail
        var grid = $("#gridInsurancesCertificateDetail").getKendoGrid();
        grid.dataSource.read();
    }
    function SaveInsurancesCertificate(e) {

                    var notification = $("#notification").data("kendoNotification");
                   // e.preventDefault();
                debugger;
      // debugger;
                //$("#Identidad").val() = ;
                    var dataObject = {
                        'InsurancesCertificateId': $("#InsurancesCertificateId").val(),
                        'InsurancesId': $("#InsurancesId").val(),
                        'NoPoliza': $("#NoPoliza").val(),
                        'BeginDateofInsurance': $("#BeginDateofInsurance").getKendoDateTimePicker().value().toJSON(),
                        'EndDateofInsurance': $("#EndDateofInsurance").getKendoDateTimePicker().value().toJSON(),
                        'DateofInsurance': $("#DateofInsurance").getKendoDateTimePicker().value().toJSON(),
                        'Ratedeductible': $("#Ratedeductible").val(),
                        'RateInsurance': $("#RateInsurance").val(),
                        'RateofProduct': $("#RateofProduct").val(),
                        'QtyofMonths': $("#QtyofMonths").val(),
                    /*     'IdEstadoVendorConfi': $("#IdEstadoVendorConfi").val(),
                        'EstadoVendorConfi': $("#IdEstadoVendorConfi").data("kendoDropDownList").text(),
                        'Phone': $("#Phone").val(),
                        //'Identidad': $("#Identidad").val('0'),
                        'Email': $("#Email").val(),
                        'CurrencyId': $("#CurrencyId").val(),
                        'IdEstado': $("#IdEstado").val(),
                        'Estado': $("#IdEstado").data("kendoDropDownList").text(),
                        'CompanyReferenceone': $("#CompanyReferenceone").val(),
                        'CompanyReferencetwo': $("#CompanyReferencetwo").val(),
                        'CreatedDate': $("#CreatedDate").val(),
                        'ModifiedDate': $("#ModifiedDate").val(),
                        'CreatedUser': $("#CreatedUser").val(),
                        'ModifiedUser': $("#ModifiedUser").val(),
                        'RepresentativeName': $("#RepresentativeName").val(),
                        'IdentityRepresentative': $("#IdentityRepresentative").val(),
                        'RTNRepresentative': $("#RTNRepresentative").val(),
                        */
                       // '_InsurancesCertificate': displayedData
                    };

                   console.log(JSON.stringify(dataObject));
                    //var form = $("#frmNumeracion");
                   // form.validate();
            var validator = $("#frmInsurancesCertificate").data("kendoValidator");
                    var status = $(".status");
                    if (validator.validate()) {

                            $.ajax({
                                url: '@Url.Action("SaveInsurancesCertificate", "InsurancesCertificate")',
                                method: 'POST',
                                datatype: "json",
                                contentType: 'application/json',
                                async: false,
                                data: JSON.stringify(dataObject),
                                success: function (data) {
                                    $("#InsurancesCertificateId").val(data.InsurancesCertificateId);                            

                                    $.toast({
                                        heading: 'Satisfactorio',
                                        text: '<br/><br/> Datos guardados correctamente.',
                                        position: 'top-right',
                                        loaderBg: '#ff6849',
                                        icon: 'success',
                                        hideAfter: 30000,
                                        stack: 6
                                    });

                                    RefrescarGrid();

                                //    $('#ModalInsurancesCertificate').modal('hide');


                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {

                                    notification.show({
                                        title: "Validación",
                                        message: textStatus + ": " + XMLHttpRequest.responseText
                                    }, "error");

                                }
                            });

                        }
                    else {
                        $("#btnInsurancesCertificate").show();
                        $("#btnInsurancesCertificate").prop("disabled", false);
                            status.text("Oops! Hay datos invalidos en el formulario.")
                                .removeClass("valid")
                                .addClass("invalid");
                        }




       // }
       // $("#btnInsurancesCertificate").show();
       // $("#btnInsurancesCertificate").prop("disabled", false);
    }


          function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "SalesOrderLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridInsurancesCertificateDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }
 function AddInsurancesCertificateLine() {
     if ($("#InsurancesCertificateId").val() == '0') {
         $.toast({
             heading: 'Error',
             text: '<br/><br/>' + "Debe guardar los datos de la poliza primero.",
             position: 'top-right',
             showHideTransition: 'fade',
             loaderBg: '#ff6849',
             icon: 'error',
             hideAfter: 30000,
             stack: 6
         });

     }
     else {

        debugger;
       var dataObject = null;
        var dataObject = {
            InsurancesCertificateLineId: 0,
            InsurancesCertificateId: $("#InsurancesCertificateId").val(),
            editar: 1
        };
        //alert("Esstoy en AddInurances Certificate Line");

        $.ajax({
            url: '@Url.Action("pvwInsurancesCertificateDetailMant", "InsurancesCertificate")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#InsurancesCertificateLine").html('');
                $("#InsurancesCertificateLine").html(result);
                //insurancesdetailLineMant
                 //RefreshCotizacionesDetail();
                // $("#btnSaveCotizacion").show();
                $('#myModalInsurancesCertificateLineDetail').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


     }

    }

function AddCertificate() {
     if ($("#InsurancesCertificateId").val() == '0') {
         $.toast({
             heading: 'Error',
             text: '<br/><br/>' + "Debe guardar los datos de la poliza primero.",
             position: 'top-right',
             showHideTransition: 'fade',
             loaderBg: '#ff6849',
             icon: 'error',
             hideAfter: 30000,
             stack: 6
         });

     }
     else {

        debugger;
       var dataObject = null;
        var dataObject = {
            InsurancesCertificateLineId: 0,
            InsurancesCertificateId: $("#InsurancesCertificateId").val(),
            editar: 1
        };

        $.ajax({
            url: '@Url.Action("pvwInsurancesCertificateDetailCertificate", "InsurancesCertificate")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#Certificate").html('');
                $("#Certificate").html(result);
                //insurancesdetailLineMant
                 //RefreshCotizacionesDetail();
                // $("#btnSaveCotizacion").show();
                $('#myModalCertificate').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


     }

    }

</script>

