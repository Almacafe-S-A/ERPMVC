@using Kendo.Mvc.UI
@*{
        var messages = new Dictionary<string, string>() { { "custom", "Ingrese un valor correcto." },
                                   { "required","Valor requerido" }};

        var rules = new Dictionary<string, string>() { { "custom", "customFunction" } };
    }*@



<script>

    function customFunction(input) {

        if (input.attr('name') === "BranchId" && input.val() === "0") {
            return false;
        }

    }


    function GetConciliacionId() {
        return { ConciliacionId: $("#ConciliacionId").val() }
    }


</script>

<script>

    function AddConciliacion() {

           //  clearsession();
             var dataObject = {
                 ConciliacionId: 0,
                editar : 1
            };

            $.ajax({
                url: '@Url.Action("pvwAddConciliacion", "Conciliacion")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#ModalConciliacion").html('');
                    $("#ModalConciliacion").html(result);
                    //RefreshCotizacionesDetail();
                    // $("#btnSaveCotizacion").show();
                    $('#myModalConciliacionUpload').modal('show');
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(textStatus + ": " + XMLHttpRequest.responseText);
                  }
            });


        }


    function EditConciliacion(e) {
            e.preventDefault();

           // clearsession();

            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                ConciliacionId: dataItem.ConciliacionId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddConciliacion", "Conciliacion")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#ModalConciliacion").html('');
                    $("#ModalConciliacion").html(result);

                    //$("#DocumentTypeId").data("kendoDropDownList").trigger('change');
                    $('#ModalConciliacionLinea').modal('show');
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(textStatus + ": " + XMLHttpRequest.responseText);
                  }
            });
        }


    function RefreshConciliacion() {

        $("#gridConciliaciones").getKendoGrid().dataSource.read();


        }
    function DetallesConciliacion(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("DetailsConciliation", "Conciliacion")?ConciliacionId=" + dataItem.ConciliacionId;
        //update => update.Action("Update", "Purch", new { TypeAccountId = "{0}" }).Type(HttpVerbs.Put)
    }

</script>








<h3 class="text-themecolor">Conciliación Bancaria</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Conciliacion>
    ()
    .Name("gridConciliaciones")
    .Columns(columns =>
    {
    columns.Command(command =>
    {
    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditConciliacion");
    // command.Custom("Descargar").Text(" ").IconClass("fa fa-download").Click("Descargar");
    // command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirDocumento");
    command.Custom("Ver Detalles").Text(" ").IconClass("far fa-list-alt").Click("DetallesConciliacion");
    // command.Edit(); command.Destroy();
    }).Width(170);
    columns.Bound(p => p.ConciliacionId).Width(100).Visible(false);

    columns.Bound(p => p.FechaConciliacion).Format("{0:dd/MM/yyyy}").Width(100);
    columns.Bound(p => p.BankName).Width(200);
    columns.Bound(p => p.SaldoConciliado).Width(200);
    columns.Bound(p=> p.DateBeginReconciled).Format("{0:dd/MM/yyyy}").Width(200);
    columns.Bound(p=> p.DateEndReconciled).Format("{0:dd/MM/yyyy}").Width(200);
    })
    .Filterable(f => f.Operators(o => o.ForString(s => s
    .Clear()
    .Contains("Contiene")
    .DoesNotContain("No contiene")
    .EndsWith("Termina con")
    .IsEqualTo("Es igual a")
    .IsNotEqualTo("No es igual a")
    .IsNull("Es nulo")
    .StartsWith("Inicia con")


    )
    .ForNumber(n => n
    .Clear()
    .IsEqualTo("Es igual a")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsNull("Es nulo")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    )
    .ForDate(d => d
    .Clear()
    .IsEqualTo("Es igual que")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    .IsNotEqualTo("No es igual que")
    )
    ))
    .ToolBar(tools =>
    {
    //tools.Create();
    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
    .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddConciliacion();" });

    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


    })
    .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
    .Sortable()
    .Pageable()
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("ConciliacionReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
    .Excel(excel => excel.FileName("ConciliacionReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .DataSource(dataSource =>
    dataSource
    .WebApi()
    .ServerOperation(true)
    .Model(model =>
    {
    model.Id(p => p.ConciliacionId);
    model.Field(p => p.ConciliacionId).Editable(false);
    })
    .Events(events => events.Error("error_handler"))
    .Read(read => read.Action("GetConciliacion", "Conciliacion"))
    // .Create(create => create.Action("Insert", "Conciliacion"))
    // .Update(update => update.Action("Update", "Conciliacion", new { id = "{0}" }))
    //.Destroy(destroy => destroy.Action("Delete", "Conciliacion", new { id = "{0}" }))
    )
    .Events(e =>
    {
    //e.Save("onsave");
    })
    )



    <div id="ModalConciliacion">
        @await Html.PartialAsync("pvwAddConciliacion", new ERPMVC.DTO.ConciliacionDTO { ConciliacionId = 0 })
    </div>
