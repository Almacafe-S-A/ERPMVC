@using RazorLight.Extensions
@model ERPMVC.DTO.ConciliacionDTO

@{ 
    Layout = null;
    var messages = new Dictionary<string, string>() { { "custom", "Ingrese un valor correcto." } };
    var rules = new Dictionary<string, string>() { { "custom", "customFunction" } };

}

<script>
    function BancoSeleccion() {
        return {
            BankId: $("#BankId").val()
        };
    }    

    function IniciarConciliacion(e) {
        var validador = $("#mdlCuerpo").kendoValidator().data("kendoValidator");
        if (validador.validate()) {
            $("#btnIniciar").data("kendoButton").enable(false);
            $("#btnCancelar").data("kendoButton").enable(true);
            $("#btnGuardar").data("kendoButton").enable(true);
            $("#DateBeginReconciled").data("kendoDatePicker").enable(false);
            $("#DateEndReconciled").data("kendoDatePicker").enable(false);
            $("#btnAgregarLineaLibro").click(AgregarLineaLibro);
            $("#btnAgregarLineaBanco").click(AgregarLineaBanco);
            $("#grdFaltaLibro").getKendoGrid().options.editable = true;
            $("#grdSaldoBanco").getKendoGrid().options.editable = true;
            $("#BankId").data("kendoDropDownList").enable(false);
            $("#AccountId").data("kendoDropDownList").enable(false);
            $("#CheckAccountId").data("kendoDropDownList").enable(false);
            if (@Model.ConciliacionId !== 0 && @Model.Editar === 1) {
                SaldoLibro(false);
            } else {
                SaldoLibro(true);
            }
            
        }
    }

    function CancelarConciliacion(e) {
        $("#btnIniciar").data("kendoButton").enable(true);
        $("#btnCancelar").data("kendoButton").enable(false);
        $("#DateBeginReconciled").data("kendoDatePicker").enable(true);
        $("#DateEndReconciled").data("kendoDatePicker").enable(true);
        $("#btnAgregarLineaLibro").unbind();
        $("#btnAgregarLineaBanco").unbind();
        $("#BankId").data("kendoDropDownList").enable(true);
        $("#AccountId").data("kendoDropDownList").enable(true);
        $("#CheckAccountId").data("kendoDropDownList").enable(true);
    }

    function GuardarConciliacion() {
        var saldoLbro = $("#SaldoLibro").val();
        var saldoBnco = $("#SaldoBanco").val();
        var now = new Date();
        if (saldoLbro !== saldoBnco) {
            alert('Conciliacion no esta cuadrada');
        } else {
            var lineas = [];
            var lineasSaldo = $("#grdSaldoLibro").getKendoGrid().dataSource.data();
            var lineasFaltantes = $("#grdFaltaLibro").getKendoGrid().dataSource.data();
            var lineasBanco = $("#grdSaldoBanco").getKendoGrid().dataSource.data();
            //debugger;
            lineasSaldo.forEach(r => {
                var registro = {
                    ConciliacionLineaId: r.ConciliacionLineaId,
                    MotivoId: null,
                    ConciliacionId: @Model.ConciliacionId,
                    Credit: r.Credit,
                    Debit: r.Debit,
                    ReferenciaBancaria: '',
                    CurrencyId: 1,
                    TransDate: r.TransDate,
                    ReferenceTrans: 'ASIENTO CONTABLE',
                    JournalEntryId: r.JournalEntryId,
                    JournalEntryLineId: r.JournalEntryLineId,
                    VoucherTypeId: 0,
                    Reconciled: r.LineaConciliacion !== 0 ? 1 : 0,
                    ChecknumberId: 0,
                    MonedaName: 'Lempira',
                    FechaCreacion: now,
                    FechaModificacion: now,
                    UsuarioCreacion: '',
                    UsuarioModificacion: ''
                };
                lineas.push(registro);
            });

            if (!removerPrimeraLineaFaltaLibro) {
                lineasFaltantes.forEach(r => {
                    if (r.TransDate === null) {
                        alert('Fecha de Transacción no puede estar vacia');
                        return;
                    }
                    var registro = {
                        ConciliacionLineaId: r.ConciliacionLineaId,
                        MotivoId: null,
                        ConciliacionId: @Model.ConciliacionId,
                        Credit: r.Credit,
                        Debit: r.Debit,
                        ReferenciaBancaria: '',
                        CurrencyId: 1,
                        TransDate: r.TransDate,
                        ReferenceTrans: 'ASIENTO CONTABLE',
                        JournalEntryId: null,
                        JournalEntryLineId: null,
                        VoucherTypeId: 0,
                        Reconciled: r.LineaConciliacion !== 0 ? 1 : 0,
                        ChecknumberId: 0,
                        MonedaName: 'Lempira',
                        FechaCreacion: now,
                        FechaModificacion: now,
                        UsuarioCreacion: '',
                        UsuarioModificacion: ''
                    };
                    lineas.push(registro);
                });
            }

            if (!removerPrimeraLineaBanco) {
                lineasBanco.forEach(r => {
                    if (r.TransDate === null) {
                        alert('Fecha de Transacción no puede estar vacia');
                        return;
                    }
                    var registro = {
                        ConciliacionLineaId: r.ConciliacionLineaId,
                        MotivoId: r.Motivo.MotivoId,
                        ConciliacionId: @Model.ConciliacionId,
                        Credit: r.Credit,
                        Debit: r.Debit,
                        ReferenciaBancaria: r.Referencia,
                        CurrencyId: 1,
                        TransDate: r.TransDate,
                        ReferenceTrans: r.Referencia,
                        JournalEntryId: null,
                        JournalEntryLineId: null,
                        VoucherTypeId: 0,
                        Reconciled: 0,
                        ChecknumberId: r.Cheque,
                        MonedaName: 'Lempira',
                        FechaCreacion: now,
                        FechaModificacion: now,
                        UsuarioCreacion: '',
                        UsuarioModificacion: ''
                    };
                    lineas.push(registro);
                });
            }

            var conciliacion = {
                ConciliacionId: @Model.ConciliacionId,
                BankId: $("#BankId").val(),
                AccountId: $("#AccountId").val(),
                BankName: $("#BankId").data("kendoDropDownList").text(),
                CheckAccountId: $("#CheckAccountId").val(),
                FechaConciliacion: $("#FechaConciliacion").data("kendoDatePicker").value(),
                DateBeginReconciled: $("#DateBeginReconciled").data("kendoDatePicker").value(),
                DateEndReconciled: $("#DateEndReconciled").data("kendoDatePicker").value(),
                SaldoConciliado: $("#SaldoConciliado").val(),
                FechaCreacion: now,
                FechaModificacion: now,
                UsuarioCreacion: '',
                UsuarioModificacion:'',
                SaldoBanco: $("#SaldoBanco").val(),
                SaldoLibro: $("#SaldoLibro").val(),
                SaldoConciliado: $("#SaldoConciliado").val(),
                ConciliacionLinea: lineas
            };
            //debugger;
            $.ajax({
                url: '@Url.Action("SaveConciliacion", "Conciliacion")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(conciliacion),
                success: function (data) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: '<br/><br/>Datos guardados correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 3000,
                        stack: 6
                    });
                    window.RefreshConciliacion();
                    $("#myModalConciliacionUpload").modal('hide');

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                }
            });

        }
    }
</script>

<div id="myModalConciliacionUpload" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" onclick="closeConciliacionBancaria();">&times;</button>
                <h4 class="modal-title">Conciliación bancaria</h4>
            </div>

        <div class="modal-body" kendo-validator="true" name="mdlCuerpo">
            <div class="row">
                <div class="col">
                    <label for="IdConciliacion">Número Conciliación:</label><br />
                    <input class="form-control" type="text" readonly id="IdConciliacion" name="IdConciliacion" value="@Model.ConciliacionId" style="width: 100%" />
                </div>
                <div class="col">
                    <label for="AccountId">Cuenta de Mayor:</label>
                    <kendo-dropdownlist name="IdCuentaMayor"
                                        for="@Model.AccountId"
                                        filter="Kendo.Mvc.UI.FilterType.Contains"
                                        option-label="Seleccioné una cuenta de mayor"
                                        datatextfield="CodigoNombre"
                                        datavaluefield="AccountId"
                                        required
                                        validationMessage="Seleccione la cuenta de Mayor"
                                        style="width: 100%">
                        <datasource type="DataSourceTagHelperType.WebApi" server-operation="true">
                            <transport>
                                <read url="@Url.Action("GetCuentasDiariasPatron","Accounting")?Patron=113" />
                            </transport>
                        </datasource>
                    </kendo-dropdownlist>
                </div>
                <div class="col">
                    <label for="IdBanco">Banco:</label>
                    <kendo-dropdownlist name="IdBanco"
                                        for="@Model.BankId"
                                        filter="Kendo.Mvc.UI.FilterType.Contains"
                                        option-label="Seleccioné un banco"
                                        datatextfield="BankName"
                                        datavaluefield="BankId"
                                        required
                                        validationMessage="Seleccione el Banco"
                                        style="width: 100%">
                        <datasource type="DataSourceTagHelperType.WebApi" server-operation="true">
                            <transport>
                                <read url="@Url.Action("GetBank","Bank")" />
                            </transport>
                        </datasource>
                    </kendo-dropdownlist>
                </div>
                <div class="col">
                    <label for="CheckAccountId">Cuenta Banco:</label>
                    @if (Model.Editar == 1)
                    {
                        <kendo-dropdownlist name="CheckAccountId"
                                            for="@Model.CheckAccountId"
                                            filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccioné una cuenta de banco"
                                            datatextfield="CodigoNombre"
                                            datavaluefield="AccountManagementId"
                                            cascade-from="BankId"
                                            auto-bind="false"
                                            required
                                            validationMessage="Seleccione la cuenta de Banco"
                                            style="width: 100%">
                            <datasource type="DataSourceTagHelperType.WebApi" server-operation="true">
                                <transport>
                                    <read url="@Url.Action("GetAccountManagementByBankId","AccountManagement")" data="BancoSeleccion" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                    }
                    else
                    {
                        <kendo-dropdownlist name="CheckAccountId"
                                            for="@Model.CheckAccountId"
                                            filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccioné una cuenta de banco"
                                            datatextfield="CodigoNombre"
                                            datavaluefield="AccountManagementId"
                                            required
                                            validationMessage="Seleccione la cuenta de Banco"
                                            style="width: 100%">
                            <datasource type="DataSourceTagHelperType.WebApi" server-operation="true">
                                <transport>
                                    <read url="@Url.Action("GetAccountManagementByBankId","AccountManagement")" data="BancoSeleccion" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                    }
                    
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label for="fchConciliacion">Fecha Conciliación:</label>
                    <kendo-datepicker name="fchConciliacion"
                                      format="{0:dd/MM/yyyy}"
                                      value="@Model.FechaConciliacion"
                                      for="@Model.FechaConciliacion"
                                      readonly />
                </div>
                <div class="col">
                    <label for="DateBeginReconciled">Desde:</label>
                    <kendo-datepicker name="DateBeginReconciled"
                                      format="{0:dd/MM/yyyy}"
                                      value="@Model.DateBeginReconciled"
                                      for="@Model.DateBeginReconciled"
                                      required
                                      validationMessage="La fecha de inicio es requerida" />
                </div>
                <div class="col">
                    <label for="DateEndReconciled">Hasta:</label>
                    <kendo-datepicker name="DateEndReconciled"
                                      format="{0:dd/MM/yyyy}"
                                      value="@Model.DateEndReconciled"
                                      for="@Model.DateEndReconciled"
                                      required
                                      validationMessage="La fecha final es requerida" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label for="SaldoBanco">Saldo Banco:</label>
                    <input id="SaldoBanco" class="form-control" name="SaldoBanco" required validationMessage="Ingrese el saldo de Banco" for="@Model.SaldoBanco" value="@Model.SaldoBanco" readonly style="width: 12em;"/>
                </div>
                <div class="col">
                    <label for="SaldoLibro">Saldo Libro:</label>
                    <input id="SaldoLibro" class="form-control" name="SaldoLibro" required validationMessage="Ingrese el saldo de Libro" for="@Model.SaldoLibro" value="@Model.SaldoLibro" readonly style="width: 12em;"/>
                </div>
                <div class="col">
                    <label for="SaldoConciliado">Saldo Conciliado:</label>
                    <input id="SaldoConciliado" class="form-control" name="SaldoConciliado" value="@Model.SaldoConciliado" readonly style="width: 12em;" />
                </div>
                <div class="col">
                    <kendo-button name="btnIniciar" on-click="IniciarConciliacion" style="width: 100%;">Iniciar Conciliación</kendo-button>
                </div>
                <div class="col">
                    <kendo-button name="btnCancelar" on-click="CancelarConciliacion" enable="false" style="width: 100%;">Cancelar</kendo-button>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col">
                    <h3>Saldo Libro</h3>

                </div>
                <div class="col">
                    <h3>Saldo Banco</h3>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="row">
                        <div class="col">
                            <div id="grdSaldoLibro"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <h4>Movimientos Faltantes Libro</h4>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div id="grdFaltaLibro"></div>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div id="grdSaldoBanco"></div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <kendo-button name="btnGuardar" on-click="GuardarConciliacion" enable="false" style="width: 100%;">Guardar Conciliación</kendo-button>
                    @*<kendo-button name="btnRefrescar" on-click="InicializarVentana"  style="width: 100%;">Refrescar</kendo-button>*@
                </div>
            </div>

        </div>

        </div>
    </div>
</div>
<script>

    var montoConciliado = 0;
    var datosLibro = [];
    var linea = 1;
    var lineaBanco = 1;
    var removerPrimeraLineaBanco = true;
    var removerPrimeraLineaFaltaLibro = true;

    $(document).ready(function () {
        linea = 1;
        lineaBanco = 1;
        removerPrimeraLineaBanco = true;
        removerPrimeraLineaFaltaLibro = true;
        InicializarVentana();
    });
    
    

    function SaldoLibro(e) {
        if (e === true) {
            var codigoCuenta = $("#AccountId").val();
            var desde = kendo.toString(kendo.parseDate($("#DateBeginReconciled").val(), "dd/MM/yyyy"),"yyyy-MM-dd");
            var hasta = kendo.toString(kendo.parseDate($("#DateEndReconciled").val(), "dd/MM/yyyy"), "yyyy-MM-dd");
            $.ajax({
                url: '@Url.Action("GetLineasAsientoContableCuentaRangoFechas", "JournalEntry")?Cuenta='+codigoCuenta+'&Desde='+desde+'&hasta='+hasta,
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                success: function (result) {

                    datosLibro = result.map(r => ({
                        LineaId: linea++,
                        TransDate: kendo.parseDate(r.FechaTransaccion, "yyyy-MM-dd'T'HH:mm:ss"),
                        Credit: r.Credit,
                        Debit: r.Debit,
                        Monto: Math.abs(r.Credit - r.Debit),
                        LineaConciliacion: 0,
                        JournalEntryId: r.JournalEntryId,
                        JournalEntryLineId: r.JournalEntryLineId,
                        ConciliacionLineaId: 0
                    }));
                    //debugger;
                    $("#grdSaldoLibro").getKendoGrid().dataSource.data(datosLibro);
                    TotalizarSaldoLibro();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
        } else {
            return datosLibro;
        }
    }

    var datosBanco = [];
    function SaldoBancoInicial() {
        //debugger;
        return datosBanco;
    }

    var datosFaltantesLibro = [];
    function FaltaLibro(e) {
        //debugger;
        return datosFaltantesLibro;
    }

    function InicializarVentana(e) {
        
        $("#grdSaldoLibro").kendoGrid({
            dataSource: {
                data: window.datosLibros,
                schema: {
                    model: {
                        fields: {
                            LineaId: { name: "LineaId", type: "number" , editable:false },
                            TransDate: { name: "TransDate", type: "date", editable: false },
                            Monto: { name: "Monto", type: "number", editable: false },
                            Credit: { name: "Credit", type: "number", editable: false },
                            Debit: { name: "Debit", type: "number", editable: false },
                            LineaConciliacion: { name: "LineaConciliacion", type: "number", editable: @Model.Editar=== 1 ? true : false },
                            ConciliacionLineaId: { name: "ConciliacionLineaId", type: "number" }
                        }
                    }
                }
            },
            columns: [
                { field: "LineaId", title: "No.", width: 80 },
                { field: "TransDate", title: "Fecha Transacción", width: 200, format: "{0:dd/MM/yyyy HH:mm:ss}" },
                { field: "Credit", title: "Crédito", width: 100 },
                { field: "Debit", title: "Débito", width: 100 },
                { field: "Monto", title: "Monto", width: 100 },
                { field: "LineaConciliacion", title: "Conciliar con", width: 50 },
                { field: "ConciliacionLineaId", hidden: true }
            ],
            height: 400,
            scrollable: true,
            editable: true,
            edit: EditadoSaldoLibro
        });

        $("#grdSaldoBanco").kendoGrid({
            dataSource: {
                data: window.datosBanco,
                schema: {
                    model: {
                        fields: {
                            LineaId: { name: "LineaId", type: "number", editable: false },
                            TransDate: { name: "TransDate", type: "date", editable: @Model.Editar===1?true:false },
                            Referencia: { name: "Referencia", editable: @Model.Editar===1?true:false},
                            Motivo: {name:"Motivo", editable: @Model.Editar===1?true:false},
                            Monto: { name: "Monto", type: "number", editable: @Model.Editar===1?true:false },
                            Credit: { name: "Credit", type: "number", editable: @Model.Editar===1?true:false },
                            Debit: { name: "Debit", type: "number", editable: @Model.Editar===1?true:false },
                            Cheque: { name: "Cheque", editable: @Model.Editar=== 1 ? true : false },
                            ConciliacionLineaId: { name: "ConciliacionLineaId", type: "number" }
                        }
                    }
                }
            },
            columns: [
                { field: "LineaId", title: "No.", width: 80 },
                { field: "TransDate", title: "Fecha Transacción", width: 200, format: "{0:dd/MM/yyyy HH:mm:ss}" },
                { field: "Referencia", title: "Referencia Banco", width: 100 },
                { field: "Motivo", title: "Motivo", width: 200, editor: motivoDropDownEditor, template:"#= (typeof Motivo ==='undefined')?'':Motivo.Nombre #"},
                { field: "Credit", title: "Crédito", width: 100 },
                { field: "Debit", title: "Débito", width: 100 },
                { field: "Monto", title: "Monto", width: 100 },
                { field: "Cheque", title: "No. Cheque", width: 100 },
                { field: "ConciliacionLineaId", hidden: true }
            ],
            toolbar: [
                {template:PlantillaAgregarLineaBanco}
                ],
            height: 830,
            scrollable: true,
            editable: true,
            edit:EditadoSaldoBanco
        });

        $("#grdFaltaLibro").kendoGrid({
            dataSource: {
                data: window.datosFaltantesLibro,
                schema: {
                    model: {
                        fields: {
                            LineaId: { name: "LineaId", type: "number", editable: false },
                            TransDate: { name: "TransDate", type: "date", editable: @Model.Editar===1?true:false},
                            Monto: { name: "Monto", type: "number", editable: @Model.Editar===1?true:false},
                            Credit: { name: "Credit", type: "number", editable: @Model.Editar===1?true:false},
                            Debit: { name: "Debit", type: "number", editable: @Model.Editar===1?true:false},
                            LineaConciliacion: { name: "LineaConciliacion", type: "number", editable: @Model.Editar=== 1 ? true : false },
                            ConciliacionLineaId: { name: "ConciliacionLineaId", type: "number" }
                        }
                    }
                }
            },
            columns: [
                { field: "LineaId", title: "No.", width: 80 },
                { field: "TransDate", title: "Fecha Transacción", width: 200, format: "{0:dd/MM/yyyy HH:mm:ss}" },
                { field: "Credit", title: "Crédito", width: 100 },
                { field: "Debit", title: "Débito", width: 100 },
                { field: "Monto", title: "Monto", width: 100 },
                { field: "LineaConciliacion", title: "Conciliar con", width: 50 },
                { field: "ConciliacionLineaId", hidden: true }
            ],
            toolbar: [
                {template:PlantillaAgregarLineaLibro}
            ],
            height: 400,
            scrollable: true,
            editable: true,
            edit:CampoEditadoFaltaLibro
        });

        if (@Model.ConciliacionId !== 0) {
            $("#BankId").val(@Model.BankId);
            $("#AccountId").val(@Model.AccountId);
            $("#CheckAccountId").val(@Model.CheckAccountId);
            if (@Model.Editar === 0) {
                $("#BankId").data("kendoDropDownList").enable(false);
                $("#AccountId").data("kendoDropDownList").enable(false);
                $("#CheckAccountId").data("kendoDropDownList").enable(false);
                $("#DateBeginReconciled").data("kendoDatePicker").readonly();
                $("#DateEndReconciled").data("kendoDatePicker").readonly();
                $("#btnIniciar").data("kendoButton").enable(false);
                $("#btnCancelar").data("kendoButton").enable(false);
                $("#btnGuardar").data("kendoButton").enable(false);
                $("#grdSaldoLibro").getKendoGrid().options.editable = false;
                $("#grdFaltaLibro").getKendoGrid().options.editable = false;
                $("#grdSaldoBanco").getKendoGrid().options.editable = false;
            } else if(@Model.Editar === 1) {
                $("#BankId").data("kendoDropDownList").enable(true);
                $("#AccountId").data("kendoDropDownList").enable(true);
                $("#CheckAccountId").data("kendoDropDownList").enable(true);
                $("#DateBeginReconciled").data("kendoDatePicker").readonly(false);
                $("#DateEndReconciled").data("kendoDatePicker").readonly(false);
                $("#btnIniciar").data("kendoButton").enable(true);
                $("#btnIniciar").text("Continuar Conciliacion");
                $("#btnCancelar").data("kendoButton").enable(false);
                $("#btnGuardar").data("kendoButton").enable(false);
                $("#grdSaldoLibro").getKendoGrid().options.editable = false;
                $("#grdFaltaLibro").getKendoGrid().options.editable = false;
                $("#grdSaldoBanco").getKendoGrid().options.editable = false;
                $("#grdSaldoBanco").getKendoGrid().editable = false;
            }

            datosLibro = [];
            datosFaltantesLibro = [];
            datosBanco = [];
            
            var lineas = JSON.parse('@Html.Raw(Json.Serialize(@Model.ConciliacionLinea))');
            var motivos = JSON.parse('@Html.Raw(Json.Serialize(@ViewData["motivos"]))');
            
            lineas.forEach(r => {
                if (r.JournalEntryId !== null && r.JournalEntryId !== 0) {                    
                    var regLibro = {
                        LineaId: window.linea++,
                        TransDate: kendo.parseDate(r.TransDate, "yyyy-MM-dd'T'HH:mm:ss"),
                        Credit: r.Credit,
                        Debit: r.Debit,
                        Monto: Math.abs(r.Credit - r.Debit),
                        LineaConciliacion: 0,
                        JournalEntryId: r.JournalEntryId,
                        JournalEntryLineId: r.JournalEntryLineId,
                        ConciliacionLineaId: r.ConciliacionLineaId
                    };
                    datosLibro.push(regLibro);
                } else if (r.MotivoId !== null && r.MotivoId !== 0) {                    
                    var regBanco = {
                        LineaId: lineaBanco++,
                        TransDate: kendo.parseDate(r.TransDate, "yyyy-MM-dd'T'HH:mm:ss"),
                        Referencia: r.ReferenciaBancaria,
                        Motivo: { MotivoId: r.MotivoId, Nombre: motivos.find(m=>m.MotivoId === r.MotivoId).Nombre },
                        Credit: r.Credit,
                        Debit: r.Debit,
                        Monto: Math.abs(r.Credit - r.Debit),
                        Cheque: r.CheknumberId,
                        ConciliacionLineaId: r.ConciliacionLineaId
                    };
                    datosBanco.push(regBanco);
                } else {
                    
                    var regFaltante = {
                        LineaId: linea++,
                        TransDate: kendo.parseDate(r.TransDate, "yyyy-MM-dd'T'HH:mm:ss"),
                        Credit: r.Credit,
                        Debit: r.Debit,
                        Monto: Math.abs(r.Credit - r.Debit),
                        LineaConciliacion: 0,
                        ConciliacionLineaId: r.ConciliacionLineaId
                    };
                    datosFaltantesLibro.push(regFaltante);
                }
            });
            if (datosFaltantesLibro.length > 0) {
                removerPrimeraLineaFaltaLibro = false;
            }
            if (datosBanco.length > 0) {
                removerPrimeraLineaBanco = false;
            }
            $("#grdSaldoLibro").getKendoGrid().dataSource.data(datosLibro);
            $("#grdFaltaLibro").getKendoGrid().dataSource.data(datosFaltantesLibro);
            $("#grdSaldoBanco").getKendoGrid().dataSource.data(datosBanco);
        }
        
    }

    function closeConciliacionBancaria() {
        window.RefreshConciliacion();
        $("#myModalConciliacionUpload").modal('hide');
    }

    

    


    function PlantillaAgregarLineaLibro(e) {
        var plantilla =
            '<a name="btnAgregarLineaLibro" id="btnAgregarLineaLibro" role="button" class="k-button k-button-icontext k-grid-Agregar" href="#" ><span class="k-icon k-i-plus">::before</span>Agregar</a>';
        return plantilla;
    }

    function PlantillaAgregarLineaBanco(e) {
        var plantilla =
            '<a name="btnAgregarLineaBanco" id="btnAgregarLineaBanco" role="button" class="k-button k-button-icontext k-grid-Agregar" href="#" ><span class="k-icon k-i-plus">::before</span>Agregar</a>';
        return plantilla;
    }

    
    function AgregarLineaBanco(e) {
        if (removerPrimeraLineaBanco) {
            var datos = [{
                LineaId: lineaBanco++,
                TransDate: null,
                Referencia: "",
                Motivo: {MotivoId:0, Nombre:""},
                Credit: 0,
                Debit: 0,
                Monto: 0,
                Cheque: "",
                ConciliacionLineaId: 0
            }];
            $("#grdSaldoBanco").getKendoGrid().dataSource.data(datos);
            removerPrimeraLineaBanco = false;
        } else {
            $("#grdSaldoBanco").getKendoGrid().dataSource.add({
                LineaId: lineaBanco++,
                TransDate: null,
                Referencia: "",
                Motivo: { MotivoId: 0, Nombre: "" },
                Credit: 0,
                Debit: 0,
                Monto: 0,
                Cheque: "",
                ConciliacionLineaId: 0
            });
        }
    }

    
    function AgregarLineaLibro() {
        if (removerPrimeraLineaFaltaLibro) {
            var datos = [{
                LineaId: linea++,
                TransDate: null,
                Credit: 0,
                Debit: 0,
                Monto: 0,
                LineaConciliacion: 0,
                ConciliacionLineaId: 0
            }];
            $("#grdFaltaLibro").getKendoGrid().dataSource.data(datos);
            removerPrimeraLineaFaltaLibro = false;
        } else {
            $("#grdFaltaLibro").getKendoGrid().dataSource.add({
                LineaId: linea++,
                TransDate: null,
                Credit: 0,
                Debit: 0,
                Monto: 0,
                LineaConciliacion: 0,
                ConciliacionLineaId: 0
            });
        }
    }


    function CampoEditadoFaltaLibro(e) {
        $("[name='Credit']", e.container).blur(function () {
            var grid = $("#grdFaltaLibro").getKendoGrid();
            var fila = $(this).closest("tr");
            var registro = grid.dataItem(fila);
            if (registro.Debit > 0) {
                registro.Credit = 0;
                registro.set("Credit", 0);
                alert('Solo puede registrar un crédito o débito por fila')
            } 
            var monto = Math.abs(registro.Credit - registro.Debit);
            registro.set("Monto", monto);
            TotalizarSaldoLibro();
        });

        $("[name='Debit']", e.container).blur(function () {
            var grid = $("#grdFaltaLibro").getKendoGrid();
            var fila = $(this).closest("tr");
            var registro = grid.dataItem(fila);
            if (registro.Credit > 0) {
                registro.Debit = 0;
                registro.set("Debit", 0);
                alert('Solo puede registrar un crédito o débito por fila')
            } 
            var monto = Math.abs(registro.Credit - registro.Debit);
            registro.set("Monto", monto);
            TotalizarSaldoLibro();
        });

        $("[name='Monto']", e.container).blur(function () {
            var grid = $("#grdFaltaLibro").getKendoGrid();
            var fila = $(this).closest("tr");
            var registro = grid.dataItem(fila);
            var monto = Math.abs(registro.Credit - registro.Debit);
            registro.set("Monto", monto);
        });

        $("[name='LineaConciliacion']", e.container).blur(function () {
            var data = $("#grdSaldoLibro").getKendoGrid().dataSource.data();
            montoConciliado = 0;
            data.forEach(r => montoConciliado = r.LineaConciliacion !== 0 ? montoConciliado + Math.abs(r.Credit - r.Debit) : montoConciliado);
            if (!removerPrimeraLineaFaltaLibro) {
                data = $("#grdFaltaLibro").getKendoGrid().dataSource.data();
                data.forEach(r => montoConciliado = r.LineaConciliacion !== 0 ? montoConciliado + Math.abs(r.Credit - r.Debit) : montoConciliado);
            }
            $("#SaldoConciliado").val(montoConciliado);
        });
    }

    function EditadoSaldoLibro(e) {

        $("[name='LineaConciliacion']", e.container).blur(function () {
            var grid = $("#grdSaldoLibro").getKendoGrid();
            var data = $("#grdSaldoLibro").getKendoGrid().dataSource.data();
            montoConciliado = 0;
            data.forEach(r => montoConciliado = r.LineaConciliacion !== 0 ? montoConciliado + Math.abs(r.Credit - r.Debit) : montoConciliado);
            if (!removerPrimeraLineaFaltaLibro) {
                data = $("#grdFaltaLibro").getKendoGrid().dataSource.data();
                data.forEach(r => montoConciliado = r.LineaConciliacion !== 0 ? montoConciliado + Math.abs(r.Credit - r.Debit) : montoConciliado);
            }
            $("#SaldoConciliado").val(montoConciliado);
        });
    }

    function EditadoSaldoBanco(e) {
        $("[name='Credit']", e.container).blur(function () {
            var grid = $("#grdSaldoBanco").getKendoGrid();
            var fila = $(this).closest("tr");
            var registro = grid.dataItem(fila);
            if (registro.Debit > 0) {
                registro.Credit = 0;
                registro.set("Credit", 0);
                alert('Solo puede registrar un crédito o débito por fila')
            }
            var monto = Math.abs(registro.Credit - registro.Debit);
            registro.set("Monto", monto);
            TotalizarSaldoBanco();
        });

        $("[name='Debit']", e.container).blur(function () {
            var grid = $("#grdSaldoBanco").getKendoGrid();
            var fila = $(this).closest("tr");
            var registro = grid.dataItem(fila);
            if (registro.Credit > 0) {
                registro.Debit = 0;
                registro.set("Debit", 0);
                alert('Solo puede registrar un crédito o débito por fila')
            }
            var monto = Math.abs(registro.Credit - registro.Debit);
            registro.set("Monto", monto);
            TotalizarSaldoBanco();
        });

        $("[name='Monto']", e.container).blur(function () {
            var grid = $("#grdSaldoBanco").getKendoGrid();
            var fila = $(this).closest("tr");
            var registro = grid.dataItem(fila);
            var monto = Math.abs(registro.Credit - registro.Debit);
            registro.set("Monto", monto);
        });        
    }

    function TotalizarSaldoBanco() {
        if (!removerPrimeraLineaBanco) {
            var data = $("#grdSaldoBanco").getKendoGrid().dataSource.data();
            var creditos = 0;
            var debitos = 0;
            data.forEach(r => {
                creditos = creditos + r.Credit;
                debitos = debitos + r.Debit;
            });
            $("#SaldoBanco").val(Math.abs(creditos - debitos));
        }
    }

    function TotalizarSaldoLibro() {
        var data = $("#grdSaldoLibro").getKendoGrid().dataSource.data();
        var creditos = 0;
        var debitos = 0;
        data.forEach(r => {
            creditos = creditos + r.Credit;
            debitos = debitos + r.Debit;
        });

        if (!removerPrimeraLineaFaltaLibro) {
            data = $("#grdFaltaLibro").getKendoGrid().dataSource.data();
            data.forEach(r => {
                creditos = creditos + r.Credit;
                debitos = debitos + r.Debit;
            });
        }
        $("#SaldoLibro").val(Math.abs(creditos-debitos));
    }

    

    function motivoDropDownEditor(container, options) {
        $('<input name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                index:0,
                autoBind: true,
                dataTextField: "Nombre",
                dataValueField: "MotivoId",
                dataSource: {
                    transport: {
                        read: {
                            type:"GET",
                            url: '@Url.Action("GetMotivosConciliacion", "MotivoConciliacion")',
                            dataType: "json"
                        }
                    },
                    schema: {
                        "data": "Data",
                        "total": "Total",
                        "errors": "Errors",
                        "model": {
                            "fields": {
                                "MotivoId": { "type": "number" },
                                "Nombre": {}
                            }
                        }

                    }
                }
            });
    }

    function PlantillaMotivo(e) {
        console.log(e);
    }
        
    
</script>