@model ERPMVC.Models.InventarioFisico
@using System.Security.Claims

@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosCertificadoDeposito"];
    bool editable = Model.Id == 0;
}



<script>
    const formatter = new Intl.NumberFormat("en-US");

    function RefreshInventarioFisicoLine() {
        var grid = $("#gridInventarioFisicoLine").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
        //CalcularTotalDocumento();
    }



        function Delete(e) {

            e.preventDefault();
            if (confirm('Esta seguro que desea eliminar la fila?')) {
                var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

                var grid = $("#gridInventarioFisicoLine").data("kendoGrid");
            
                grid.dataSource.remove(dataItem);

            }
        }
    
    var record = 0;
    function RowNum() {
        
        return ++record;
    }
   

    function setearvalor(nombrenumerico, valor) {
        var numeric = $("#" + nombrenumerico).data("kendoNumericTextBox");
        numeric.value(valor);
        numeric.trigger('change');
        numeric = null;
    }


    formattear = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'LPS',
        minimumFractionDigits: 2
    });

    function formatomiles(numero){
        debugger;
        let format = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'LPS',
        minimumFractionDigits: 2
            });

        return format.format(numero).replace(/[a-z]{3}/i, "").trim();
        
    }

    function calculateField(e) {
        debugger;
        record = 0;
        if (e.container) {            

            totalInventario
            var totalSpan = e.container.closest("TR").find(".totalSpan");
            var totalInventario = e.container.closest("TR").find(".totalInventario");
            
            e.model.InventarioFisicoCantidad = parseFloat( e.model.FactorSacos * e.model.NSacos).toFixed(2);
            e.model.Diferencia = parseFloat(  e.model.InventarioFisicoCantidad - e.model.SaldoLibros).toFixed(2);
            
             totalSpan.html(formatomiles(e.model.Diferencia));
             totalInventario.html(formatomiles(e.model.InventarioFisicoCantidad));
             
        }
        
    }

    var record = 0;

    function RowNum() {

        return ++record;
    }

    function numeracion(){
    
        record = 0;
    }


</script>

<style>
    .numbers {
        text-align: right;
    }
</style>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.InventarioFisicoLine>
    ()
    .Name("gridInventarioFisicoLine")
    .Events(e =>
    e.CellClose("calculateField").Change("numeracion").DataBound("numeracion")
    

    )
    .Columns(columns =>
    {

        columns.Command(command =>
        {
             command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
        }).Width(80).Visible(Model.FechaCompletado==null);
        columns.Bound(c =>c.No).Width(80).Title("No.").ClientTemplate("#=RowNum()#");
        //columns.Bound(p => p.PdaNo).Title("Pda No").ClientTemplate("#= RowNum()#").Width(110);
        columns.Bound(p => p.Id).Title("Id").Width(110).Visible(false);      
        columns.Bound(p => p.InventarioFisicoId).Title("Id").Width(110).Visible(false);
         columns.Bound(p => p.Warehouse).Title("Bodega")
        .ClientTemplate("#=typeof Warehouse === 'undefined'||Warehouse===null?WarehouseName:Warehouse.WarehouseName#").Width(150);
        columns.Bound(p => p.Product).Title("Producto")
        .ClientTemplate("#=typeof Product === 'undefined'||Product===null?ProductoNombre:Product.ProductName#").Width(150);        
         columns.Bound(p => p.UnitOfMeasure).Title("Unidad de Medida")
        .ClientTemplate("#=typeof UnitOfMeasure === 'undefined'||UnitOfMeasure===null?UnitOfMeasureName:UnitOfMeasure.UnitOfMeasureName#").Width(150);
        columns.Bound(p => p.NSacos).Title("Cantidad").Width(120)
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
            .Format("{0:N4}");
        columns.Bound(p => p.FactorSacos).Title("Factor Peso").Width(120)
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
            .Format("{0:N4}");  
        columns.Bound(p => p.InventarioFisicoCantidad).Title("Inventario Fisico")
        .ClientTemplate("<div style='text-align: right'><span class='totalInventario'>#= NSacos * FactorSacos #</span></div>") 
        .Width(200)
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
            .Format("{0:N4}");
        columns.Bound(p => p.SaldoLibros).Title("Saldo Libros").Width(120)
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
            .Format("{0:N4}");        
        columns.Bound(p => p.Diferencia).Title("Diferencia")
        .ClientTemplate("<div style='text-align: right'><span class='totalSpan'>#= InventarioFisicoCantidad - SaldoLibros #</span></div>")
        .Format("{0:N4}")
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
        .Width(120);
        columns.Bound(p => p.Estiba).Width(100)
        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
      
    })
    .Editable(e => e.Mode(GridEditMode.InCell))
    .Filterable(f => f.Operators(o => o.ForString(s => s
    .Clear()
    
    .Contains("Contiene")
    .DoesNotContain("No contiene")
    .EndsWith("Termina con")
    .IsEqualTo("Es igual a")
    .IsNotEqualTo("No es igual a")
    .IsNull("Es nulo")
    .StartsWith("Inicia con")


    )
    .ForNumber(n => n
    .Clear()
    .IsEqualTo("Es igual a")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsNull("Es nulo")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    )
    .ForDate(d => d
    .Clear()
    .IsEqualTo("Es igual que")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    .IsNotEqualTo("No es igual que")
    )
    ))
     .ToolBar(tools =>
        {
            tools.Create().Text("Agregar Producto");
            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a excel");
        })


    .Sortable()
    
    .AutoBind(true)
    //.Pageable()
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("CertificadoDepositoDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
    .Excel(excel => excel.FileName("CertificadoDepositoDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .DataSource(dataSource =>

    dataSource
    //.Ajax()
    .WebApi()
    .Batch(true)

    .ServerOperation(false)
    .Model(model =>
    {
        model.Id(p => p.Id);
        //model.Field(p => p.InventarioFisicoId).DefaultValue(Model.InventarioFisicoId);
        model.Field(p => p.No).Editable(false);
        model.Field(p => p.Id).Editable(false);
        model.Field(p => p.ProductoNombre).Editable(false);
        model.Field(p => p.SaldoLibros).Editable(false);
        model.Field(p => p.InventarioFisicoCantidad).Editable(false);
        model.Field(p => p.Diferencia).Editable(false);

       

    })
    .Sort(s => s.Add(a => a.Id).Ascending())
    .Events(events =>
    {
        events.Error("error_handler");


    })
    .Read(read => read.Action("GetInventarioFisicoLines", "InventarioFisicoLine").Data("GetparamDetalle"))
    )
    )

</div>
</div>