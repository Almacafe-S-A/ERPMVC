@model ERPMVC.DTO.JournalEntryConfigurationDTO



<script>


    function GetJournalEntryConfigurationId() {

        var cuenta = "", debitocredito = "", centrodecostos = "", SubProductName="";
     //   console.log($("#AccountId"));
        if ($("#AccountId").data("kendoDropDownList") != null) {
            if (Number($("#AccountId").data("kendoDropDownList").value())!=0) {
                cuenta = $("#AccountId").data("kendoDropDownList").text();
            }
        }

        if ($("#DebitCreditId").data("kendoDropDownList") != null) {
            if ($("#DebitCreditId").val() != null) {
                debitocredito = $("#DebitCreditId").data("kendoDropDownList").text();
            }
        }
        if ($("#SubProductId").data("kendoDropDownList") != null) {
            if ($("#SubProductId").val() != null) {
                SubProductName = $("#SubProductId").data("kendoDropDownList").text();
            }
        }        


        if ($("#CostCenterId").data("kendoDropDownList") != null) {
            centrodecostos = $("#CostCenterId").data("kendoDropDownList").text();
        }


       
        var displayedData = $("#gridJournalEntryConfigurationLine").data().kendoGrid.dataSource.data();
        var id = -999999;
        debugger;
        if (Number($("#JournalEntryConfigurationLineId").val()) === 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    if (displayedData[i].JournalEntryConfigurationLineId > id)
                        id = displayedData[i].JournalEntryConfigurationLineId;

                }

                id = id + 1;
            }
            else if ($("#AccountId").val() > 0) {
                id = 1;
            }

        }
        else {
            id = $("#JournalEntryConfigurationLineId").val();
        }

      
        return {
            'JournalEntryConfigurationLineId': id,
            'JournalEntryConfigurationId': @Model.JournalEntryConfigurationId ,        
            'AccountId': $("#AccountId").val(),
            'AccountName': cuenta,
            'DebitCreditId': $("#DebitCreditId").val(),
            'DebitCredit': debitocredito,
            'CostCenterId': $("#CostCenterId").val(),
            'CostCenterName': centrodecostos,
            'SubProductId': $("#SubProductId").val(),
            'SubProductName': SubProductName
           // 'FechaCreacion': $("#FechaCreacion").val(),
            //'FechaModificacion': $("#FechaModificacion").val(),
            //'UsuarioCreacion': $("#UsuarioCreacion").val(),
            //'UsuarioModificacion': $("#UsuarioModificacion").val() 


        }
    }

    function RefreshJournalEntryConfigurationDetail() {
        var grid = $("#gridJournalEntryConfigurationLine").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }


    function AddCotizacionDetalle() {
        var notification = $("#notification").data("kendoNotification");

        var dataObject = { 'JournalEntryConfigurationLineId': 0 };

        // var codigoimpuesto = 0;

      
            $.ajax({
                url: '@Url.Action("pvwJournalEntryConfigurationLine", "JournalEntryConfigurationLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#JournalEntryConfigurationLineMant").html('');
                    $("#JournalEntryConfigurationLineMant").html(data);
                    $("#SubProductId").data("kendoDropDownList").value('');      
                    // var txt = $(data);
                    //  var found = $("#SubProductId", txt);
                    // subproducto = $(found).val();                
                    $('#ModalJournalEntryConfigurationLine').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });
        
    }



    function EditCotizacionDetalle(e) {

        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

      //  var subproducto = 0;
        var dataObject = { 'JournalEntryConfigurationLineId': dataItem.JournalEntryConfigurationLineId };

       // var codigoimpuesto = 0;

        if (dataItem.JournalEntryConfigurationId > 0) {
            $.ajax({
                url: '@Url.Action("pvwJournalEntryConfigurationLine", "JournalEntryConfigurationLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#JournalEntryConfigurationLineMant").html('');
                    $("#JournalEntryConfigurationLineMant").html(data);
                   // var txt = $(data);
                  //  var found = $("#SubProductId", txt);
                   // subproducto = $(found).val();                
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });
            $("#frmJournalEntryConfigurationLine :input").prop("disabled", true);
           // llenarsubproduct();
            //var combobox = $('#SubProductId').getKendoDropDownList();
            //combobox.value(subproducto);
            //combobox.trigger('change');
        }
        else {
            $("#JournalEntryConfigurationLineId").val(dataItem.JournalEntryConfigurationLineId);
            $("#btnActualizarJournalEntryConfiguration").prop("disabled", false);
        }
        $('#ModalJournalEntryConfigurationLine').modal('show');

    }


    function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "JournalEntryConfigurationLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridJournalEntryConfigurationLine").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    } 
</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.JournalEntryConfigurationLine>()
                                                  .Name("gridJournalEntryConfigurationLine")
                                                  .Columns(columns =>
                                                  {
                                                      columns.Command(command =>
                                                      {
                                                          command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                          if (Model.editar == 1)
                                                          {
                                                              //command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                          }
                                                          // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                          //  command.Edit(); command.Destroy();
                                                      }).Title("Acciones").Width(200);

                                                      columns.Bound(p => p.JournalEntryConfigurationLineId).Width(150);
                                                      //  columns.Bound(p => p.JournalEntryConfigurationId).Width(150);
                                                      columns.Bound(p => p.AccountId).Title("Id Cuenta Contable").Width(250);
                                                      columns.Bound(p => p.AccountName).Width(250);
                                                      columns.Bound(p => p.DebitCredit).Width(300);
                                                      columns.Bound(p => p.CostCenterName).Width(250);
                                                      columns.Bound(p => p.SubProductName).Width(250);
                                                  })
                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                                                  .ToolBar(tools =>
                                                  {
                                                      if (Model.editar == 1)
                                                      {
                                                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                      }

                                                      tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                      tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                                  })
                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                    .Sortable()
                                                    .AutoBind(true)
                                                    .Pageable()
                                                    .Filterable()
                                                    .Scrollable()
                                                    // .ClientDetailTemplateId("template")
                                                    .Pdf(pdf => pdf.FileName("ConfiguracionAsientosDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                      .Excel(excel => excel.FileName("ConfiguracionAsientosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                    //.Events(e=>e.Save("onsave"))
                                                    .DataSource(dataSource =>

                                                   dataSource
                                                   //.Ajax()
                                                   .WebApi()

                                                    .ServerOperation(true)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.JournalEntryConfigurationId);
                                                        model.Field(p => p.JournalEntryConfigurationLineId).Editable(false);
                                                        model.Field(p => p.JournalEntryConfigurationId).Editable(false);

                                                    })
                                                    .Events(events =>
                                                    {
                                                        events.Error("error_handler");
                                                        //events.upda("EditHandler");

                                                    })
                                                    .Read(read => read.Action("GetJournalEntryConfigurationLine", "JournalEntryConfigurationLine").Data("GetJournalEntryConfigurationId"))
                                              //.Create(create => create.Action("Insert", "JournalEntryConfigurationLine"))
                                              //.Update(update => update.Action("Update", "JournalEntryConfigurationLine", new { JournalEntryConfigurationLineId = "{0}" }))
                                              //.Destroy(destroy => destroy.Action("Delete", "JournalEntryConfigurationLine", new { JournalEntryConfigurationLineId = "{0}" }))
                                              )
        )

    </div>
</div>


<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridJournalEntryConfigurationLine").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridJournalEntryConfigurationLine").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
     setRowButtonTooltip(".k-grid-Eliminar", "Eliminar");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>