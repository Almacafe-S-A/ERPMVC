@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Clientes";
}

<script>

    function Detalles(e) {          
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("Details", "Customer")?CustomerId=" + dataItem.CustomerId;    
    }
</script>

<h3 class="text-themecolor">Clientes</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Customer>()
              .Name("grid")
              .Columns(columns =>
              {
                  columns.Command(command =>
                  {
                      command.Custom(" ").Click("Detalles").IconClass("far fa-list-alt");
                      command.Edit().Text(" ").IconClass("fa fa-edit").UpdateText(" ").CancelText(" "); //command.Destroy();
                  }).Width(150).Title("Acciones");
                  columns.Bound(p => p.CustomerId).Width(150);
                  columns.Bound(p => p.CustomerName).Width(200)/*.Title("Cliente")*/;
                  //columns.Bound(p => p.CustomerTypeId).Width(180);
                  columns.Bound(p => p.Identidad).Width(250);
                  columns.Bound(p => p.ContactPerson).Width(200);
                  columns.Bound(p => p.RTN).Width(200);
                  columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(200);

              })
                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                       .Clear()
                                       .Contains("Contiene")
                                       .DoesNotContain("No contiene")
                                       .EndsWith("Termina con")
                                       .IsEqualTo("Es igual a")
                                       .IsNotEqualTo("No es igual a")
                                       .IsNull("Es nulo")
                                       .StartsWith("Inicia con")


                                 )
                                 .ForNumber(n => n
                                   .Clear()
                                   .IsEqualTo("Es igual a")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsNull("Es nulo")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 )
                                 .ForDate(d => d
                                 .Clear()
                                 .IsEqualTo("Es igual que")
                                 .IsGreaterThan("Es mayor que")
                                 .IsLessThan("Es menor que")
                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 .IsNotEqualTo("No es igual que")
                                  )
                               ))
              .ToolBar(tools =>
              {
                  tools.Create().Text("Agregar");
                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a excel");
                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a pdf");

              })
              .Editable(e=>e.Mode(GridEditMode.InLine))
              .Sortable()
              .Pageable()
              .Filterable()
              .Scrollable()

              .Pdf(pdf => pdf.FileName("ClienteReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
               .ProxyURL(Url.Action("Export", "Home")).AllPages())
                 .Excel(excel => excel.FileName("ClienteReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
               .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
              .DataSource(dataSource =>
                  dataSource
                    .WebApi()
                    .Events(q=>q.RequestEnd("OnRequestEnd_TopLinePriceGrid"))
                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.CustomerId);
                        model.Field(p => p.CustomerId).Editable(false);
                        model.Field(p => p.FechaCreacion).Editable(false);
                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "Customer"))
                    .Create(create => create.Action("Post", "Customer"))
                    .Update(update => update.Action("Put", "Customer", new { id = "{0}" }).Type(HttpVerbs.Post))
                    .Destroy(destroy => destroy.Action("Delete", "Customer", new { id = "{0}" }))
              )
                .Events(e =>
                {

                    //e.Save("onsave");
                })
)


<script>
    function OnRequestEnd_TopLinePriceGrid(e) {
        console.log(e.type);
        if (e.type === "update" || e.type === "create") {
            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.read();
        }
    }


    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#grid").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#grid").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    
</script>