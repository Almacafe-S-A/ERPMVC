

<script>
    //function dataJournalEntry() {
    //    return {
    //        JournalEntryId: $("#JournalEntryId").val()
    //    }
    //}


    //function AddJournalEntryLine() {
    //    var hola = $("#JournalEntryId").val();
    //    console.log(hola)
    //    //if ($("#JournalEntryId").val() == 0) {
    //    //    console.log("Hola")
    //    //    //alert('No puede agregar una bodega');
    //    //}
    //    //else {
    //    //    var grid = $("#gridNumeracionJournalEntryLine").getKendoGrid();
    //    //    grid.dataSource.read();
    //     $("#JournalEntryLineId").val('0');
    //    //    console.log("Adios")
    //    //}
    //}

    function OnRequestEnd_TopLinePriceGrid(e) {
        console.log(e.type);
        //console.log(hola)

        if (e.type === "update" || e.type === "create" || e.type=="read") {
           //var grid = $('#gridNumeracionJournalEntryLine').data('kendoGrid');
           // grid.dataSource.read();           
           // console.log(e);
            //console.log(e.response.Data);
            $("#TotalCredito").val(0);
            $("#TotalDebito").val(0);
            $("#TotalDebit").val(0);
            $("#TotalCredit").val(0);
            for (var i = 0; i < e.response.Data.length; i++) {
                $("#TotalCredito").val(Number( $("#TotalCredito").val())+Number(e.response.Data[i].Credit));
                $("#TotalDebito").val(Number($("#TotalDebito").val()) + Number(e.response.Data[i].Debit));
                $("#TotalDebit").val(Number($("#TotalDebit").val()) + Number(e.response.Data[i].Debit));
                $("#TotalCredit").val(Number($("#TotalCredit").val()) + Number(e.response.Data[i].Credit));
                //var idcostos = (e.response.Data[i].CostCenterId);
                //var idcuenta = (e.response.Data[i].AccountId);
            }
            //$('#CostCenter').on("change", function () {
            //    var prueba = $("#CostCenter").val();
            //    if (Number(prueba) == Number(idcostos)) {
            //        alert("No se puede ingresar el mismo centro de costos")
            //        $("#CostCenter").data('kendoDropDownList').value(0);
            //    }                             
            //});
            //$('#Cuenta').on("change", function () {
            //    var cuenta = $("#Cuenta").val();
            //    if (Number(cuenta) == Number(idcuenta)) {
            //        alert("No se puede ingresar la misma cuenta")
            //        $("#Cuenta").data('kendoDropDownList').value(0);
            //    }
            //});
        }
    }

    $('#Cuenta').on("change", function () {
        var displayedData = $("#gridNumeracionJournalEntryLine").data().kendoGrid.dataSource.view();
        var cuenta = $("#Cuenta").val();
        for (i = 0; i < displayedData.length; i++) {
            if (Number(displayedData[i].AccountId) == Number(cuenta)) {
                alert("Esta cuenta ya fue agregada al detalle.");
                $("#Cuenta").data("kendoDropDownList").value('');
                return;
            }
        };
    });

    $('#CostCenter').on("change", function () {
        var prueba = $("#CostCenter").val();
        var displayedData = $("#gridNumeracionJournalEntryLine").data().kendoGrid.dataSource.view();
        for (i = 0; i < displayedData.length; i++) {
            if (Number(displayedData[i].CostCenterId) == Number(prueba)) {
                alert("Esta centro de Costos ya fue agregado al detalle.");
                $("#CostCenter").data("kendoDropDownList").value('');
                return;
            }
        };
    });

    function customFunction(input) {

        if (input.attr('name') === "JournalEntryLineid" && input.val() === "0") {
            return false;
        }


        return true;
    }

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function onBound() {

    }


    function AddJournalEntryLine() {
        //$('#ModalJournalEntryLine').find(':input').not(':submit').val('');
        //$('#ModalJournalEntryLine').modal('show');
        $("#JournalEntryId").val('0');
       // console.log("Entre")
      }


    @*function EditJournalEntryLine(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                JournalEntryLineId: dataItem.JournalEntryLineId,
                JournalEntry: dataItem.JornalEntryId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddJournalEntryLine", "JournalEntryLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntryLine").html('');
                    $("#NumJournalEntryLine").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalJournalEntryLine').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }*@

</script>

<div class="row">
    <div class="col-lg-12">
        @*<div class="card">*@
        <div class="card-body">
            <h3 class="card-title">Líneas de Diarios</h3>
            <hr>
            <div class="row">
                <div class="col-md-4" >
                    <div class="form-group">
                        <label id="Cuentalbl">Cuenta</label>
                        <kendo-dropdownlist name="Cuenta" filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccione la cuenta "
                                            datatextfield="AccountName"
                                            datavaluefield="AccountId"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" page-size="9999999">
                                <transport>
                                    <read url="@Url.Action("GetAccounting", "Accounting")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                        <span id="Span" class="text-danger"></span>
                    </div>
                </div>
                @*<div class="col-md-4">
            <div class="form-group">
                <label id="Numlbl" class=" control-label" style="width:100%">Número</label>
                <input id="Num" type="text" class="form-control" style="min-width:100%" />
            </div>
        </div>*@
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Descripcionlbl" class=" control-label" style="width:100%">Descripción</label>
                        <input id="Descripcion" type="text" class="form-control" style="min-width:100%"  required maxlength="100"/>
                        <span id="Span2" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="CostCenterLbl">Centro de Costos</label>
                        <kendo-dropdownlist name="CostCenter" filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccione centro de costos"
                                            datatextfield="CostCenterName"
                                            datavaluefield="CostCenterId"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" page-size="9999999">
                                <transport>
                                    <read url="@Url.Action("Get", "CostCenter")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                        <span id="Span3" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Creditolbl" class=" control-label" style="width:100%">Crédito</label>
                        <input id="Credito" type="number" class="form-control" style="min-width:100%" min="0" maxlength="30" />
                        <span id="Span4" class="text-danger"></span>
                        <style>
                            input[type=number]::-webkit-outer-spin-button,
                            input[type=number]::-webkit-inner-spin-button {
                                -webkit-appearance: none;
                                margin: 0;
                            }

                            input[type=number] {
                                -moz-appearance: textfield;
                            }
                        </style>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Debitolbl" class=" control-label" style="width:100%">Débito</label>
                        <input id="Debito" type="number" class="form-control" style="min-width:100%" min="0" maxlength="30" /> 
                        <span id="Span5" class="text-danger"></span>
                    </div>
                </div>
               
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="JournalEntryLinelbl" class=" control-label" style="width:100%" hidden>Id Journal Entry Line</label>
                        <input id="JournalEntryLineId" type="text" class="form-control" style="min-width:100%" value="0" hidden />
                        <label class=" control-label" style="width:100%"></label>
                        <button type="button" id="btnAgregarLinea" class="form-control btn-miboton" onclick="RefrescarGridLinea();">Agregar Linea</button>
                    </div>
                </div>
            </div>
            @*<div class="row">
                <div class="col-md-4">
                    <button type="button" id="btnAgregarLinea" class="form-control btn-miboton" onclick="RefrescarGridLinea();">Agregar Linea</button>
                </div>
            </div>*@

        </div>
        @*</div>*@
    </div>
</div>


<script>   
    $("#Debito").change(function () {
        this.value = parseFloat(this.value).toFixed(4);
    });
    $("#Credito").change(function () {
        this.value = parseFloat(this.value).toFixed(4);
    });
    function AgregarLinea() {        
        debugger;
        var displayedData = $("#gridNumeracionJournalEntryLine").data().kendoGrid.dataSource.data();
        var id = -999999;
        debugger;
        var prueba = $("#JournalEntryLineId").val();
        console.log(prueba)
        if ($("#JournalEntryLineId").val() == 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    if (displayedData[i].JournalEntryLineId > id)
                        id = displayedData[i].JournalEntryLineId;
                }
                id = id + 1;
            }
            else if (Number($("#Cuenta").val()) > 0) {              
                id = 1;
            }
        }
        else {
            id = $("#JournalEntryLineId").val();   
        }
        return {
            'JournalEntryLineId': id,
            'JournalEntryId': @Model.JournalEntryId,
            'Debit': Number($("#Debito").val()),
            'Credit': Number($("#Credito").val()),
            'AccountId': Number($("#Cuenta").val()),
            'AccountName': $("#Cuenta").data("kendoDropDownList").text(),
           // 'Num': $("#Num").val(),
            'Description': $("#Descripcion").val(),
            'CostCenterId': Number($("#CostCenter").val()),
            'CostCenterName': $("#CostCenter").data("kendoDropDownList").text(),   
        } 
    }

    function RefrescarGridLinea() {
        var des = $("#Descripcion").val();
        var credito = $("#Credito").val();
        var debito = $("#Debito").val();
        var cuenta = $("#Cuenta").val();
        var costo = $("#CostCenter").val();
        if (des == "" ) {
            $('#Descripcion').after(' <span id="Span2" class="text-danger">Campos requeridos</span>');                      
            return false;
        }
        else if (cuenta == "") {
            $('#Cuenta').after(' <span id="Span" class="text-danger">Campos requeridos</span>');
            return false;
        }
        else if (costo == "") {
            $('#CostCenter').after(' <span id="Span3" class="text-danger">Campos requeridos</span>');
            return false;
        }
            else if (credito == "") {
            $('#Credito').after(' <span id="Span4" class="text-danger">Campos requeridos</span>');  
            return false;
        }
        else if (debito == "") {
            $('#Debito').after(' <span id="Span5" class="text-danger">Campos requeridos</span>');
            return false;
        }
        else {
            //document.getElementById("Span").innerHTML = "";
            $('#Descripcion').text('');
            $('#Credito').text('');
            $('#Debito').text('');
            var grid = $("#gridNumeracionJournalEntryLine").getKendoGrid();
            grid.dataSource.read();
            grid.refresh();
            $("#JournalEntryLineId").val(0);
            $('#Debito').val('');
            $('#Credito').val('');
            $('#Descripcion').val('');
            $("#CostCenter").data('kendoDropDownList').value(0);
            $("#Cuenta").data('kendoDropDownList').value(0);
        }           
    }

    //borrar mensajes en tiempo real
    $("#Cuenta").on("change", function () {
        $('#Span1').text('');
    });

    $("#Descripcion").keyup(function () {
        $('#Span2').text('');
    });
    $("#CostCenter").on("change", function (){
        $('#Span3').text('');
    });


    $("#Credito").keyup(function () {
        $('#Span4').text('');
    });
    $("#Debito").keyup(function () {
        $('#Span5').text('');
    });



</script>

@*<h3 class="text-themecolor">Lineas de Diarios</h3>*@
@(Html.Kendo().Grid<ERPMVC.Models.JournalEntryLine>
                                                                                                ()
                                                                                                .Name("gridNumeracionJournalEntryLine")
                                                                                                .Columns(columns =>
                                                                                                {
                                                                                                    columns.Command(command =>
                                                                                                    {
                                                                                                        //command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntryLine");
                                                                                                        //command.Edit().Text("Editar").UpdateText("Registrar").CancelText("Cancelar");
                                                                                                        command.Destroy().Text("Eliminar");
                                                                                                        //command.Destroy().Text(" ").IconClass("fa fa-trash");
                                                                                                        //  command.Destroy();
                                                                                                    }).Width(100);
                                                                                                    columns.Bound(p => p.JournalEntryLineId).Title("Id Line").Width(80);
                                                                                                    //columns.Bound(p => p.JournalEntryLineId).Width(150);
                                                                                                    //columns.Bound(p => p.JournalEntryId).Width(150).HtmlAttributes(new { JournalEntryId = "id" });
                                                                                                    //columns.Bound(p => p.JournalEntryId).Width(150);
                                                                                                    //columns.Bound(p => p.CreatedDate).Format("{0:dd/MM/yyyy}").Width(250);
                                                                                                    //columns.Bound(p => p.Num).Title("Número").Width(200); ;
                                                                                                    columns.Bound(p => p.Description).Width(200);
                                                                                                    columns.Bound(p => p.AccountId).Width(200);
                                                                                                    columns.Bound(p => p.AccountName).Width(200);
                                                                                                    //   columns.Bound(p => p.DrCr).Title("Tipo ").Width(250);
                                                                                                    columns.Bound(p => p.Credit).Width(200);
                                                                                                    columns.Bound(p => p.Debit).Width(200);
                                                                                                    columns.Bound(p => p.CostCenterId).Width(200);
                                                                                                    columns.Bound(p => p.CostCenterName).Width(200);
                                                                                                    //  columns.Bound(p => p.DebitME).Width(200);
                                                                                                    // columns.Bound(p => p.CreditME).Width(200);
                                                                                                    // columns.Bound(p => p.DebitSy).Width(200);
                                                                                                    //columns.Bound(p => p.CreditSy).Width(200);

                                                                                                })
                                                                                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                                                .Clear()
                                                                                                .Contains("Contiene")
                                                                                                .DoesNotContain("No contiene")
                                                                                                .EndsWith("Termina con")
                                                                                                .IsEqualTo("Es igual a")
                                                                                                .IsNotEqualTo("No es igual a")
                                                                                                .IsNull("Es nulo")
                                                                                                .StartsWith("Inicia con")


                                                                                                )
                                                                                                .ForNumber(n => n
                                                                                                .Clear()
                                                                                                .IsEqualTo("Es igual a")
                                                                                                .IsGreaterThan("Es mayor que")
                                                                                                .IsLessThan("Es menor que")
                                                                                                .IsNull("Es nulo")
                                                                                                .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                                )
                                                                                                .ForDate(d => d
                                                                                                .Clear()
                                                                                                .IsEqualTo("Es igual que")
                                                                                                .IsGreaterThan("Es mayor que")
                                                                                                .IsLessThan("Es menor que")
                                                                                                .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                                .IsNotEqualTo("No es igual que")
                                                                                                )
                                                                                                ))
                                                                                                .ToolBar(tools =>
                                                                                                {
                                                                                                    // tools.Create();
                                                                                                    // tools.Create().Text("Agregar");
                                                                                                    //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus");
                                                                                                    //.HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddJournalEntryLine()" });
                                                                                                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                                })
                                                                                                .Editable(e => e.Mode(GridEditMode.InLine))
                                                                                                .Sortable()
                                                                                                .Pageable()
                                                                                                .Filterable()
                                                                                                .Scrollable()
                                                                                                .Pdf(pdf => pdf.FileName("JournalEntryLineReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                                .Excel(excel => excel.FileName("JournalEntryLineReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                                .DataSource(dataSource => dataSource
                                                                                                .WebApi()
                                                                                                .Events(q => q.RequestEnd("OnRequestEnd_TopLinePriceGrid"))
                                                                                                .ServerOperation(true)
                                                                                                .Model(model =>
                                                                                                {
                                                                                                    model.Id(p => p.JournalEntryLineId);
                                                                                                    model.Field(p => p.JournalEntryLineId).Editable(false);
                                                                                                    // model.Field(p => p.Num).Editable(true);
                                                                                                    model.Field(p => p.Description).Editable(true);
                                                                                                    model.Field(p => p.AccountId).Editable(true);
                                                                                                    model.Field(p => p.AccountName).Editable(true);
                                                                                                    // model.Field(p => p.DrCr).Editable(true);
                                                                                                    model.Field(p => p.Debit).Editable(true);
                                                                                                    model.Field(p => p.Credit).Editable(true);
                                                                                                    model.Field(P => P.CostCenterId).Editable(false);
                                                                                                    model.Field(p => p.CostCenterName).Editable(true);
                                                                                                    //model.Field(p => p.DebitME).Editable(true);
                                                                                                    //model.Field(p => p.CreditME).Editable(true);
                                                                                                    //model.Field(p => p.DebitSy).Editable(true);
                                                                                                    //model.Field(p => p.CreditSy).Editable(true);
                                                                                                    /*     columns.Bound(p => p.Num).Title("Centro de Costo").Width(150);
                                                                                                    columns.Bound(p => p.AccountId).Title("Cuenta").Width(200);
                                                                                                    columns.Bound(p => p.DrCr).Title("Tipo ").Width(250);
                                                                                                    columns.Bound(p => p.Amount).Title("Monto ").Width(250);
                                                                                               */
                                                                                                })
                                                                                                .Events(events => events.Error("error_handler"))
                                                                                                .Read(read => read.Action("GetJournalEntryLine", "JournalEntryLine").Data("AgregarLinea"))
                                                                                                .Create(create => create.Action("Insert", "JournalEntryLine"))
                                                                                                 .Destroy(destroy => destroy.Action("Delete", "JournalEntryLine").Type(HttpVerbs.Post))
                                                                                                //.Update(update => update.Action("Update", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Put))
                                                                                                // .Destroy(destroy => destroy.Action("Delete", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Delete))

                                                                                                )
                                                                                                .Events(e =>
                                                                                                {
                                                                                                    e.Save("onsave");
                                                                                                    e.DataBound("onBound");


                                                                                                })
)


@*<div id="NumJournalEntryLine">
        @await Html.PartialAsync("pvwAddJournalEntryLine", new ERPMVC.DTO.JournalEntryLineDTO { JournalEntryLineId = 0, JournalEntryId = 0 })
    </div>*@
<hr>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            @*<label id="Totallbl" class=" control-label" style="width:100%">Total:</label>*@
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%"></label>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%"></label>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%">Total Crédito:</label>
            <input id="TotalCredito" type="number" class="form-control" style="min-width:80%" />
            <span id="spanCredito" class="text-danger"></span>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%">Total Débito:</label>
            <input id="TotalDebito" type="number" class="form-control" style="min-width:80%" />
            <span id="spanDebito" class="text-danger"></span>
        </div>
    </div>
</div>


