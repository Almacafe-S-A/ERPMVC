

<script>
    function customFunction(input) {

        if (input.attr('name') === "JournalEntryId" && input.val() === "0") {
            return false;
        }


        return true;
    }

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function AddJournalEntryLine() {



        $('#ModalJournalEntryLine').find(':input').not(':submit').val('');

        $('#ModalJournalEntryLine').modal('show');
        $("#JournalEntryLineId").val('0');




      }


    function EditJournalEntryLine(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                JournalEntryLineId: dataItem.JournalEntryLineId,
                JournalEntry: dataItem.JornalEntryId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddJournalEntryLine", "JournalEntryLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntryLine").html('');
                    $("#NumJournalEntryLine").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalJournalEntryLine').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

</script>

<h3 class="text-themecolor">Lineas de Diarios</h3>
@(Html.Kendo().Grid<ERPMVC.Models.JournalEntryLine>
                    ()
                    .Name("gridNumeracionJournalEntryLine")
                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntryLine");
                            command.Destroy().Text(" ").IconClass("fa fa-trash");
                            //  command.Destroy();
                        }).Width(100);
                        columns.Bound(p => p.JournalEntryLineId).Width(1);
                        //columns.Bound(p => p.CreatedDate).Format("{0:dd/MM/yyyy}").Width(250);
                        columns.Bound(p => p.Num).Width(150);
                        columns.Bound(p => p.Description).Width(200);
                        columns.Bound(p => p.AccountId).Width(200).ClientFooterTemplate("<div>Total:</div>");
                        //   columns.Bound(p => p.DrCr).Title("Tipo ").Width(250);
                        columns.Bound(p => p.Debit).Width(200).ClientFooterTemplate("<div><input type=text</input></div>");
                        columns.Bound(p => p.Credit).Width(200).ClientFooterTemplate("<div><input type=text</input></div>");

                    })
                    .Filterable(f => f.Operators(o => o.ForString(s => s
                    .Clear()
                    .Contains("Contiene")
                    .DoesNotContain("No contiene")
                    .EndsWith("Termina con")
                    .IsEqualTo("Es igual a")
                    .IsNotEqualTo("No es igual a")
                    .IsNull("Es nulo")
                    .StartsWith("Inicia con")


                    )
                    .ForNumber(n => n
                    .Clear()
                    .IsEqualTo("Es igual a")
                    .IsGreaterThan("Es mayor que")
                    .IsLessThan("Es menor que")
                    .IsNull("Es nulo")
                    .IsLessThanOrEqualTo("Es menor o igual que")
                    .IsGreaterThanOrEqualTo("Es mayor o igual que")
                    )
                    .ForDate(d => d
                    .Clear()
                    .IsEqualTo("Es igual que")
                    .IsGreaterThan("Es mayor que")
                    .IsLessThan("Es menor que")
                    .IsLessThanOrEqualTo("Es menor o igual que")
                    .IsGreaterThanOrEqualTo("Es mayor o igual que")
                    .IsNotEqualTo("No es igual que")
                    )
                    ))
                    .ToolBar(tools =>
                    {
                        // tools.Create();
                        tools.Create().Text("Agregar");
                        //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus");
                        //.HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddJournalEntryLine()" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                    })
                    .Editable(e => e.Mode(GridEditMode.InLine))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("JournalEntryLineReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("JournalEntryLineReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>  dataSource
                    .WebApi()
                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.JournalEntryId);
                        model.Field(p => p.Num).Editable(true);
                        model.Field(p => p.Description).Editable(true);
                        model.Field(p => p.AccountId).Editable(true);
                        // model.Field(p => p.DrCr).Editable(true);
                        model.Field(p => p.Credit).Editable(true);
                        model.Field(p => p.Debit).Editable(true);
                        /*     columns.Bound(p => p.Num).Title("Centro de Costo").Width(150);
                        columns.Bound(p => p.AccountId).Title("Cuenta").Width(200);
                        columns.Bound(p => p.DrCr).Title("Tipo ").Width(250);
                        columns.Bound(p => p.Amount).Title("Monto ").Width(250);
                   */
                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("GetJournalEntryLine", "JournalEntryLine"))
                    .Create(create => create.Action("Insert", "JournalEntryLine"))
                    .Update(update => update.Action("Update", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Put))
                    .Destroy(destroy => destroy.Action("Delete", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Delete))

                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)


@*<div id="NumJournalEntryLine">
    @await Html.PartialAsync("pvwAddJournalEntryLine", new ERPMVC.DTO.JournalEntryLineDTO { JournalEntryLineId = 0, JournalEntryId = 0 })
</div>*@