

<script>
    //function dataJournalEntry() {
    //    return {
    //        JournalEntryId: $("#JournalEntryId").val()
    //    }
    //}


    //function AddJournalEntryLine() {
    //    var hola = $("#JournalEntryId").val();
    //    console.log(hola)
    //    //if ($("#JournalEntryId").val() == 0) {
    //    //    console.log("Hola")
    //    //    //alert('No puede agregar una bodega');
    //    //}
    //    //else {
    //    //    var grid = $("#gridNumeracionJournalEntryLine").getKendoGrid();
    //    //    grid.dataSource.read();
    //     $("#JournalEntryLineId").val('0');
    //    //    console.log("Adios")
    //    //}
    //}

    function OnRequestEnd_TopLinePriceGrid(e) {
        console.log(e.type);
        //console.log(hola)

        if (e.type === "update" || e.type === "create" || e.type=="read") {
           // var grid = $('#gridNumeracionJournalEntryLine').data('kendoGrid');
            // grid.dataSource.read();
           // console.log(e);
            //console.log(e.response.Data);
            for (var i = 0; i < e.response.Data.length; i++) {
                $("#TotalCredito").val(Number( $("#TotalCredito").val())+Number(e.response.Data[i].Credit));
                $("#TotalDebito").val(Number($("#TotalDebito").val())+Number(e.response.Data[i].Debit));
            }
           
        }
        // console.log("Entre")
       
    }


    function customFunction(input) {

        if (input.attr('name') === "JournalEntryLineid" && input.val() === "0") {
            return false;
        }


        return true;
    }

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function onBound() {

    }


    function AddJournalEntryLine() {
        //$('#ModalJournalEntryLine').find(':input').not(':submit').val('');
        //$('#ModalJournalEntryLine').modal('show');
        $("#JournalEntryId").val('0');
        console.log("Entre")
      }


    @*function EditJournalEntryLine(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                JournalEntryLineId: dataItem.JournalEntryLineId,
                JournalEntry: dataItem.JornalEntryId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddJournalEntryLine", "JournalEntryLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntryLine").html('');
                    $("#NumJournalEntryLine").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalJournalEntryLine').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }*@

</script>

<div class="row">
    <div class="col-lg-12">
        @*<div class="card">*@
        <div class="card-body">
            <h3 class="card-title">Lineas de Diarios</h3>
            <hr>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Cuentalbl">Cuenta</label>
                        <kendo-dropdownlist name="Cuenta" filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccione la cuenta "
                                            required
                                            datatextfield="AccountName"
                                            datavaluefield="AccountId"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" page-size="9999999">
                                <transport>
                                    <read url="@Url.Action("GetAccounting", "Accounting")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Creditolbl" class=" control-label" style="width:100%">Crédito</label>
                        <input id="Credito" type="number" class="form-control" style="min-width:100%" min="0" />
                        <style>
                            input[type=number]::-webkit-outer-spin-button,
                            input[type=number]::-webkit-inner-spin-button {
                                -webkit-appearance: none;
                                margin: 0;
                            }

                            input[type=number] {
                                -moz-appearance: textfield;
                            }
                        </style>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Debitolbl" class=" control-label" style="width:100%">Débito</label>
                        <input id="Debito" type="number" class="form-control" style="min-width:100%" min="0" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Numlbl" class=" control-label" style="width:100%">Número</label>
                        <input id="Num" type="text" class="form-control" style="min-width:100%"  />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Descripcionlbl" class=" control-label" style="width:100%">Descripción</label>
                        <input id="Descripcion" type="text" class="form-control" style="min-width:100%"  />
                    </div>
                </div>

                <div class="col-md-2">
                    <button type="button" id="btnAgregarLinea" class="form-control btn-miboton" onclick="RefrescarGridLinea();">Agregar Linea</button>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="JournalEntryLinelbl" class=" control-label" style="width:100%" hidden>Id Journal Entry Line</label>
                        <input id="JournalEntryLineId" type="text" class="form-control" style="min-width:100%" value="0" hidden />
                    </div>
                </div>
            </div>
        </div>
        @*</div>*@
    </div>
</div>


<script>
    function AgregarLinea() {     
        var displayedData = $("#gridNumeracionJournalEntryLine").data().kendoGrid.dataSource.data();
        var id = -999999;
        debugger;
        var prueba = $("#JournalEntryLineId").val();
        console.log(prueba)
        if ($("#JournalEntryLineId").val() == 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    if (displayedData[i].JournalEntryLineId > id)
                        id = displayedData[i].JournalEntryLineId;
                }
                id = id + 1;
            }
            else {
                id = 1;
            }
            
        }
        else {
            id = $("#JournalEntryLineId").val();
        }


        return {
            'JournalEntryLineId': id,
            'JournalEntryId': @Model.JournalEntryId,
            'Debit': Number($("#Debito").val()),
            'Credit': Number($("#Credito").val()),
            'AccountId': Number($("#Cuenta").val()),
            'Num': $("#Num").val(),
            'Description': $("#Descripcion").val(),

        }
    }

    function RefrescarGridLinea() {

        var grid = $("#gridNumeracionJournalEntryLine").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();

        $("#JournalEntryLineId").val(0);

    }

</script>

@*<h3 class="text-themecolor">Lineas de Diarios</h3>*@
@(Html.Kendo().Grid<ERPMVC.Models.JournalEntryLine>
                                                                                            ()
                                                                                            .Name("gridNumeracionJournalEntryLine")
                                                                                            .Columns(columns =>
                                                                                            {
                                                                                                columns.Command(command =>
                                                                                                {
                                                                                                    //command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntryLine");
                                                                                                    command.Edit().Text("Editar").UpdateText("Registrar").CancelText("Cancelar");
                                                                                                    //command.Destroy().Text(" ").IconClass("fa fa-trash");
                                                                                                    //  command.Destroy();
                                                                                                }).Width(100);
                                                                                                columns.Bound(p => p.JournalEntryLineId).Title("Id Line").Width(80);
                                                                                                //columns.Bound(p => p.JournalEntryLineId).Width(150);
                                                                                                //columns.Bound(p => p.JournalEntryId).Width(150).HtmlAttributes(new { JournalEntryId = "id" });
                                                                                                //columns.Bound(p => p.JournalEntryId).Width(150);
                                                                                                //columns.Bound(p => p.CreatedDate).Format("{0:dd/MM/yyyy}").Width(250);
                                                                                                columns.Bound(p => p.Num).Width(150);
                                                                                                columns.Bound(p => p.Description).Width(200);
                                                                                                columns.Bound(p => p.AccountId).Width(200);
                                                                                                //   columns.Bound(p => p.DrCr).Title("Tipo ").Width(250);
                                                                                                columns.Bound(p => p.Credit).Width(200);
                                                                                                columns.Bound(p => p.Debit).Width(200);
                                                                                                //  columns.Bound(p => p.DebitME).Width(200);
                                                                                                // columns.Bound(p => p.CreditME).Width(200);
                                                                                                // columns.Bound(p => p.DebitSy).Width(200);
                                                                                                //columns.Bound(p => p.CreditSy).Width(200);

                                                                                            })
                                                                                            .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                                            .Clear()
                                                                                            .Contains("Contiene")
                                                                                            .DoesNotContain("No contiene")
                                                                                            .EndsWith("Termina con")
                                                                                            .IsEqualTo("Es igual a")
                                                                                            .IsNotEqualTo("No es igual a")
                                                                                            .IsNull("Es nulo")
                                                                                            .StartsWith("Inicia con")


                                                                                            )
                                                                                            .ForNumber(n => n
                                                                                            .Clear()
                                                                                            .IsEqualTo("Es igual a")
                                                                                            .IsGreaterThan("Es mayor que")
                                                                                            .IsLessThan("Es menor que")
                                                                                            .IsNull("Es nulo")
                                                                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                            )
                                                                                            .ForDate(d => d
                                                                                            .Clear()
                                                                                            .IsEqualTo("Es igual que")
                                                                                            .IsGreaterThan("Es mayor que")
                                                                                            .IsLessThan("Es menor que")
                                                                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                            .IsNotEqualTo("No es igual que")
                                                                                            )
                                                                                            ))
                                                                                            .ToolBar(tools =>
                                                                                            {
                                                                                                // tools.Create();
                                                                                                // tools.Create().Text("Agregar");
                                                                                                //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus");
                                                                                                //.HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddJournalEntryLine()" });
                                                                                                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                            })
                                                                                            .Editable(e => e.Mode(GridEditMode.InLine))
                                                                                            .Sortable()
                                                                                            .Pageable()
                                                                                            .Filterable()
                                                                                            .Scrollable()
                                                                                            .Pdf(pdf => pdf.FileName("JournalEntryLineReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                            .Excel(excel => excel.FileName("JournalEntryLineReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                            .DataSource(dataSource => dataSource
                                                                                            .WebApi()
                                                                                            .Events(q => q.RequestEnd("OnRequestEnd_TopLinePriceGrid"))
                                                                                            .ServerOperation(true)
                                                                                            .Model(model =>
                                                                                            {
                                                                                                model.Id(p => p.JournalEntryLineId);
                                                                                                model.Field(p => p.JournalEntryLineId).Editable(false);
                                                                                                model.Field(p => p.Num).Editable(true);
                                                                                                model.Field(p => p.Description).Editable(true);
                                                                                                model.Field(p => p.AccountId).Editable(true);
                                                                                                // model.Field(p => p.DrCr).Editable(true);
                                                                                                model.Field(p => p.Debit).Editable(true);
                                                                                                model.Field(p => p.Credit).Editable(true);
                                                                                                //model.Field(p => p.DebitME).Editable(true);
                                                                                                //model.Field(p => p.CreditME).Editable(true);
                                                                                                //model.Field(p => p.DebitSy).Editable(true);
                                                                                                //model.Field(p => p.CreditSy).Editable(true);
                                                                                                /*     columns.Bound(p => p.Num).Title("Centro de Costo").Width(150);
                                                                                                columns.Bound(p => p.AccountId).Title("Cuenta").Width(200);
                                                                                                columns.Bound(p => p.DrCr).Title("Tipo ").Width(250);
                                                                                                columns.Bound(p => p.Amount).Title("Monto ").Width(250);
                                                                                           */
                                                                                            })
                                                                                            .Events(events => events.Error("error_handler"))
                                                                                            .Read(read => read.Action("GetJournalEntryLine", "JournalEntryLine").Data("AgregarLinea"))
                                                                                            .Create(create => create.Action("Insert", "JournalEntryLine"))
                                                                                            //.Update(update => update.Action("Update", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Put))
                                                                                            // .Destroy(destroy => destroy.Action("Delete", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Delete))

                                                                                            )
                                                                                            .Events(e =>
                                                                                            {
                                                                                                e.Save("onsave");
                                                                                                e.DataBound("onBound");


                                                                                            })
)


@*<div id="NumJournalEntryLine">
        @await Html.PartialAsync("pvwAddJournalEntryLine", new ERPMVC.DTO.JournalEntryLineDTO { JournalEntryLineId = 0, JournalEntryId = 0 })
    </div>*@
<hr>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            @*<label id="Totallbl" class=" control-label" style="width:100%">Total:</label>*@
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%"></label>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%"></label>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%">Total Crédito:</label>
            <input id="TotalCredito" type="number" class="form-control" style="min-width:80%" />
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%">Total Débito:</label>
            <input id="TotalDebito" type="number" class="form-control" style="min-width:80%" />
        </div>
    </div>
</div>


