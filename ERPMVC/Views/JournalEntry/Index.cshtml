@using Kendo.Mvc.UI
@using System.Security.Claims
@model ERPMVC.Models.JournalEntry

@{
    ViewData["Title"] = "Movimientos Financieros";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function clearsession() {
         var dataObject = ["journalentryline"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }


    function AddJournalEntry() {
        clearsession();
        $('#ModalJournalEntry').find(':input').not(':submit').val('');
        $("#JournalEntryId").val('0');
        var CierreContableDiaAnterior =true; /////Esta Validacion se hara con los cierres

        //$('#ModalJournalEntry').modal('show');
        //document.getElementById("btnJournalEntry").disabled = false;
        //$("#TypeOfAdjustmentId").data('kendoDropDownList').value(65);
        ///
        if (CierreContableDiaAnterior == true) {
            var dataObject = {
                JournalEntryId: 0,
                editar: 1,
                TypeOfAdjustmentId: 65,
                TypeOfAdjustmentName : "Asiento Contable"
            };
            $.ajax({
                url: '@Url.Action("pvwAddJournalEntry", "JournalEntry")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntry").html('');
                    $("#NumJournalEntry").html(result);
                    //$("#btnCAI").hide();
                    $('#ModalJournalEntry').modal('show');
                    // document.getElementById("btnJournalEntry").disabled = false;
                    $("#TypeOfAdjustmentId").data('kendoDropDownList').value(65);
                    $("#EstadoId").data('kendoDropDownList').value(5);
                    //document.getElementById("btnJournalEntry").disabled = true;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });

            var dataSource = $("#gridNumeracionJournalEntryLine").data("kendoGrid").dataSource;
            var raw = dataSource._data;
            //console.log(raw);
            debugger;
            for (var i = dataSource._data.length - 1; i >= 0; i--) {
                item = raw[i];
                dataSource.remove(item);
            }
        }
        else {
            $.toast({
                heading: 'Validación',
                text: "Ejecute cierre de los días pendientes!",
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
            });
        }
    }


    function EditJournalEntry(e) {
        e.preventDefault();
        clearsession();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                JournalEntryId: dataItem.JournalEntryId,
                editar: 0,
            };
            $.ajax({
                url: '@Url.Action("pvwAddJournalEntry", "JournalEntry")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntry").html('');
                    $("#NumJournalEntry").html(result);
                    //$("#btnCAI").hide();
                    $('#ModalJournalEntry').modal('show');
                   // document.getElementById("btnJournalEntry").disabled = true;
                    //document.getElementById("btnAgregarLinea").disabled = true;
                    $("#IdPartyType").data("kendoDropDownList").value(0);

                        $("#customer").hide();
                        $("#party").show();
                        $("#vendor").hide();
                        $("#employe").hide();

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
        });

    }

    function AprobarAsiento(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.IdEstado != 6) {
        if (confirm('Esta seguro de aprobar este?')) {
            e.preventDefault();
            var dataObject = {
                JournalEntryId: dataItem.JournalEntryId,
                editar: 0
            };

            $.ajax({
                url: '@Url.Action("Aprobar","JournalEntry")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'El se ha generado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                    RefrescarGrid();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }
        }
        else {
            notification.show({
                title: "Validación",
                message: "El no ha sido aprobado"
            }, "error");
        }
    }


    function RechazarAsiento(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.IdEstado != 7) {
        if (confirm('Esta seguro de rechazar este?')) {
            e.preventDefault();
            var dataObject = {
                JournalEntryId: dataItem.JournalEntryId,
                editar: 0
            };

            $.ajax({
                url: '@Url.Action("Rechazar","JournalEntry")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'El se ha rechazado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });
                    RefrescarGrid();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }
        }
        else {
            notification.show({
                title: "Validación",
                message: "El no ha sido rechazado"
            }, "error");
        }
    }


    function DetallesJournalEntry(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("Details", "JournalEntry")?JournalEntryId=" + dataItem.JournalEntryId;
        //update => update.Action("Update", "Purch", new { TypeAccountId = "{0}" }).Type(HttpVerbs.Put)
    }


    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (Number(this.EstadoId) != 5 ) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Rechazar').hide();
            }
        })
    }

    function EjecucionCierreContableDiaAnterior() {
        var CierreContableDiaAnterior
        $.ajax({
            url: '@Url.Action("CierreContableDiaAnterior", "JournalEntry")',
            method: 'GET',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            success: function (result) {
                if (result != null) {
                    CierreContableDiaAnterior = true;
                }
                else {
                    CierreContableDiaAnterior = false;
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
        return CierreContableDiaAnterior
    }

    function Imprimir(e, id) {
        debugger;
        var dataItem;

        if (e != null) {
            var dataItemEstado = this.dataItem($(e.currentTarget).closest("tr"));
            if (dataItemEstado.EstadoId == 6) {
                e.preventDefault();
                dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                var url = '@Url.Action("SFAsientoContable", "JournalEntry")/' + dataItem.JournalEntryId;
                var win = window.open(url, '_blank');
                win.focus();
            }
            else {
                alert("Este debe ser Aprobado primero para generar el reporte.")
            }
        }
        else {
            if ($("#EstadoId").val() == 6) {
                dataItem = { JournalEntryId: $("#JournalEntryId").val() };
                var url = '@Url.Action("SFAsientoContable", "JournalEntry")/' + dataItem.JournalEntryId;
                var win = window.open(url, '_blank');
                win.focus();
            }
            else {
                alert("Este debe ser Aprobado primero para generar el reporte.")
            }
        }
    }
    function ReporteAsientos() {
        debugger;
        var url = '@Url.Action("SFReporteAsientos", "JournalEntry")';
        var win = window.open(url, '_blank');
        win.focus();
    }

     function GetPeriodo(){
        var periodo = $("#PeriodoId").val();
        return {
            PeriodoId : periodo,
        }
    }


    
</script>

<h3 class="text-themecolor">Asiento Contable</h3>
<div class ="row">
        <div class="col-md-4">
            <div class="form-group">
                <label  class="control-label" style="width:100%">Periodo</label>
                <kendo-dropdownlist name="Id" filter="Kendo.Mvc.UI.FilterType.Contains"
                                    id="PeriodoId"
                                    option-label="Seleccione el periodo"
                                    for="PeriodoId"
                                    on-change=" RefrescarGrid"
                                    datatextfield="Anio"
                                    datavaluefield="Id"
                                    auto-bind="true"
                                    data-val-required="Seleccione el periodo para visualizar asiento"
                                    style="width: 100%;">
                    <datasource type="DataSourceTagHelperType.WebApi">
                        <transport>
                            <read url="@Url.Action("Get", "Periodo")" />
                        </transport>
                    </datasource>

                </kendo-dropdownlist>
                <span asp-validation-for="PeriodoId" class="text-danger"></span>
            </div>
    </div>
</div>
<div id="example">
    
    @(Html.Kendo().Grid<ERPMVC.Models.JournalEntry>
    ()
    .Name("gridNumeracionJournalEntry")
    .Columns(columns =>
    {

        columns.Command(command =>
        {
            //.Custom("Ver detalles").Text(" ").IconClass("far fa-list-alt").Click("DetallesJournalEntry");
            //command.Custom("Ver detalles").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntry");
            if(permisos.HasClaim("Contabilidad.Movimientos.Asiento Contable.Editar", "true"))
            {
                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntry");
            }

            command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("Imprimir");


            if (permisos.HasClaim("Contabilidad.Movimientos.Asiento Contable.Aprobar", "true"))
            {
                command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("AprobarAsiento");
                command.Custom("Rechazar").Text(" ").IconClass("fa fa-thumbs-down").Click("RechazarAsiento");

            }

            //  command.Destroy();
        }).Title("Acciones").Width(175);

        columns.Bound(p => p.JournalEntryId).Title("Id").Width(200);
        columns.Bound(p => p.DatePosted).Title("Fecha de  Transacción").Format("{0:dd/MM/yyyy}").Width(250);
        columns.Bound(p => p.PartyId).Width(150).Hidden(true);
        columns.Bound(p => p.PartyName).Title("Beneficiario").Width(200);
        columns.Bound(p => p.TotalDebit).Width(200).Format("{0:N2}");
        columns.Bound(p => p.TotalCredit).Width(200).Format("{0:N2}");
        columns.Bound(p => p.Memo).Title("Sinopsis").Width(350);
        columns.Bound(p => p.EstadoName).Title("Estado").Width(170);
        columns.Bound(p => p.EstadoId).Hidden().Title("Estado").Width(170);
        columns.Bound(p => p.PartyTypeId).Hidden().Title("").Width(170);
    })
    .Filterable(f => f.Operators(o => o.ForString(s => s
    .Clear()
    .Contains("Contiene")
    .DoesNotContain("No contiene")
    .EndsWith("Termina con")
    .IsEqualTo("Es igual a")
    .IsNotEqualTo("No es igual a")
    .IsNull("Es nulo")
    .StartsWith("Inicia con")


    )
    .ForNumber(n => n
    .Clear()
    .IsEqualTo("Es igual a")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsNull("Es nulo")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    )
    .ForDate(d => d
    .Clear()
    .IsEqualTo("Es igual que")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    .IsNotEqualTo("No es igual que")
    )
    ))
    .ToolBar(tools =>
    {
        // tools.Create();
        if (permisos.HasClaim("Contabilidad.Movimientos.Asiento Contable.Agregar", "true"))
        {
            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddJournalEntry()" });
        }
        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
        tools.Custom().Text("Reporte Asientos").IconClass("k-icon k-i-report")
        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ReporteAsientos()" });

    })
    .Editable(e => e.Mode(GridEditMode.PopUp))
    .Sortable()
    .AutoBind(true)
    .Pageable(s => s
    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
    .Empty("No hay datos.")).Refresh(true)
    )
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("Asiento_Contable_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
    .Excel(excel => excel.FileName("Asiento_Contable_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .Events(e => e.DataBound("dataBound"))
    .DataSource(dataSource =>
    dataSource
    .WebApi()

    .ServerOperation(true)
    .Model(model =>
    {
        model.Id(p => p.JournalEntryId);
        model.Field(p => p.DatePosted).Editable(true);
        model.Field(p => p.PartyId).Editable(true);
        model.Field(p => p.TotalDebit).Editable(true);
        model.Field(p => p.TotalCredit).Editable(true);
        model.Field(p => p.Memo).Editable(true);
        model.Field(p => p.EstadoName).Editable(true);
        model.Field(p => p.EstadoId).Editable(true);

    })
    .Filter(f => f.Add(m => m.TypeOfAdjustmentId).IsEqualTo(65))
    .Sort(s => s.Add(m => m.JournalEntryId).Descending())
    .Events(events => events.Error("error_handler"))
    .Read(read => read.Action("GetJournalEntryAsientosByPeriodo", "JournalEntry").Data("GetPeriodo"))
    .Create(create => create.Action("Insert", "JournalEntry"))
    .Update(update => update.Action("Update", "JournalEntry", new { id = "{0}" }))
    //.Update(update => update.Action("Update", "JournalEntry", new { JournalEntryId = "{0}" }).Type(HttpVerbs.Put))
    //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

    )
    .Events(e =>
    {
        e.Save("onsave");

    })
    )
</div>

    <div id="NumJournalEntry">
        @await Html.PartialAsync("pvwAddJournalEntry", new ERPMVC.DTO.JournalEntryDTO { JournalEntryId = 0, Date = DateTime.Now, DatePosted = DateTime.Now })
    </div>
    <script>

        function setToolbarTooltip(btn_cl, btn_tooltip) {
            $("#gridNumeracionJournalEntry").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }

        function setRowButtonTooltip(btn_cl, btn_tooltip) {
            $("#gridNumeracionJournalEntry").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }
        setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
        setToolbarTooltip(".k-grid-Editar", "Editar Registro");
        setToolbarTooltip(".k-grid-Imprimir", "Imprimir registro");
        setRowButtonTooltip(".k-grid-Aprobar", "Aprobar Asiento");
        setRowButtonTooltip(".k-grid-Rechazar", "Rechazar Asiento");
    </script>