@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Movimientos Financieros";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function clearsession() {
         var dataObject = ["journalentryline"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }


    function AddJournalEntry() {
        clearsession();
        $('#ModalJournalEntry').find(':input').not(':submit').val('');      
        $("#JournalEntryId").val('0');
      
        //$('#ModalJournalEntry').modal('show');
        //document.getElementById("btnJournalEntry").disabled = false;
        //$("#TypeOfAdjustmentId").data('kendoDropDownList').value(65);
        ///
        var dataObject = {
                JournalEntryId:0,
                editar: 1,
            };
            $.ajax({
                url: '@Url.Action("pvwAddJournalEntry", "JournalEntry")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntry").html('');
                    $("#NumJournalEntry").html(result);
                    //$("#btnCAI").hide();
                    $('#ModalJournalEntry').modal('show');
                   // document.getElementById("btnJournalEntry").disabled = false;
                    $("#TypeOfAdjustmentId").data('kendoDropDownList').value(65);
                    //document.getElementById("btnJournalEntry").disabled = true;                  
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
        });

        var dataSource = $("#gridNumeracionJournalEntryLine").data("kendoGrid").dataSource;
        var raw = dataSource._data;
        //console.log(raw);
        debugger;
        for (var i = dataSource._data.length - 1; i >= 0; i--) {
            item = raw[i];
            dataSource.remove(item);
        }

      }


    function EditJournalEntry(e) {
        e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                JournalEntryId: dataItem.JournalEntryId,
                editar: 1,
            };
            $.ajax({
                url: '@Url.Action("pvwAddJournalEntry", "JournalEntry")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntry").html('');
                    $("#NumJournalEntry").html(result);
                    //$("#btnCAI").hide();
                    $('#ModalJournalEntry').modal('show');
                   // document.getElementById("btnJournalEntry").disabled = true;
                    //document.getElementById("btnAgregarLinea").disabled = true;
                    $("#IdPartyType").data("kendoDropDownList").value(dataItem.PartyTypeId);
                    if (dataItem.PartyTypeId == 1) {
                        $("#customer").show();
                        $("#party").hide();
                        $("#vendor").hide();
                        $("#employe").hide();
                    }
                    else if (dataItem.PartyTypeId == 2) {
                        $("#customer").hide();
                        $("#party").hide();
                        $("#vendor").hide();
                        $("#employe").show();
                    }
                    else if (dataItem.PartyTypeId == 3) {
                        $("#customer").hide();
                        $("#party").hide();
                        $("#vendor").show();
                        $("#employe").hide();
                    }
                    else {
                        $("#customer").hide();
                        $("#party").show();
                        $("#vendor").hide();
                        $("#employe").hide();
                    }
                   
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
        });
      
    }
    

    function DetallesJournalEntry(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("Details", "JournalEntry")?JournalEntryId=" + dataItem.JournalEntryId;
        //update => update.Action("Update", "Purch", new { TypeAccountId = "{0}" }).Type(HttpVerbs.Put)
    }

</script>

<h3 class="text-themecolor">Asiento Contable</h3>
@(Html.Kendo().Grid<ERPMVC.Models.JournalEntry>
        ()
        .Name("gridNumeracionJournalEntry")
        .Columns(columns =>
        {
            columns.Command(command =>
            {
                //.Custom("Ver detalles").Text(" ").IconClass("far fa-list-alt").Click("DetallesJournalEntry");
                command.Custom("Ver detalles").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntry");

                //  command.Destroy();
            }).Width(100);

            columns.Bound(p => p.JournalEntryId).Title("Id").Width(150);
            //columns.Bound(p => p.IdPaymentCode).Title("Código").Width(150);
            columns.Bound(p => p.VoucherType).Title("Id Tipo de Pago").Width(150);
            columns.Bound(p => p.TypeJournalName).Title("Tipo de Diario").Width(200);
            columns.Bound(p => p.CreatedDate).Title("Fecha de Creación").Format("{0:dd/MM/yyyy}").Width(250);
            //columns.Bound(p => p.VoucherType).Title("Tipo de Diario").Width(250);
            columns.Bound(p => p.PartyId).Title("Id de Partida").Width(250);
            columns.Bound(p => p.PartyTypeId).Hidden().Title("").Width(250);

            //columns.Bound(p => p.Posted).Title("Posteado").Width(200);
        })
        .Filterable(f => f.Operators(o => o.ForString(s => s
        .Clear()
        .Contains("Contiene")
        .DoesNotContain("No contiene")
        .EndsWith("Termina con")
        .IsEqualTo("Es igual a")
        .IsNotEqualTo("No es igual a")
        .IsNull("Es nulo")
        .StartsWith("Inicia con")


        )
        .ForNumber(n => n
        .Clear()
        .IsEqualTo("Es igual a")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsNull("Es nulo")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        )
        .ForDate(d => d
        .Clear()
        .IsEqualTo("Es igual que")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        .IsNotEqualTo("No es igual que")
        )
        ))
        .ToolBar(tools =>
        {
            // tools.Create();
            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddJournalEntry()" });
            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



        })
        .Editable(e => e.Mode(GridEditMode.PopUp))
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("JournalEntryReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
        .Excel(excel => excel.FileName("JournalEntryReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
        dataSource
        .WebApi()

        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.JournalEntryId);           
            //model.Field(p => p.IdPaymentCode).Editable(true);
            //model.Field(p => p.IdTypeofPayment).Editable(true);
            model.Field(p => p.VoucherType).Editable(true);
            model.Field(p => p.TypeJournalName).Editable(true);
            model.Field(p => p.PartyId).Editable(true);
            //model.Field(p => p.Posted).Editable(true);

        })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("GetJournalEntry", "JournalEntry"))
        .Create(create => create.Action("Insert", "JournalEntry"))
        .Update(update => update.Action("Update", "JournalEntry", new { JournalEntryId = "{0}" }).Type(HttpVerbs.Put))
        //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

        )
        .Events(e =>
        {
            e.Save("onsave");

        })
)


<div id="NumJournalEntry">
    @await Html.PartialAsync("pvwAddJournalEntry", new ERPMVC.DTO.JournalEntryDTO { JournalEntryId = 0 , Date= DateTime.Now, DatePosted=DateTime.Now})
</div>
