@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Puesto";

}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

     function AddPuesto() {

         $('#ModalPuesto').find(':input').not(':submit').val('');
         $('#ModalPuesto').modal('show');
         $("#PuestoId").val('0');




    }


         function EditPuesto(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 IdPuesto: dataItem.IdPuesto,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddPuesto", "Puesto")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    console.log('success', result)

                    $("#numPuesto").html('');
                    $("#numPuesto").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalPuesto').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function RefrescarGrid() {
        var grid = $("#gridPuesto").getKendoGrid();
        grid.dataSource.read();
    }


</script>

<h3 class="text-themecolor">Puesto</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Puesto>
                  ()

                    .Name("gridPuesto")

                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            command.Custom("Editar").Click("EditPuesto");
                            command.Destroy().Text("Eliminar");
                        }).Width(250);
                        columns.Bound(p => p.IdPuesto).Width(150);
                        columns.Bound(p => p.NombrePuesto).Width(170);
                        columns.Bound(p => p.NombreDepartamento).Width(200);


                    })


                    .ToolBar(tools =>
                    {

                        //tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                              .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddPuesto()" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("PuestoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("PuestoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.IdPuesto);
                        model.Field(p => p.IdPuesto).Editable(false);


                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "Puesto"))
                   //.Create(create => create.Action("Insert", "Puesto").Type(HttpVerbs.Post))
                   //.Update(update => update.Action("Update", "Puesto").Type(HttpVerbs.Post))
                   .Destroy(destroy => destroy.Action("Delete", "Puesto").Type(HttpVerbs.Post))
                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)

<div id="numPuesto">
    @await Html.PartialAsync("pvwAddPuesto", new ERPMVC.DTO.PuestoDTO { IdPuesto = 0 })
</div>

