@model ERPMVC.DTO.SeveridadRiesgoDTO
@{
    ViewData["Title"] = "Severidad de Riesgo";
}

<h3 class="text-themecolor">Severidad de Riesgo</h3>


@(Html.Kendo().Grid<ERPMVC.Models.SeveridadRiesgo>()
                                  .Name("gridSeveridadRiesgo")
                                  .Columns(columns =>
                                  {
                                      columns.Command(command =>
                                      {
                                          command.Custom("Editar").IconClass("fa fa-edit").Click("EditSeveridadRiesgo");
                                          //command.Destroy().Text("Eliminar");
                                      }).Title("Acciones").Width(100);
                                      columns.Bound(p => p.IdSeveridad).Width(100);
                                      columns.Bound(p => p.Impacto).Width(100);
                                      columns.Bound(p => p.Probabilidad).Width(120);
                                      columns.Bound(p => p.LimeteCalidadSuperir).Width(100).Hidden(true);
                                      columns.Bound(p => p.LimiteCalidadInferior).Width(100).Hidden(true);
                                      columns.Template("#=LimeteCalidadSuperir# <br> #=LimiteCalidadInferior#").Title("Calificación").Width(100);
                                      columns.Bound(p => p.RangoInferiorSeveridad).Width(100).Hidden(true);
                                      columns.Bound(p => p.RangoSuperiorSeveridad).Width(100).Hidden(true);
                                      columns.Template("#=RangoInferiorSeveridad# - #=RangoSuperiorSeveridad#").Title("Valor").Width(100);
                                      columns.Bound(p => p.ColorHexadecimal).Hidden(true);
                                      columns.Bound(p => p.Nivel).Width(100);
                                  })
                                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                .Clear()
                                                                .Contains("Contiene")
                                                                .DoesNotContain("No contiene")
                                                                .EndsWith("Termina con")
                                                                .IsEqualTo("Es igual a")
                                                                .IsNotEqualTo("No es igual a")
                                                                .IsNull("Es nulo")
                                                                .StartsWith("Inicia con")
                                                            )
                                                            .ForNumber(n => n
                                                            .Clear()
                                                            .IsEqualTo("Es igual a")
                                                            .IsGreaterThan("Es mayor que")
                                                            .IsLessThan("Es menor que")
                                                            .IsNull("Es nulo")
                                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                            )
                                                            .ForDate(d => d
                                                            .Clear()
                                                            .IsEqualTo("Es igual que")
                                                            .IsGreaterThan("Es mayor que")
                                                            .IsLessThan("Es menor que")
                                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                            .IsNotEqualTo("No es igual que")
                                                            )
                                                        ))
                                            .ToolBar(tools =>
                                            {
                                                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus").HtmlAttributes(new { @id = "SeveridadRiesgo_Add", @class = "k-i-plus-sm", onclick = "AddSeveridadRiesgo()" });
                                                //tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                //tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                            })
                                            .Editable(e => e.Mode(GridEditMode.PopUp))
                                            .Sortable()
                                            .Pageable()
                                            .Filterable()
                                            .Scrollable()
                                            .Pdf(pdf => pdf.FileName("RolesReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                .Excel(excel => excel.FileName("RolesReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                            .DataSource(dataSource =>
                                                dataSource
                                                .WebApi()
                                                .ServerOperation(true)
                                                .Model(model =>
                                                {
                                                    model.Id(p => p.IdSeveridad);
                                                    model.Field(p => p.IdSeveridad).Editable(false);
                                                    model.Field(p => p.Impacto).Editable(true);
                                                    model.Field(p => p.Probabilidad).Editable(true);
                                                    model.Field(p => p.Nivel).Editable(false);
                                                })
                                                .Events(events => events.Error("error_handler"))
                                                .Read(read => read.Action("GetSeveridadRiesgo", "SeveridadRiesgo"))
                                            //.Create(create => create.Action("PostRol", "Roles"))
                                            //.Update(update => update.Action("PutRol", "Roles", new { id = "{0}" }))
                                            //.Destroy(destroy => destroy.Action("DeleteRole", "Roles", new { id = "{0}" }))
                                            )
)

<div id="numSeveridadRiesgo">
    @await Html.PartialAsync("pvwAddSeveridadRiesgo", new ERPMVC.DTO.SeveridadRiesgoDTO { IdSeveridad = 0 })
</div>

<script>
    $(document).ready(function () {
        var displayedData = $("#gridSeveridadRiesgo").data().kendoGrid.dataSource.view();
        if (displayedData.length == 2) {
            $("#SeveridadRiesgo_Add").hide();
        }
        else {
            $("#SeveridadRiesgo_Add").show();
        }
    });

    $(document).on('load', '#gridSeveridadRiesgo', function () {
        console.log("YaCargo");
    });

    function RefrescarGrid() {
        var grid = $("#gridSeveridadRiesgo").getKendoGrid();
        grid.dataSource.read();
    }

    function AddSeveridadRiesgo() {
        var validator = $("#frmSeveridadRiesgo").data("kendoValidator");
        validator.hideMessages();
        $('#ModalSeveridadRiesgo').find(':input').not(':submit').val('');
        $('#ModalSeveridadRiesgo').modal('show');
        $("#IdSeveridad").val('0');
        $("#Nivel").data("kendoDropDownList").value(0);
        debugger;
        var id = 0;
        var LimiteCalidadInferior = 0, LimeteCalidadSuperir = 0, RangoInferiorSeveridad = 0, RangoSuperiorSeveridad = 0
        var displayedData = $("#gridSeveridadRiesgo").data().kendoGrid.dataSource.view();
        if (displayedData.length > 0) {
            console.log("displayedData: ", displayedData);
            for (var i = 0; i < displayedData.length; i++) {
                if (displayedData[i].IdSeveridad > id) {
                    id = displayedData[i].IdSeveridad;
                    LimiteCalidadInferior = displayedData[i].LimiteCalidadInferior;
                    LimeteCalidadSuperir = displayedData[i].LimeteCalidadSuperir;
                    RangoInferiorSeveridad = displayedData[i].RangoInferiorSeveridad;
                    RangoSuperiorSeveridad = displayedData[i].RangoSuperiorSeveridad;
                }
            }
            id = id + 1;
        }
        console.log("LimiteCalidadInferior", LimiteCalidadInferior);
        console.log("LimeteCalidadSuperir", LimeteCalidadSuperir);
        console.log("RangoInferiorSeveridad", RangoInferiorSeveridad);
        console.log("RangoSuperiorSeveridad", RangoSuperiorSeveridad);

        $("#LimiteCalidadInferior").attr({
            "max": LimeteCalidadSuperir + 1,
            "min": LimeteCalidadSuperir + 1
        });

        $("#LimiteCalidadInferior").val(LimeteCalidadSuperir + 1);
        var LimiteCalidadSuperirActual = $("#LimiteCalidadInferior").val();

        $("#LimeteCalidadSuperir").attr({
            "min": Number(LimiteCalidadSuperirActual) + 1
        });

        $("#RangoInferiorSeveridad").attr({
            "max": RangoSuperiorSeveridad + 0.01,
            "min": RangoSuperiorSeveridad + 0.01
        });

        $("#RangoInferiorSeveridad").val(RangoSuperiorSeveridad + 0.01);
        var RangoSuperiorSeveridadActual = $("#RangoInferiorSeveridad").val();

        $("#RangoSuperiorSeveridad").attr({
            "min": Number(RangoSuperiorSeveridadActual) + 0.01
        });

        SetNivelRiesgo();
    }

    function EditSeveridadRiesgo(e) {
        debugger;
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            IdSeveridad: dataItem.IdSeveridad,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddSeveridadRiesgo", "SeveridadRiesgo")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numSeveridadRiesgo").html('');
                $("#numSeveridadRiesgo").html(result);
                $('#ModalSeveridadRiesgo').modal('show');
                $('#RangoInferiorSeveridad').val(dataItem.RangoInferiorSeveridad);
                $('#RangoSuperiorSeveridad').val(dataItem.RangoSuperiorSeveridad);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function SeveridadRiesgoValidacion() {

    }
</script>