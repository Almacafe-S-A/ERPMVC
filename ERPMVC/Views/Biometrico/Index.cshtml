@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    var errores = TempData.Keys.Contains("Errores") ? TempData["Errores"].ToString() : "";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
    ViewData["Title"] = "Carga de Archivo Biometrico";
        var messages = new Dictionary<string, string>() { { "custom", "Ingrese un valor correcto." },
           {"required","Requerido" }
        };
    var rules = new Dictionary<string, string>() { { "custom", "customFunction" } };

}
<h3 class="text-themecolor">Carga de Archivo Biometrico</h3>

<form id="frmBiometrico" enctype="multipart/form-data" kendo-validator="true" method="post" action="@Url.Action("GuardarBiometrico","Biometrico")" kendo-messages="messages" >
    
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="Fecha" class="form-label">Fecha:</label>
                        <kendo-datepicker name="Fecha" style="width: 100%;"
                                          id="Fecha"
                                          format="dd/MM/yyyy"
                                          required
                                          data-val-required="La fecha es requerida" />
                    </div>

                </div>


                <div class="col-md-8">
                    <div class="form-group">
                        <label style="min-width:100%" for="Observacion">Observación:</label>

                        <textarea style="min-width:100%" id="Observacion" name="Observacion" required></textarea>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="Archivo" style="min-width:100%">Archivo:</label>
                        <input id="Archivo" name="Archivo" type="file" style="min-width:100%" required accept=".xlsx" />
                        <div class="text-muted">El archivo debe de ser *.xlsx y tener 6 columnas llamadas Número, Nombre, Tiempo (Formato 24H), Estado, Dispositivos y Tipo de Registro.</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <label style="min-width:100%"></label>
                    
                    <button class="btn btn-primary" type="submit">Cargar Archivo</button>
                </div>

                <div class="col-md-3">
                </div>
            </div>
        </div>
    </div>
</form>


<div class="row">
    <h4>Archivos Cargados</h4>
    <div id="grdConfiguracion"></div>
</div>
<div id="ModalContenido"></div>

<script>

    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (this.Estado.NombreEstado != 'Cargado') {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Rechazar').hide();
            }
        })
    }


    function VerDetalle(e) {
        e.preventDefault();
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            IdBiometrico: registro.Id
        };

        $.ajax({
            url: '@Url.Action("VerDetalle", "Biometrico")',
            method: 'GET',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $("#ModalContenido").html('');
                $("#ModalContenido").html(result);
                $('#modalDetalle').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function Aprobar(e) {
        e.preventDefault();
        if (!confirm('Esta seguro de aprobar este biometrico?')) return;
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            IdBiometrico: registro.Id
        };
        debugger;
        $.ajax({
            url: '@Url.Action("AprobarBiometrico", "Biometrico")',
            method: 'POST',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'Datos guardados correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });
                RefreshBiometrico();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                //debugger;
                $.toast({
                    heading: 'Error',
                    text: textStatus + ": " + XMLHttpRequest.responseText,
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                RefreshBiometrico();
            }
        });
    }

    function Rechazar(e) {
        e.preventDefault();
        if (!confirm('Esta seguro de rechazar este biometrico?')) return;
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            IdBiometrico: registro.Id
        };
        //debugger;
        $.ajax({
            url: '@Url.Action("RechazarBiometrico", "Biometrico")',
            method: 'POST',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'Datos guardados correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });
                RefreshBiometrico();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                debugger;
                $.toast({
                    heading: 'Error',
                    text: textStatus + ": " + XMLHttpRequest.responseText,
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                RefreshBiometrico();
            }
        });
    }

    function RefreshBiometrico() {
        var grid = $("#grdConfiguracion").getKendoGrid();
        grid.dataSource.read();
    }
</script>

@(Html.Kendo().Grid<ERPMVC.Models.Biometrico>()
                                      .Name("grdConfiguracion").NoRecords()

                                      .Columns(columns =>
                                      {
                                          {
                                              columns.Command(command =>
                                              {
                                                  command.Custom("Detalle").Text(" ").IconClass("fa fa-eye").Click("VerDetalle");
                                                  command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("Aprobar");
                                                  command.Custom("Rechazar").Text(" ").IconClass("fa fa-thumbs-down").Click("Rechazar");
                                              }).Width(200).Title("Acciones");
                                          }
                                          columns.Bound(p => p.Id).Title("No.").Width(80);
                                          columns.Bound(p => p.Fecha)
                                              .Title("Fecha")
                                              .Width(130)
                                              .Format("{0:dd/MM/yyyy}");
                                          columns.Bound(p => p.Observacion).Title("Observación").Width(130);
                                          columns.Bound(p => p.Estado.NombreEstado).Title("Estado").Width(150);
                                      }).Filterable(f => f.Operators(o => o.ForString(s => s
                                                             .Clear()
                                                             .Contains("Contiene")
                                                             .DoesNotContain("No contiene")
                                                             .EndsWith("Termina con")
                                                             .IsEqualTo("Es igual a")
                                                             .IsNotEqualTo("No es igual a")
                                                             .IsNull("Es nulo")
                                                             .StartsWith("Inicia con")
                                                       )
                                                         .ForNumber(n => n
                                                         .Clear()
                                                         .IsEqualTo("Es igual a")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsNull("Es nulo")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       )
                                                       .ForDate(d => d
                                                       .Clear()
                                                       .IsEqualTo("Es igual que")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       .IsNotEqualTo("No es igual que")
                                                        )
                                                     ))

                                        .Editable(e => e.Mode(GridEditMode.PopUp))
                                        .Sortable()
                                        .AutoBind(true)
                                        .Pageable(p => p.Input(true))
                                        .Resizable(s => s.Columns(true))
                                        .Filterable()
                                        .Scrollable()
                                        .DataSource(dataSource =>
                                       dataSource
                                       //.Ajax()
                                       .WebApi()
                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.Id);
                                        })
                                        .Events(events =>
                                        {
                                            events.Error("error_handler");
                                        })
                                        .Read(read => read.Action("GetBiometricos", "Biometrico"))
                                  ).Events(e => e.DataBound("dataBound"))
)

<script>
    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#grdConfiguracion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltip(".k-grid-Aprobar", "Aprobar");
    setRowButtonTooltip(".k-grid-Rechazar", "Rechazar");
    setRowButtonTooltip(".k-grid-Detalle", "Ver Detalle");
</script>