@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Empleado";

}

<script>
    $(document).ready(function () {
        ClearSession();
    });
    function ClearSession() {
        var dataObject = ["listadoEmployeeSalary"];
         $.ajax({
            url: '@Url.Action("ClearSession", "Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }
        function Detalles(e) {          
    }

    function Editar(e) {          
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("pvwEditEmployees", "Employees")?IdEmpleado=" + dataItem.IdEmpleado;      
    }

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

     function AddEmployees() {
         ClearSession();
         RefrescarGridSalary();
         var validator = $("#frmEmployees").data("kendoValidator");
         validator.hideMessages();
         $("#TelefonoAlert").hide();
         $("#TelefonoContactoAlert").hide();
         $("#IdGenero").data("kendoDropDownList").value(0);
         $("#IdTipoSangre").data("kendoDropDownList").value(0);
         $("#IdEstado").data("kendoDropDownList").value(0);
         $("#IdPuesto").data("kendoDropDownList").value(0);
         $("#IdState").data("kendoDropDownList").value(0);
         $("#IdCurrency").data("kendoDropDownList").value(0);
         $("#IdCountry").data("kendoDropDownList").value(0);
         $("#IdDepartamento").data("kendoDropDownList").value(0);
         $("#IdCity").data("kendoDropDownList").value(0);
         $("#IdBank").data("kendoDropDownList").value(0);
         $("#IdBranch").data("kendoDropDownList").value(0);
         $("#IdTipoContrato").data("kendoDropDownList").value(0);
         $('#ModalEmployees').find(':input').not(':submit').val('');
         $('#ModalEmployees').modal('show');
         $("#IdEmpleado").val('0');
         $("#TipoSangreAlert").prop("hidden", true);
         $("#GeneroAlert").prop("hidden", true);
         $("#IdentidadAlert").prop("hidden", true);
         $("#RTNAlert").prop("hidden", true);

         //////////////////////////CAMPO FOTO DEL EMPLEADO////////////////////////
         @*$("#Foto").kendoUpload({
            async: {
                saveUrl: "@Url.Action("SaveEmployees", "Employees")",
                removeUrl: "@Url.Action("", "")",
                autoUpload: true,
            },
            upload: GetDataUpload,
            multiple: false,
            localization: {
                select: "Seleccionar Archivos",
                cancel: "Cancelar",
                dropFilesHere: "Soltar Archivo aquí",
                invalidFileExtension: "Extensión de Archivo Invalido",
                retry: "Reintentar",
            },
         });*@
         $("#Foto").kendoUpload({
             localization: {
                 select: "Seleccionar Archivos",
                 cancel: "Cancelar",
                 dropFilesHere: "Soltar Archivo aquí",
                 invalidFileExtension: "Extensión de Archivo Invalido",
                 retry: "Reintentar",
             },
         });

        ////////////////////////////////////////////////////////////////////////
    }


         function EditEmployees(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 IdEmpleado: dataItem.IdEmpleado,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddEmployees", "Employees")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    console.log('success', result)

                    $("#numEmployees").html('');
                    $("#numEmployees").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalEmployees').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function RefrescarGrid() {

        var grid = $("#gridEmployees").getKendoGrid();
        grid.dataSource.read();

    }

    function RefrescarGridSalary() {

        var grid = $("#gridEmployeeSalary").getKendoGrid();
        grid.dataSource.read();

    }

</script>

<h3 class="text-themecolor">Empleado</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Employees>
                  ()

                    .Name("gridEmployees")

                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("Editar");
                            //command.Destroy();
                            command.Destroy().Text(" ").IconClass("fa fa-trash-alt");

                        }).Width(120).Title("Acciones");
                        columns.Bound(p => p.IdEmpleado).Width(100);
                        columns.Bound(p => p.NombreEmpleado).Width(250).Title("Nombre Empleado");
                        columns.Bound(p => p.Correo).Width(250);
                        columns.Bound(p => p.Puesto.NombrePuesto).Width(250).Title("Nombre de Puesto");
                        columns.Bound(p => p.Genero).Width(150).Title("Género");


                    })


                    .ToolBar(tools =>
                    {

                        //tools.Create();

                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEmployees()"});
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                    .Sortable()
                    .Pageable(s => s
                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}"))
                                    )
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("EmployeesReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("EmployeesReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.IdEmpleado);
                        model.Field(p => p.IdEmpleado).Editable(false);

                    })
                    .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "Employees"))
                    //.Create(create => create.Action("Insert", "Employees").Type(HttpVerbs.Post))
                    //.Update(update => update.Action("Update", "Employees").Type(HttpVerbs.Post))
                    .Destroy(destroy => destroy.Action("Delete", "Employees").Type(HttpVerbs.Post))
                    //.Destroy(destroy => destroy.Action("Delete", "Employees", new { IdEmpleado = "{0}" }).Type(HttpVerbs.Delete))
                    )
.Events(e =>
{
    e.Save("onsave");

})
)

<div id="numEmployees">
    @await Html.PartialAsync("pvwAddEmployees", new ERPMVC.DTO.EmployeesDTO { IdEmpleado = 0 })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridEmployees").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridEmployees").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>