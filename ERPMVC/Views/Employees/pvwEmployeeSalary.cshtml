@model ERPMVC.DTO.EmployeeSalaryDTO
@{
    ViewData["Title"] = "Empleado Salario";

}
<script>
function GetIdEmployees() {
        return {
            'IdEmpleado': @Model.IdEmpleado,
            }
    }
</script>
            <h3 class="text-themecolor">Empleado Salario</h3>


            @(Html.Kendo().Grid<ERPMVC.DTO.EmployeeSalaryDTO>()
                                                                      .Name("gridUser")
                                                                      .Columns(columns =>
                                                                      {
                                                                          columns.Command(command =>
                                                                          {
                                                                  //   command.Custom("Ver detalles").Click("Detalles");
                                                                  command.Edit().Text("Editar").UpdateText("Actualizar").CancelText("Cancelar");
                                                                              command.Destroy().Text("Eliminar");
                                                                          }).Width(250);
                                                                          columns.Bound(p => p.EmployeeSalaryId).Width(100).Visible(false);
                                                                          columns.Bound(p => p.IdEmpleado).Title("Empleado").Width(150);
                                                                          columns.Bound(p => p.QtySalary).Title("Salario").Width(150);
                                                                          columns.Bound(p => p.IdFrequency).Title("Código Frecuencia").Width(150);
                                                                          columns.Bound(p => p.DayApplication).Title("Dia de Aplicacion").Width(170);
                                                                          columns.Bound(p => p.IdEstado).Title("Estado").ClientTemplate("#= IdEstado ? 'Activo' : 'Inactivo' #").Width(150);
                                                                          columns.Bound(p => p.CreatedDate).Title("Fecha creacion").Width(150).Sortable(true);


                                                                      })
                                                                          .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                                           .Clear()
                                                                                           .Contains("Contiene")
                                                                                           .DoesNotContain("No contiene")
                                                                                           .EndsWith("Termina con")
                                                                                           .IsEqualTo("Es igual a")
                                                                                           .IsNotEqualTo("No es igual a")
                                                                                           .IsNull("Es nulo")
                                                                                           .StartsWith("Inicia con")


                                                                                     )
                                                                                     .ForNumber(n => n
                                                                                       .Clear()
                                                                                       .IsEqualTo("Es igual a")
                                                                                       .IsGreaterThan("Es mayor que")
                                                                                       .IsLessThan("Es menor que")
                                                                                       .IsNull("Es nulo")
                                                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                     )
                                                                                     .ForDate(d => d
                                                                                     .Clear()
                                                                                     .IsEqualTo("Es igual que")
                                                                                     .IsGreaterThan("Es mayor que")
                                                                                     .IsLessThan("Es menor que")
                                                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                     .IsNotEqualTo("No es igual que")
                                                                                      )
                                                                                   ))
                                                                      .ToolBar(tools =>
                                                                      {
                                                                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddHoursWorked()" });

                                                                      })

                                                                       .Editable(e => e.Mode(GridEditMode.InLine))
                                                                       .Sortable()
                                                                       .Pageable()
                                                                       .Filterable()
                                                                       .Scrollable()
                                                                       .Pdf(pdf => pdf.FileName("UsuariosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                       .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                         .Excel(excel => excel.FileName("UsuariosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                       .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                       .DataSource(dataSource =>
                                                                          dataSource

                                                                            .WebApi()
                                                                            .ServerOperation(true)
                                                                            .Model(model =>
                                                                            {
                                                                                model.Id(p => p.EmployeeSalaryId);
                                                                                model.Field(p => p.EmployeeSalaryId).Editable(false);
                                                                                model.Field(p => p.IdEmpleado).Editable(false);
                                                                                model.Field(p => p.QtySalary).Editable(true);
                                                                                model.Field(p => p.IdFrequency).Editable(true);
                                                                                model.Field(p => p.DayApplication).Editable(false);
                                                                                model.Field(p => p.IdEstado).Editable(true);
                                                                            })
                                                                            .Events(events => events.Error("error_handler"))
                                                                            .Read(read => read.Action("GetEmployeeSalaryByIdEmployees", "EmployeeSalary").Data("GetIdEmployees()"))
                                                                      //.Create(create => create.Action("PostUsuario", "Usuario"))
                                                                      //.Update(update => update.Action("PutUsuario", "Usuario", new { id = "{0}" }))
                                                                      //.Destroy(destroy => destroy.Action("DeleteUsuario", "Usuario", new { id = "{0}" }))
                                                                      )
            )