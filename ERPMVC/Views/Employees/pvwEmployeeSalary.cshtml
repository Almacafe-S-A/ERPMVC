@model ERPMVC.DTO.EmployeeSalaryDTO
@{
    ViewData["Title"] = "Empleado Salario";
    var estados = ViewData["Estados"] as IEnumerable<ERPMVC.Models.Estados>;
}
<script>
function GetIdEmployees() {
        return {
            'IdEmpleado': @Model.IdEmpleado,
            }
    }
</script>
<h3 class="text-themecolor">Empleado Salario</h3>


@(Html.Kendo().Grid<ERPMVC.DTO.EmployeeSalaryDTO>()
                            .Name("gridEmployeeSalary")
                            .Events(events => events
                                .DataBinding("onDataBinding")
                            )
                            .Columns(columns =>
                            {
                                columns.Command(command =>
                                {
                                    //   command.Custom("Ver detalles").Click("Detalles");
                                    command.Edit().Text(" ").IconClass("fa fa-edit").UpdateText("Actualizar").CancelText("Cancelar").HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "" });
                                    //command.Destroy().Text("Eliminar");
                                }).Width(150);
                                columns.Bound(p => p.EmployeeSalaryId).Width(100).Visible(false);
                                columns.Bound(p => p.IdEmpleado).Title("Empleado").Width(150).Visible(false);
                                columns.Bound(p => p.QtySalary).Title("Salario").Width(150).EditorTemplateName("EmployeeSalary");
                                //columns.Bound(p => p.QtySalary).Format("{0:n2}").Title("Salario").Width(150);
                                columns.Bound(p => p.DayApplication).Title("Dia de Aplicacion").Format("{0:dd/MM/yyyy HH:mm}").Width(190);
                                columns.Bound(p => p.IdEstado).ClientTemplate("#if (IdEstado =='1') {#Activo#} else {#Inactivo#} #").Width(150);
                                columns.Bound(p => p.CreatedDate).Title("Fecha creacion").Format("{0:dd/MM/yyyy HH:mm}").Width(150).Sortable(false);


                            })
                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                .Clear()
                                                .Contains("Contiene")
                                                .DoesNotContain("No contiene")
                                                .EndsWith("Termina con")
                                                .IsEqualTo("Es igual a")
                                                .IsNotEqualTo("No es igual a")
                                                .IsNull("Es nulo")
                                                .StartsWith("Inicia con")


                                            )
                                            .ForNumber(n => n
                                            .Clear()
                                            .IsEqualTo("Es igual a")
                                            .IsGreaterThan("Es mayor que")
                                            .IsLessThan("Es menor que")
                                            .IsNull("Es nulo")
                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                            )
                                            .ForDate(d => d
                                            .Clear()
                                            .IsEqualTo("Es igual que")
                                            .IsGreaterThan("Es mayor que")
                                            .IsLessThan("Es menor que")
                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                            .IsNotEqualTo("No es igual que")
                                            )
                                        ))
        .ToolBar(tools =>
        {
            //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
            //       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddHoursWorked()" });

            tools.Create().Text("Agregar").HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "", @id = "AgregarSalario" });


        })


        .Editable(e => e.Mode(GridEditMode.InLine))
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("UsuariosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("UsuariosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
            dataSource

            .WebApi()
            .Sort(sort => sort.Add("CreatedDate").Descending())
            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.EmployeeSalaryId);
                model.Field(p => p.EmployeeSalaryId).Editable(false);
                model.Field(p => p.IdEmpleado).Editable(false);
                model.Field(p => p.QtySalary).Editable(true);
                model.Field(p => p.DayApplication).Editable(true);
                model.Field(p => p.IdEstado).Editable(false).DefaultValue("1");
                model.Field(p => p.CreatedDate).Editable(false);
            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("GetEmployeeSalaryByIdEmployees", "EmployeeSalary").Data("GetIdEmployees()"))
            .Create(create => create.Action("PostEmployeeSalary", "EmployeeSalary").Type(HttpVerbs.Post).Data("GetData"))
            .Update(update => update.Action("PutEmployeeSalary", "EmployeeSalary", new { id = "{0}" }).Type(HttpVerbs.Put).Data("GetDataUpdate"))
            .Destroy(destroy => destroy.Action("DeleteEmployeeSalary", "EmployeeSalary", new { id = "{0}" }).Type(HttpVerbs.Delete))
        )
        .Events(e =>
        {
            e.Save("onSave");
            e.Edit("onEdit");
        })
)
<script>
    function onDataBinding() {
        var displayedData = $("#gridEmployeeSalary").data().kendoGrid.dataSource.view();
        if (displayedData.length >= 1 && $("#IdEmpleado").val() == 0) {
            $("#AgregarSalario").prop("hidden", true);
        }
        else {
            $("#AgregarSalario").prop("hidden", false);
        }
    }

    function GetData(data) {
        if (data != null) {
            data.DayApplication = data.DayApplication.toJSON();
            data.CreatedDate = data.CreatedDate.toJSON();
            data.IdEmpleado = $("#IdEmpleado").val();
            data.IdFrequency = 0;
            //$('#QtySalary').val($('#QtySalary').val().replace(/\./g, ','));

            var Salario = $('#QtySalary').val();
            data.QtySalary = Salario;
            var displayedData = $("#gridEmployeeSalary").data().kendoGrid.dataSource.view();
            var id = 0;
            if ($("#IdEmpleado").val() == 0) {
                if (displayedData.length > 0) {
                    for (var i = 0; i < displayedData.length; i++) {
                        if (displayedData[i].EmployeeSalaryId > id)
                            id = displayedData[i].EmployeeSalaryId;
                    }
                    id = id + 1;
                }
            }
            data.EmployeeSalaryId = id;
        }
    }
    function GetDataUpdate(data) {
        if (data != null) {
            data.DayApplication = data.DayApplication.toJSON();
            data.CreatedDate = data.CreatedDate.toJSON();
            data.IdEmpleado = $("#IdEmpleado").val();
            //$('#QtySalary').val($('#QtySalary').val().replace(/\./g, ','));

            var Salario = $('#QtySalary').val();
            data.QtySalary = Salario;
            //var displayedData = $("#gridEmployeeSalary").data().kendoGrid.dataSource.view();
            //var id = 0;
            //if ($("#IdEmpleado").val() == 0) {
            //    if (displayedData.length > 0) {
            //        for (var i = 0; i < displayedData.length; i++) {
            //            if (displayedData[i].EmployeeSalaryId > id)
            //                displayedData[i].EmployeeSalaryId = 0;

            //        }
            //        id = 0;
            //    }
            //}
            //data.EmployeeSalaryId = displayedData.EmployeeSalaryId
        }
    }

    //$(document).on("click", "#grid tbody tr", function (e) {
    //    var element = e.target || e.srcElement;
    //    var data = $("#grid").data("kendoGrid").dataItem($(element).closest("tr"));
    //});

    function onSave(data) {
        var QtySalary = $("#QtySalary").val();
        //e.preventDefault();
        //var element = e.target || e.srcElement;
        //var data = $("#gridEmployeeSalary").data("kendoGrid").dataItem($(element).closest("tr"));
        //var data = this.dataItem($(e.currentTarget).closest("tr"));
        if (data.model.EmployeeSalaryId == 0 || data.model.EmployeeSalaryId == null && data.model.IdEmpleado == 0) {
            //$("#Salario").data('kendoNumericTextBox').value(QtySalary);
            $("#Salario").val(QtySalary);
        }
        else if (data.model.EmployeeSalaryId == 0 || data.model.EmployeeSalaryId == null && data.model.IdEmpleado > 0){
            $("#Salario").val(QtySalary);
        }
        if (data.model.IdEstado == 1 && data.model.IdEmpleado == 0) {
            //$("#Salario").data('kendoNumericTextBox').value(QtySalary);
            $("#Salario").val(QtySalary);
        }
        else if (data.model.IdEstado == 1 && data.model.IdEmpleado > 0){
            $("#Salario").val(QtySalary);
        }
        $("#myModalSalarioEmpleado").modal('hide');
    }
    function onEdit(e) {
        //console.log("Editado");
    }
</script>