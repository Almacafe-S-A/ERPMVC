@using Kendo.Mvc.UI
@using System.Security.Claims

@{
    ViewData["Title"] = "Certificados de Seguro";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}



    <script>
         function RefrescarGrid() {
             var grid = $("#gridInsuranceCertificate").getKendoGrid();
        grid.dataSource.read();
    }


    function GenerarCertificados() {
        debugger;
        $.ajax({
            url: '@Url.Action("GenerarCertificados", "InsuranceCertificate")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            success: function (result) {
              //  console.log(result);
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //alert(textStatus + ": " + XMLHttpRequest.responseText);
                 alert("Error");

              }
        });


        }


    function Imprimir(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFInsuranceCertificate", "InsuranceCertificate")/' + dataItem.Id;


    }


    </script>


@(Html.Kendo().Grid<ERPMVC.Models.InsuranceCertificate>()
                                              .Name("gridInsuranceCertificate")
                                              .Columns(columns =>
                                              {

                                                  columns.Command(command =>
                                                  {
                                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("Imprimir");

                                                  }).Title("Acciones").Width(100);

                                                  columns.Bound(p => p.Id).Title("Id").Width(100);
                                                  columns.Bound(p => p.Code).Title("Codigo").Width(120);
                                                  columns.Bound(p => p.Customer.CustomerName).Title("Cliente").Width(200);
                                                  columns.Bound(p => p.Amount).Title("Monto").Width(120);
                                                  columns.Bound(p => p.Date).Title("Fecha Emisión").Format("{0:dd/MM/yyyy}").Width(150);
                                                  columns.Bound(p => p.DueDate).Title("Valido Hasta").Format("{0:dd/MM/yyyy}").Width(150);
                                                  columns.Bound(p => p.ProductTypes).Title("Tipo Producto").Width(150);
                                                  columns.Bound(p => p.EstadoId).ClientTemplate("#if (EstadoId == 1) {#Activo#} else {#Inactivo#} #").Title("Estado").Width(150);
                                              })
                                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                                           .Clear()
                                                           .Contains("Contiene")
                                                           .DoesNotContain("No contiene")
                                                           .EndsWith("Termina con")
                                                           .IsEqualTo("Es igual a")
                                                           .IsNotEqualTo("No es igual a")
                                                           .IsNull("Es nulo")
                                                           .StartsWith("Inicia con")


                                                     )
                                                     .ForNumber(n => n
                                                       .Clear()
                                                       .IsEqualTo("Es igual a")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsNull("Es nulo")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     )
                                                     .ForDate(d => d
                                                     .Clear()
                                                     .IsEqualTo("Es igual que")
                                                     .IsGreaterThan("Es mayor que")
                                                     .IsLessThan("Es menor que")
                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     .IsNotEqualTo("No es igual que")
                                                      )
                                                   ))
                                              .ToolBar(tools =>
                                              {
                                                  // tools.Create();

                                                  tools.Custom().Text("GenerarCertificados").IconClass("k-icon k-i-plus")
                                                                                     .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "GenerarCertificados();" });

                                                  //tools.Custom().Text("Reporte").IconClass("")
                                                  //           .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirLibroCompras();" });
                                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                                                  tools.Custom().Text("Detalles de Valores Fisicios de Mercaderias")
                                                                         .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ShowEndorsementReport();" });

                                              })
                                               .Editable(e => e.Mode(GridEditMode.PopUp))
                                                .Sortable()
                                                .AutoBind(true)
                                                .Pageable(s => s
                                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                    .Empty("No hay datos."))
                                                )
                                                .Filterable()
                                                .Scrollable()
                                                // .ClientDetailTemplateId("template")
                                                .Pdf(pdf => pdf.FileName("SegurosEndosadosReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                  .Excel(excel => excel.FileName("SegurosEndosadosReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                //.Events(e => e.DataBound("dataBound"))
                                                .DataSource(dataSource =>

                                               dataSource
                                               //.Ajax()
                                               .WebApi()
                                                .ServerOperation(true)
                                                .Model(model =>
                                                {
                                                    model.Id(p => p.Id);
                                                    model.Field(p => p.CustomerId).Editable(true);


                                                })
                                                //.Sort(s => s.Add(m => m.FechaCreacion).Descending())
                                                .Events(events =>
                                                {
                                                    events.Error("error_handler");
                                                    //events.upda("EditHandler");

                                                })
                                                .Read(read => read.Action("Get", "InsuranceCertificate"))
                                                .Create(create => create.Action("Insert", "InsuranceCertificate"))
                                                .Update(update => update.Action("Update", "InsuranceCertificate", new { id = "{0}" }))
                                                .Destroy(destroy => destroy.Action("Delete", "InsuranceCertificate", new { id = "{0}" }))
                                          )
)
