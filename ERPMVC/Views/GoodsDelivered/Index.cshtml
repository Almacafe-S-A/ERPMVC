@using Microsoft.AspNetCore.Http;
@using System.Security.Claims

@{ 
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
    ViewData["Title"] = "Entrega de Mercaderias";
}
<script>
    $(document).ready(function () {
        clearsession();
    });

    function clearsession() {
         var dataObject = ["listadoproductosGoodsDelivered"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddGoodsDelivered() {
        //debugger;
        clearsession();
         var dataObject = {
             GoodsDeliveredId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwGoodsDelivered", "GoodsDelivered")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#GoodsDelivered").html('');
                $("#GoodsDelivered").html(result);

                //RefreshCotizacionesDetail();
                 //$("#btnSaveCotizacion").show();
                $('#myModalGoodsDelivered').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditGoodsDelivered(e) {
        e.preventDefault();

        clearsession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            GoodsDeliveredId: dataItem.GoodsDeliveredId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwGoodsDelivered", "GoodsDelivered")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#GoodsDelivered").html('');
                $("#GoodsDelivered").html(result);
                var customer = $("#CustomerId").val();
                $("#CustomerId").val(0);
                $("#CustomerId").data("kendoDropDownList").select(customer);
                $("#CustomerId").data("kendoDropDownList").value(customer);

                hcustom = customer;
                //GetProductTypeIdS();
               // var sapProject = $("#CustomerId").data("kendoDropDownList").bind("select", onChange(customer));

                $('#myModalGoodsDelivered').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function onChange(CustomerId) {
        $("#CustomerId").val(CustomerId);
    }



    function ImprimirGoodsDelivered(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("SFGoodsDelivered", "GoodsDelivered")/' + dataItem.GoodsDeliveredId;
        var win = window.open(url, '_blank');
        win.focus();
    }

       function ImprimirBoletaDeSalida(e) {
           e.preventDefault();
           //debugger;
           var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
              //window.location.href = '@Url.Action("SFBoletaDeSalida", "BoletaDeSalida")/' + dataItem.KardexId;
           var url = '@Url.Action("SFBoletaDeSalida", "BoletaDeSalida")/' + dataItem.ExitTicket;
           var win = window.open(url, '_blank');
           win.focus();
    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Entrega de Mercadería</h3>

@(
Html.Kendo().Grid<ERPMVC.Models.GoodsDelivered>()
                                      .Name("gridGoodsDelivered")
                                      .Columns(columns =>
                                      {
                                      if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Editar", "true")
                          || permisos.HasClaim("Inventarios.Entrega de Mercaderia.Imprimir", "true")
                          || permisos.HasClaim("Inventarios.Entrega de Mercaderia.Imprimir Boleta de Salida", "true"))
                                      {
                                          columns.Command(command =>
                              {
                                                  if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Editar", "true"))
                                                  {
                                                      command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditGoodsDelivered");
                                                  }
                                                  if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Imprimir", "true"))
                                                  {
                                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirGoodsDelivered");
                                                  }
                                                  if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Imprimir Boleta de Salida", "true"))
                                                  {
                                                      command.Custom("ImprimirBoletaDeSalida").Text(" ").IconClass("fa fa-print").Click("ImprimirBoletaDeSalida");
                                                  }
                                              }).Title("Acciones").Width(150);
                                      }
                                      columns.Bound(p => p.GoodsDeliveredId).Title("Id").Width(100);
                                      columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}")
                          .ClientTemplate("#=kendo.toString(DocumentDate,'dd/MM/yyyy')#").Title("Fecha").Width(150);
                                      columns.Bound(p => p.CustomerName).Title("Cliente").Width(250);
                                      columns.Bound(p => p.EntregadoA).Width(200).Title("Motorista");
                                      columns.Bound(p => p.Placa).Width(200).Title("Placa");
                                      columns.Bound(p => p.SubProductName).Title("Producto").Width(200);
                                      columns.Bound(p => p.PesoNeto2).Title("Total Entregado").Width(150).Format("{0:N2}")
                                          .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" });
                                          columns.Bound(p => p.ProductName).Title("Servicio").Width(200);
                                          columns.Bound(p => p.BranchName).Title("Sucursal").Width(200);
                                          columns.Bound(p => p.Certificados).Title("Certificados").Width(200);
                                          columns.Bound(p => p.Autorizaciones).Title("Autorizaciones").Width(200);
                                          columns.Bound(p => p.ControlId).Title("Control de Salidas Id").Width(200);
                                          columns.Bound(p => p.ExitTicket).Title("Boleta de Salida Id").Width(150);
                                          columns.Bound(p => p.BoletaPesoId).Title("Boleta de Peso Id").Width(150);
                                          columns.Bound(p => p.Estado).Title("Estado").Width(150);

                                      })
                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))

                                      .ToolBar(tools =>
                                      {
                                          //tools.Create();
                                          if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Agregar", "true"))
                                          {
                                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                           .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsDelivered();" });
                                          }
                                              tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                              tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                                      })
                                       .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                        .Sortable()
                                        .AutoBind(true)
                                        .Pageable(p => p.Refresh(true))
                                        .Filterable()
                                        .Resizable(p => p.Columns(true))
                                        .Scrollable()
                                        // .ClientDetailTemplateId("template")
                                        .Pdf(pdf => pdf.FileName("GoodsDeliveredReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                          .Excel(excel => excel.FileName("GoodsDeliveredReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                        //.Events(e=>e.Save("onsave"))
                                        .DataSource(dataSource =>

                                       dataSource
                                       //.Ajax()
                                       .WebApi()
                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.GoodsDeliveredId);
                                            model.Field(p => p.GoodsDeliveredId).Editable(true);
                                            model.Field(p => p.CustomerId).Editable(true);


                                        })
                                        .Events(events =>
                                        {
                                            events.Error("error_handler");
                                            //events.upda("EditHandler");

                                        })
                                        .Read(read => read.Action("Get", "GoodsDelivered"))
                                        .Create(create => create.Action("Insert", "GoodsDelivered"))
                                        .Update(update => update.Action("Update", "GoodsDelivered", new { id = "{0}" }))
                                        .Destroy(destroy => destroy.Action("Delete", "GoodsDelivered", new { id = "{0}" }))
                                  )
)

<div id="GoodsDelivered">
    @await Html.PartialAsync("pvwGoodsDelivered", new ERPMVC.DTO.GoodsDeliveredDTO { GoodsDeliveredId = 0, DocumentDate = DateTime.Now, OrderDate = DateTime.Now, ExpirationDate = DateTime.Now.AddDays(30), BranchId = Convert.ToInt64(Context.Session.GetString("BranchId")) })
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDelivered").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDelivered").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Anular", "Anular !");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");

</script>

<div id="ConditionView">
</div>

<div id="CustomerConditionView">
</div>
