@model ERPMVC.DTO.GoodsDeliveredDTO
@using System.Security.Claims

@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosGoodsDelivered"];
}

<script>



    function RefreshGoodsDeliveredDetail() {
      //  console.log('Refresca Entrada de mercaderias');
        var grid = $("#gridGoodsDeliveredDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }


    function GetARBoleta() {
                                            //debugger;

                                            var ARBoletaSelect = $("#AsociarAutorizaciones").data("kendoMultiSelect");
                                            var ARBoletas = ARBoletaSelect == undefined ? [] : ARBoletaSelect.value();
                                            var dataobject = {
                                                'ARBoletas': ARBoletas,
                                                'Id': $('#GoodsDeliveredId').val(),
                                                'ControlId': $('#ControlId').val(),
                                            };

                                            console.log(dataobject);
                                            
                                           // GetPersonasAutorizadas(ARBoletas);
                                            return dataobject;

                                        }


    function totalColumnas(tiporesultado, moneda) {
        var data = $("#gridGoodsDeliveredDetail").getKendoGrid().dataSource.data();
        var total = 0;

        switch (tiporesultado) {
            case 1: ///////Autorizada
                data.forEach(r => total += r.QuantityAuthorized);
                break;
            case 2: /// Entregar
                data.forEach(r => total += r.Quantity);
                break;
            



            default:
                break;
        }
        var formatter = new Intl.NumberFormat('es-HN', {
            style: 'currency',
            currency: 'LPS',
            minimumFractionDigits: 2
        });
        if (moneda == 1) {
            return formatter.format(total);
        }
        if (moneda == 2) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 2
            });
            return formatter.format(total);
        }
        if (moneda == 0) {
            formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'LPS',
                minimumFractionDigits: 2
            });
            return formatter.format(total).replace(/[a-z]{3}/i, "").trim();
        }
        return total;
    }

</script>

<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.GoodsDeliveredLine>()
                                                                  .Name("gridGoodsDeliveredDetail")
                                                                  .Columns(columns =>
                                                                  {
                                                                      
                                                                         /* columns.Command(command =>
                                                                          {
                                                                              
                                                                                  command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditGoodsDeliveredDetalle");
                                                                              
                                                                              if (Model.editar == 1)
                                                                              {
                                                                                  
                                                                                      command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                                  
                                                                              }
                                                                              // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                            //    command.Edit(); command.Destroy();
                                                                          }).Title("Acciones").Width(120);*/

                                                                        columns.Bound(p => p.NoCD).Width(120).Title("No CD").Width(120); 
                                                                        columns.Bound(p => p.Pda).Width(120).Title("No Pda").Width(120);
                                                                        
                                                                        columns.Bound(p => p.NoAR).Width(120).Title("No AR").Width(120);
                                                                      columns.Bound(p => p.GoodsDeliveredLinedId).Title("Linea").Width(120).Visible(false);
                                                                      columns.Bound(p => p.GoodsDeliveredId).Title("Entrega de Mercadería").Width(250).Visible(false);
                                                                    columns.Bound(p => p.QuantityAuthorized).Title("Cant a Entregar").Width(200).Format("{0:N2}")
                                                                                .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(1,0)#</div>")
                                                                                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                                 ;
                                                                        columns.Bound(p => p.Quantity).Title("Cant Entregada").Width(200).Format("{0:N2}")
                                                                        .ClientFooterTemplate("<div style='text-align: right'>#=totalColumnas(2,0)#</div>")
                                                                        .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" })
                                                                        ; 
                                                                                                                                        
                                                                      columns.Bound(p => p.ControlPalletsId).Width(120).Title("Control").Visible(false);
                                                                      columns.Bound(p => p.UnitOfMeasureName).Title("Unidad de medida").Width(180);
                                                                      columns.Bound(p => p.UnitOfMeasureId).Visible(false).Title("Unidad de medida").Width(0);
                                                                      columns.Bound(p => p.SubProductId).Visible(false).Title("Producto").Width(0);
                                                                      columns.Bound(p => p.Price).Title("Precio").Visible(false).Width(200);
                                                                      columns.Bound(p => p.SubProductId).Title("Producto").Visible(false).Width(250);
                                                                      columns.Bound(p => p.SubProductName).Title("Producto").Width(250);
                                                                      columns.Bound(p => p.QuantitySacos).Title("Sacos").Width(250);
                                                                      columns.Bound(p => p.WareHouseName).Title("Bodega").Width(250);
                                                                      columns.Bound(p => p.UnitOfMeasureId).Title("Estiba No.").Width(250).Visible(false);
                                                                      columns.Bound(p => p.ControlPalletsId).Title("Estiba No.").Width(200);
                                                                        columns.Bound(p => p.NoARLineId).Title("Estiba No.").Width(200).Visible(false);
                                                                  })
                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                               .Clear()
                                                               .Contains("Contiene")
                                                                       .DoesNotContain("No contiene")
                                                                       .EndsWith("Termina con")
                                                                       .IsEqualTo("Es igual a")
                                                                       .IsNotEqualTo("No es igual a")
                                                                       .IsNull("Es nulo")
                                                                       .StartsWith("Inicia con")


                                                                 )
                                                                 .ForNumber(n => n
                                                                   .Clear()
                                                                   .IsEqualTo("Es igual a")
                                                                   .IsGreaterThan("Es mayor que")
                                                                   .IsLessThan("Es menor que")
                                                                   .IsNull("Es nulo")
                                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 )
                                                                 .ForDate(d => d
                                                                 .Clear()
                                                                 .IsEqualTo("Es igual que")
                                                                 .IsGreaterThan("Es mayor que")
                                                                 .IsLessThan("Es menor que")
                                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 .IsNotEqualTo("No es igual que")
                                                                  )
                                                               ))
                                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                    .Sortable()
                                                                    .AutoBind(true)
                                                                    //.Pageable()
                                                                    .Filterable()
                                                                    .Scrollable()
                                                                    // .ClientDetailTemplateId("template")
                                                                    .Pdf(pdf => pdf.FileName("ReciboMercaderiaDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                      .Excel(excel => excel.FileName("ReciboMercaderiaDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                    //.Events(e=>e.Save("onsave"))
                                                                    .DataSource(dataSource =>

                                                                   dataSource
                                                                   //.Ajax()
                                                                   .WebApi()

                                                                    .ServerOperation(true)
                                                                    .Model(model =>
                                                                    {
                                                                        model.Id(p => p.GoodsDeliveredLinedId);
                                                                        model.Field(p => p.GoodsDeliveredLinedId).Editable(false);
                                                                        model.Field(p => p.GoodsDeliveredId).Editable(false);
                                                                        model.Field(p => p.ControlPalletsId).Editable(true);

                                                                    })
                                                                    .Events(events =>
                                                                    {
                                                                        events.Error("error_handler");
                                                                        //events.upda("EditHandler");

                                                                    })
                                                                    .Read(read => read.Action("GetGoodsDeliveredDetails", "GoodsDeliveredLine").Data("GetARBoleta"))
                                                                    //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                                    //.Update(update => update.Action("Update", "SalesOrderLine", new { GoodsDeliveredLinedId = "{0}" }))
                                                                    .Destroy(destroy => destroy.Action("Delete", "GoodsDeliveredLine").Type(HttpVerbs.Post))
                                                              )
        )

    </div>
</div>

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveredDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveredDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>