@model ERPMVC.DTO.GoodsDeliveredDTO
@using System.Security.Claims

@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosGoodsDelivered"];
}

<script>


    function GetGoodsDeliveredLineId() {
        if ($("#SubProductIddetail").val() > 0 || @Model.GoodsDeliveredId> 0) {
            debugger
            var subproductname = '', unidaddemedida = '', WareHouseId = '';
            if ($("#SubProductIddetail") != null) {
                if ($("#SubProductIddetail").data("kendoDropDownList") != null) {
                    subproductname = $("#SubProductIddetail").data("kendoDropDownList").text();
                }
            }

            if ($("#UnitOfMeasureId") != null) {
                if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                    unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
                }
            }

            if ($("#WareHouseId") != null) {
                if ($("#WareHouseId").data("kendoDropDownList") != null) {
                    WareHouseId = $("#WareHouseId").data("kendoDropDownList").text();
                }
            }


            var displayedData = $("#gridGoodsDeliveredDetail").data().kendoGrid.dataSource.data();
            var id = -999999;
            debugger;

            if (Number($("#GoodsDeliveredLinedId").val()) === 0) {
                if (displayedData.length > 0) {
                    for (var i = 0; i < displayedData.length; i++) {

                        if (displayedData[i].GoodsDeliveredLinedId > id)
                            id = displayedData[i].GoodsDeliveredLinedId;
                    }

                    id = id + 1;
                }
                else if (Number($("#SubProductIddetail").val()) > 0) {
                    id = 1;
                }
            }
            else {
                id = $("#GoodsDeliveredLinedId").val();
            }
            return {
                'GoodsDeliveredLinedId': id,
                'GoodsDeliveredId':@Model.GoodsDeliveredId,
                'UnitOfMeasureId': $("#UnitOfMeasureId").val(),
                'UnitOfMeasureName': unidaddemedida,
                'ProducId': $("#ProducId").val(),
                //'ProductName': $("#ProducId").data("kendoDropDownList").text(),
                'SubProductId': $("#SubProductIddetail").val(),
                'SubProductName': subproductname,
                'Description': $("#Description").val(),
                'ControlPalletsId': $("#ControlPalletsId").val(),
                'Quantity': $("#Quantity").val(),
                'QuantitySacos': $("#QuantitySacos").val(),
                'Price': $("#Price").val(),
                'Total': $("#Total").val(),
                'WareHouseId': $("#WareHouseId").val(),
                'WareHouseName': WareHouseId,
                'CostCenterId': $("#CostCenterId").val(),

            }
        }
    }

    function RefreshGoodsDeliveredDetail() {
      //  console.log('Refresca Entrada de mercaderias');
        var grid = $("#gridGoodsDeliveredDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }


    function AddGoodsDeliveredDetalle() {
        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'
            && $("#CustomerId").val() !== '0' && $("#CustomerId").val() !== ''  ) {

           // llenarsubproduct();
            $("#frmGoodsDeliveredLine :input").not('#GoodsDeliveredLinedId').prop("disabled", false);
            //$("#frmGoodsDeliveredLine :input").val('');
            $('#myModalGoodsDeliveredLine').modal('show');
        } else {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Validacion",
                message: "Debe seleccionar un producto y un cliente!"
            }, "error");

        }

    }


    function EditGoodsDeliveredDetalle(e) {

        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (dataItem.GoodsDeliveredId > 0) {
            var subproducto = 0;
            var dataObject = { 'GoodsDeliveredLinedId': dataItem.GoodsDeliveredLinedId };
            $.ajax({
                url: '@Url.Action("pvwGoodsDeliveredLine", "GoodsDeliveredLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#GoodsDeliveredLineMant").html('');
                    $("#GoodsDeliveredLineMant").html(data);
                    var txt = $(data);
                    var found = $("#SubProductIddetail", txt);
                    subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(textStatus + ": " + XMLHttpRequest.responseText);
                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });


            hcustom = $("#CustomerId").val();
         //   console.log(hcustom + ' -> ' + subproducto);
            $("#frmGoodsDeliveredLine :input").prop("disabled", true);
            //llenarsubproduct();
            var combobox = $('#SubProductIddetail').getKendoDropDownList();
            combobox.value(subproducto);
            combobox.trigger('change');
        }
        else {
            $("#GoodsDeliveredLinedId").val(dataItem.GoodsDeliveredLinedId);
            $("#GoodsDeliveredId").val(dataItem.GoodsDeliveredId);

          //  $("#UnitOfMeasureName").val(dataItem.UnitOfMeasureName);
            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#WareHouseId").data("kendoDropDownList").value(dataItem.WareHouseId);
            $("#SubProductIddetail").data("kendoDropDownList").dataSource.read();
            $("#SubProductIddetail").data("kendoDropDownList").value(dataItem.SubProductId);
            //$("#SubProductName").val(dataItem.SubProductName);

            var quantity = $("#Quantity").data("kendoNumericTextBox");
            quantity.value(dataItem.Quantity);
            quantity.trigger('change');

            hcustom = $("#CustomerId").val();

            var quantitysacos = $("#QuantitySacos").data("kendoNumericTextBox");
            if (quantitysacos !== null && dataItem.QuantitySacos != null)
                quantitysacos.value(dataItem.QuantitySacos);
            quantitysacos.trigger('change');

            $("#WareHouseId").data("kendoDropDownList").value(dataItem.WareHouseId);
            //  data.WarehouseId
            var ControlPalletsId = $("#ControlPalletsId").data("kendoNumericTextBox");
            ControlPalletsId.value(dataItem.ControlPalletsId);
            ControlPalletsId.trigger('change');

            //var Price = $("#Price").data("kendoNumericTextBox");
            //Price.value(dataItem.Price);
            //Price.trigger('change');

            //var Total = $("#Total").data("kendoNumericTextBox");
            //Total.value(dataItem.Total);
            //Total.trigger('change');

           //var total = $("#Total").data("kendoNumericTextBox");
            //if (total !== null)
            //    total.value(dataItem.TotalSacos);
            //      total.trigger('change');





        }




        $('#myModalGoodsDeliveredLine').modal('show');

    }

    function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "GoodsDeliveredLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridGoodsDeliveredDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }
</script>


<h3 class="text-themecolor">Entrega de Mercadería</h3>
<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.GoodsDeliveredLine>()
                                                                  .Name("gridGoodsDeliveredDetail")
                                                                  .Columns(columns =>
                                                                  {
                                                                      if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Editar Entrega de Mercaderia Detalle", "true")
                                                                      || permisos.HasClaim("Inventarios.Entrega de Mercaderia.Eliminar Entrega de Mercaderia Detalle", "true"))
                                                                      {
                                                                          //columns.Command(command =>
                                                                          //{
                                                                          //    if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Editar Entrega de Mercaderia Detalle", "true"))
                                                                          //    {
                                                                          //        //command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditGoodsDeliveredDetalle");
                                                                          //    }
                                                                          //    if (Model.editar == 1)
                                                                          //    {
                                                                          //        if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Eliminar Entrega de Mercaderia Detalle", "true"))
                                                                          //        {
                                                                          //            // command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                          //        }
                                                                          //    }
                                                                          //    // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                          //    //  command.Edit(); command.Destroy();
                                                                          //}).Title("Acciones").Width(200);
                                                                      }
                                                                      columns.Bound(p => p.GoodsDeliveredLinedId).Title("Id Linea").Width(180);
                                                                      columns.Bound(p => p.GoodsDeliveredId).Title("Entrega de Mercadería").Width(250);
                                                                      columns.Bound(p => p.NoCD).Width(250);
                                                                      columns.Bound(p => p.NoAR).Width(250);
                                                                      columns.Bound(p => p.Quantity).Title("Cantidad").Width(200);
                                                                      columns.Bound(p => p.UnitOfMeasureName).Title("Unidad de medida").Width(250);
                                                                      columns.Bound(p => p.UnitOfMeasureId).Visible(false).Title("Unidad de medida").Width(0);
                                                                      columns.Bound(p => p.SubProductId).Visible(false).Title("Producto").Width(0);
                                                                      columns.Bound(p => p.Price).Title("Precio").Visible(false).Width(200);
                                                                      columns.Bound(p => p.SubProductId).Title("Producto").Visible(false).Width(250);
                                                                      columns.Bound(p => p.SubProductName).Title("Producto").Width(250);
                                                                      columns.Bound(p => p.QuantitySacos).Title("Sacos").Width(250);
                                                                      columns.Bound(p => p.WareHouseName).Title("Bodega").Width(250);
                                                                      columns.Bound(p => p.ControlPalletsId).Title("Estiba No.").Width(250);
                                                                      columns.Bound(p => p.Total).Title("Total").Width(200);
                                                                  })
                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                               .Clear()
                                                               .Contains("Contiene")
                                                                       .DoesNotContain("No contiene")
                                                                       .EndsWith("Termina con")
                                                                       .IsEqualTo("Es igual a")
                                                                       .IsNotEqualTo("No es igual a")
                                                                       .IsNull("Es nulo")
                                                                       .StartsWith("Inicia con")


                                                                 )
                                                                 .ForNumber(n => n
                                                                   .Clear()
                                                                   .IsEqualTo("Es igual a")
                                                                   .IsGreaterThan("Es mayor que")
                                                                   .IsLessThan("Es menor que")
                                                                   .IsNull("Es nulo")
                                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 )
                                                                 .ForDate(d => d
                                                                 .Clear()
                                                                 .IsEqualTo("Es igual que")
                                                                 .IsGreaterThan("Es mayor que")
                                                                 .IsLessThan("Es menor que")
                                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 .IsNotEqualTo("No es igual que")
                                                                  )
                                                               ))
                                                                  .ToolBar(tools =>
                                                                  {
                                                                      if (Model.editar == 1)
                                                                      {
                                                                          if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Agregar Entrega de Mercaderia Detalle", "true"))
                                                                          {
                                                                              //    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                              //.HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsDeliveredDetalle();" });
                                                                          }
                                                                      }
                                                                      if (permisos.HasClaim("Inventarios.Entrega de Mercaderia.Exportar Entrega de Mercaderia Detalle", "true"))
                                                                      {
                                                                          tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                          tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                                      }

                                                                  })
                                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                    .Sortable()
                                                                    .AutoBind(true)
                                                                    //.Pageable()
                                                                    .Filterable()
                                                                    .Scrollable()
                                                                    // .ClientDetailTemplateId("template")
                                                                    .Pdf(pdf => pdf.FileName("ReciboMercaderiaDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                      .Excel(excel => excel.FileName("ReciboMercaderiaDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                    //.Events(e=>e.Save("onsave"))
                                                                    .DataSource(dataSource =>

                                                                   dataSource
                                                                   //.Ajax()
                                                                   .WebApi()

                                                                    .ServerOperation(true)
                                                                    .Model(model =>
                                                                    {
                                                                        model.Id(p => p.GoodsDeliveredLinedId);
                                                                        model.Field(p => p.GoodsDeliveredLinedId).Editable(false);
                                                                        model.Field(p => p.GoodsDeliveredId).Editable(false);
                                                                        model.Field(p => p.ControlPalletsId).Editable(true);

                                                                    })
                                                                    .Events(events =>
                                                                    {
                                                                        events.Error("error_handler");
                                                                        //events.upda("EditHandler");

                                                                    })
                                                                    .Read(read => read.Action("GetGoodsDeliveredLineByGoodsDeliveredId", "GoodsDeliveredLine").Data("GetGoodsDeliveredLineId"))
                                                                    //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                                    //.Update(update => update.Action("Update", "SalesOrderLine", new { GoodsDeliveredLinedId = "{0}" }))
                                                                    .Destroy(destroy => destroy.Action("Delete", "GoodsDeliveredLine").Type(HttpVerbs.Post))
                                                              )
        )

    </div>
</div>

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveredDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsDeliveredDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>