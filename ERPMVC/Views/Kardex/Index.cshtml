@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Kardex";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}


<script>
       function ImprimirKardex(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
           //window.location.href = '@Url.Action("SFKardex", "Kardex")/' + dataItem.KardexId;
           var url = '@Url.Action("SFKardex", "Kardex")/' + dataItem.KardexId;
           var win = window.open(url, '_blank');
           win.focus();
    }


</script>

<h3 class="text-themecolor">Kardex</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Kardex>()
                                          .Name("gridKardex")
                                          .Columns(columns =>
                                          {
                                              if (permisos.HasClaim("Inventarios.Kardex.Imprimir Kardex", "true"))
                                              {
                                                  columns.Command(command =>
                                                  {
                                                      // command.Custom("Editar").Click("EditCertificadoDeposito");
                                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirKardex");
                                                      //  command.Edit(); command.Destroy();
                                                  }).Title("Acciones").Width(100);
                                              }

                                              columns.Bound(p => p.KardexId).Title("Id").Width(100);
                                              columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Title("Fecha Documento").Width(200);
                                              columns.Bound(p => p.KardexDate).Format("{0:dd/MM/yyyy}").Title("Fecha de Kardex").Width(200);
                                              columns.Bound(p => p.DocName).Title("Tipo documento").Width(200);
                                              columns.Bound(p => p.TypeOperationName).Title("Tipo de operacion").Width(200);
                                              columns.Bound(p => p.DocumentName).Title("Nombre documento").Width(200);
                                              columns.Bound(p => p.CurrencyName).Title("Moneda").Width(150);


                                              //columns.Bound(p => p.NoPoliza).Title("NoPoliza").Width(150);
                                              //columns.Bound(p => p.Total).Title("Total").Width(150);
                                          })
                                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                       .DoesNotContain("No contiene")
                                                       .EndsWith("Termina con")
                                                       .IsEqualTo("Es igual a")
                                                       .IsNotEqualTo("No es igual a")
                                                       .IsNull("Es nulo")
                                                       .StartsWith("Inicia con")


                                                 )
                                                 .ForNumber(n => n
                                                   .Clear()
                                                   .IsEqualTo("Es igual a")
                                                   .IsGreaterThan("Es mayor que")
                                                   .IsLessThan("Es menor que")
                                                   .IsNull("Es nulo")
                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 )
                                                 .ForDate(d => d
                                                 .Clear()
                                                 .IsEqualTo("Es igual que")
                                                 .IsGreaterThan("Es mayor que")
                                                 .IsLessThan("Es menor que")
                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 .IsNotEqualTo("No es igual que")
                                                  )
                                               ))
                                          .ToolBar(tools =>
                                          {
                                              // tools.Create();
                                              //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                              //           .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCertificadoDeposito();" });
                                              if (permisos.HasClaim("Inventarios.Kardex.Exportar Kardex", "true"))
                                              {
                                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                              }

                                          })
                                           .Editable(e => e.Mode(GridEditMode.PopUp))
                                            .Sortable()
                                            .AutoBind(true)
                                            .Pageable()
                                            .Filterable()
                                            .Scrollable()
                                            // .ClientDetailTemplateId("template")
                                            .Pdf(pdf => pdf.FileName("CertificadoDepositoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                              .Excel(excel => excel.FileName("CertificadoDepositoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                            //.Events(e=>e.Save("onsave"))
                                            .DataSource(dataSource =>

                                           dataSource
                                           //.Ajax()
                                           .WebApi()
                                            .ServerOperation(true)
                                            .Model(model =>
                                            {
                                                model.Id(p => p.KardexId);
                                                model.Field(p => p.KardexId).Editable(true);
                                                model.Field(p => p.DocumentId).Editable(true);


                                            })
                                            .Events(events =>
                                            {
                                                events.Error("error_handler");
                                                //events.upda("EditHandler");

                                            })
                                            .Read(read => read.Action("Get", "Kardex"))
                                            .Create(create => create.Action("Insert", "Kardex"))
                                            .Update(update => update.Action("Update", "Kardex", new { id = "{0}" }))
                                            .Destroy(destroy => destroy.Action("Delete", "Kardex", new { id = "{0}" }))
                                      )
)

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridKardex").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridKardex").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    //setToolbarTooltip(".k-grid-Imprimir", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");

</script>