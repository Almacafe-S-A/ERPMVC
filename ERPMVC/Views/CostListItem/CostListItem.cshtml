@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "CALCULOS DE PRECIOS";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function AddCostListItem() {



        $('#ModalCostListItem').find(':input').not(':submit').val('');

        $('#ModalCostListItem').modal('show');
        $("#CostListItemId").val('0');




      }


    function EditCostListItem(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CostListItemId: dataItem.CostListItemId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddCostListItem", "CostListItem")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCostListItem").html('');
                    $("#NumCostListItem").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalCostListItem').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }


</script>

<h3 class="text-themecolor">CALCULO DE PRECIOS</h3>
@(Html.Kendo().Grid<ERPMVC.Models.CostListItem>
            ()
            .Name("gridNumeracionCostListItem")
            .Columns(columns =>
            {
                columns.Command(command =>
                {


                    //command.Custom("Ver detalles").Text(" ").IconClass("far fa-list-alt").Click("DetallesJournalEntry");
                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCostListItem");

                    //  command.Destroy();
                }).Width(100);

                columns.Bound(p => p.CostListItemId).Title("Id").Width(1);
                columns.Bound(p => p.SubproductId).Title("Sub Producto").Width(150);
                columns.Bound(p => p.ExchangeRateId).Title("Codigo de Tasa $").Width(200);
                columns.Bound(p => p.DayofCalcule).Title("Fecha de Calculo").Format("{0:dd/MM/yyyy}").Width(250);
                columns.Bound(p => p.PriceBagValue).Title("Precio Bolsa").Width(250);
                columns.Bound(p => p.RecipientExpenses).Title("Beneficiarios").Width(250);
                columns.Bound(p => p.EscrowExpenses).Title("Fidelcomiso").Width(200);
                columns.Bound(p => p.UtilityExpenses).Title("Utilidades").Width(200);
                columns.Bound(p => p.PermiseExportExpenses).Title("Permiso Exportacion").Width(200);
                columns.Bound(p => p.TotalExpensesCurrency).Title("Total Lps").Width(200);

            })
            .Filterable(f => f.Operators(o => o.ForString(s => s
            .Clear()
            .Contains("Contiene")
            .DoesNotContain("No contiene")
            .EndsWith("Termina con")
            .IsEqualTo("Es igual a")
            .IsNotEqualTo("No es igual a")
            .IsNull("Es nulo")
            .StartsWith("Inicia con")


            )
            .ForNumber(n => n
            .Clear()
            .IsEqualTo("Es igual a")
            .IsGreaterThan("Es mayor que")
            .IsLessThan("Es menor que")
            .IsNull("Es nulo")
            .IsLessThanOrEqualTo("Es menor o igual que")
            .IsGreaterThanOrEqualTo("Es mayor o igual que")
            )
            .ForDate(d => d
            .Clear()
            .IsEqualTo("Es igual que")
            .IsGreaterThan("Es mayor que")
            .IsLessThan("Es menor que")
            .IsLessThanOrEqualTo("Es menor o igual que")
            .IsGreaterThanOrEqualTo("Es mayor o igual que")
            .IsNotEqualTo("No es igual que")
            )
            ))
            .ToolBar(tools =>
            {
                // tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCostListItem()" });
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("CostListItemReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("CostListItemReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.CostListItemId);
                model.Field(p => p.SubproductId).Editable(false);
                model.Field(p => p.ExchangeRateId).Editable(true);
                model.Field(p => p.DayofCalcule).Editable(true);
                model.Field(p => p.PriceBagValue).Editable(true);
                model.Field(p => p.RecipientExpenses).Editable(true);
                model.Field(p => p.EscrowExpenses).Editable(true);
                model.Field(p => p.UtilityExpenses).Editable(true);
                model.Field(p => p.PermiseExportExpenses).Editable(true);
                model.Field(p => p.TotalExpensesCurrency).Editable(false);

             })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("GetCostListItem", "CostListItem"))
            .Create(create => create.Action("Insert", "CostListItem"))
            .Update(update => update.Action("Update", "CostListItem", new { JournalEntryId = "{0}" }).Type(HttpVerbs.Put))
            //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)


<div id="NumCostListItem">
    @await Html.PartialAsync("pvwAddCostListItem", new ERPMVC.DTO.CostListItemDTO { CostListItemId = 0 })
</div>
