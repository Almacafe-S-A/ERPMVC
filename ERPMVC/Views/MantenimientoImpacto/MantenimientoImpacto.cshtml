@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Impacto";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}


<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function AddMantenimientoImpacto() {

        $('#ModalMantenimientoImpacto').find(':input').not(':submit').val('');
        $('#ModalMantenimientoImpacto').modal('show');
        $("#MantenimientoImpactoId").val('0');
        var validator = $("#frmMantenimientoImpacto").data("kendoValidator");
        validator.hideMessages();
    }


    function EditMantenimientoImpacto(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                MantenimientoImpactoId: dataItem.MantenimientoImpactoId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddMantenimientoImpacto", "MantenimientoImpacto")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumMantenimientoImpacto").html('');
                    $("#NumMantenimientoImpacto ").html(result);

                    $("#MantenimientoImpactoId").val(dataItem.MantenimientoImpactoId);
                    $("#NoImpacto").val(dataItem.NoImpacto);
                    $("#Rango").val(dataItem.Rango);
                    $("#Description").val(dataItem.Description);


                    $('#ModalMantenimientoImpacto').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function RefrescarGrid() {

        var grid = $("#gridMantenimientoImpacto").getKendoGrid();
        grid.dataSource.read();

    }
</script>

<h3 class="text-themecolor">Impacto</h3>

@(Html.Kendo().Grid<ERPMVC.DTO.MantenimientoImpactoDTO>
            ()
            .Name("gridMantenimientoImpacto")
            .Columns(columns =>
            {
                if (permisos.HasClaim("Monitoreo.MantenimientoImpacto.Editar MantenimientoImpacto", "true")
                        || permisos.HasClaim("Monitoreo.MantenimientoImpacto.Eliminar MantenimientoImpacto", "true"))
                {
                    columns.Command(command =>
                    {
                        if (permisos.HasClaim("Monitoreo.MantenimientoImpacto.Editar MantenimientoImpacto", "true"))
                        {
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditMantenimientoImpacto");
                        }

                        if (permisos.HasClaim("Monitoreo.MantenimientoImpacto.Eliminar MantenimientoImpacto", "true"))
                        {
                            command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                        }
                    }).Title("Acciones").Width(100);
                }

                //columns.Bound(p => p.MantenimientoImpactoId).Width(130);
                columns.Bound(p => p.NoImpacto).Width(50);
                columns.Bound(p => p.Rango).Width(100).HtmlAttributes(new { @style = "background:#=color#;color:black;" });
                columns.Bound(p => p.Description).Width(200).Visible(true);
                //columns.Bound(p => p.UsuarioCreacion).Width(230);
                //columns.Bound(p => p.UsuarioModificacion).Width(230);
                //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(190);
                //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(220);



            })
                .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
            .ToolBar(tools =>
            {
                // tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddMantenimientoImpacto()" });
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


            })
            .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("MantenimientoImpacto_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("MantenimientoImpacto_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
                dataSource
                .WebApi()

                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.MantenimientoImpactoId);
                    model.Field(p => p.MantenimientoImpactoId).Editable(false);

                })
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("Get", "MantenimientoImpacto")/*.Data("DataByGrupo")*/)
                .Create(create => create.Action("Insert", "MantenimientoImpacto").Type(HttpVerbs.Post))
                .Update(update => update.Action("Update", "MantenimientoImpacto", new { MantenimientoImpactoId = "{0}" }).Type(HttpVerbs.Put))
                .Destroy(destroy => destroy.Action("Delete", "MantenimientoImpacto", new { MantenimientoImpactoId = "{0}" }).Type(HttpVerbs.Delete))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)



<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridMantenimientoImpacto").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridMantenimientoImpacto").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");

</script>

<div id="NumMantenimientoImpacto">
    @await Html.PartialAsync("pvwAddMantenimientoImpacto", new ERPMVC.DTO.MantenimientoImpactoDTO { MantenimientoImpactoId = 0 })
</div>