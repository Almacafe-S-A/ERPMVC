@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Dependientes";
}

<script>
    function GetEmployeesId() {
        return {
            'IdEmpleado': $("#IdEmpleado").val(),
        }
    }
    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }


    function AddDependientes() {
        var validator = $("#frmDependientes").data("kendoValidator");
        validator.hideMessages();
        $("#TelefonoDependientesAlert").hide(); 
        $('#ModalDependientes').find(':input').not(':submit').val('');
        $('#ModalDependientes').modal('show');
        $("#IdDependientes").val('0');
    }


    function EditDependientes(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                IdDependientes: dataItem.IdDependientes,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddDependientes", "Dependientes")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#numDependientes").html('');
                    $("#numDependientes").html(result);


                    //$("#btnCity").hide();
                    $('#ModalDependientes').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

    function RefrescarGrid() {

        var grid = $("#gridDependientes").getKendoGrid();
            grid.dataSource.read();

    }


</script>

<h3 class="text-themecolor">Dependientes</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Dependientes>
                  ()

                    .Name("gridDependientes")

                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditDependientes");
                            command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                        }).Width(125).Title("Acciones");
                        columns.Bound(p => p.IdDependientes).Width(100);
                        columns.Bound(p => p.NombreDependientes).Width(290);
                        columns.Bound(p => p.Parentezco).Width(250).Title("Parentesco");
                        columns.Bound(p => p.TelefonoDependientes).Width(200);
                        columns.Bound(p => p.DireccionDependientes).Width(250);
                        columns.Bound(p => p.IdEmpleado).Width(180).Visible(false);
                    })
                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                                   .Clear()
                                                   .Contains("Contiene")
                                                   .DoesNotContain("No contiene")
                                                   .EndsWith("Termina con")
                                                   .IsEqualTo("Es igual a")
                                                   .IsNotEqualTo("No es igual a")
                                                   .IsNull("Es nulo")
                                                   .StartsWith("Inicia con")


                                             )
                                             .ForNumber(n => n
                                               .Clear()
                                               .IsEqualTo("Es igual a")
                                               .IsGreaterThan("Es mayor que")
                                               .IsLessThan("Es menor que")
                                               .IsNull("Es nulo")
                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             )
                                             .ForDate(d => d
                                             .Clear()
                                             .IsEqualTo("Es igual que")
                                             .IsGreaterThan("Es mayor que")
                                             .IsLessThan("Es menor que")
                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             .IsNotEqualTo("No es igual que")
                                              )
                                           ))

                    .ToolBar(tools =>
                    {

                        //tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddDependientes()" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("DependientesReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("DependientesReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.IdDependientes);
                        model.Field(p => p.IdDependientes).Editable(false);


                    })
                    .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("GetDependientesByEmployeeId", "Dependientes").Data("GetEmployeesId()"))
                    .Create(create => create.Action("Insert", "Dependientes").Type(HttpVerbs.Post))
                    .Update(update => update.Action("Update", "Dependientes").Type(HttpVerbs.Put))
                    .Destroy(destroy => destroy.Action("Delete", "Dependientes").Type(HttpVerbs.Post))

                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)

<div id="numDependientes">
    @await Html.PartialAsync("pvwAddDependientes", new ERPMVC.DTO.DependientesDTO { IdDependientes = 0 })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridDependientes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridDependientes").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>
