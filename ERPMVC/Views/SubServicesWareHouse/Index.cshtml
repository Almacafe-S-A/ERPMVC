@using Kendo.Mvc.UI
@using Microsoft.AspNetCore.Http;

@{
    ViewData["Title"] = "Reglas de cobro";

}

<script>
    $(document).ready(function () {
        ClearSession();
    });


    function ClearSession() {
        var dataObject = ["listadoEmployeeSalary"];
         $.ajax({
            url: '@Url.Action("ClearSession", "Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }
        function Detalles(e) {
    }

    function Editar(e) {
        ClearSession();

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("pvwEditEmployees", "Employees")?IdEmpleado=" + dataItem.IdEmpleado;
    }

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddEmployees() {
        ClearSession();

        var dataObject = {
            ScheduleSubservicesId: 0,
            BranchId : '@Convert.ToInt64(Context.Session.GetString("BranchId"))',
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddSubServicesWareHouse", "SubServicesWareHouse")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
               // console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);


                //$("#btnCAI").hide();
                $('#ModalScheduleSubservice').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }


    function EditSubServicesWareHouse(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            ScheduleSubservicesId: dataItem.ScheduleSubservicesId,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddSubServicesWareHouse", "SubServicesWareHouse")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);

                var txt = $(result);
                var found = $("#SubServiceId", txt);
                subproducto = $(found).val();

                $("#SubServiceId").data("kendoDropDownList").value(subproducto);
                //$("#btnCAI").hide();
                $('#ModalScheduleSubservice').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function RefrescarGrid() {
        var grid = $("#gridSubServicesWareHouse").getKendoGrid();
        grid.dataSource.read();
    }

</script>

<h3 class="text-themecolor">Servicios utilizados en bodega</h3>

@(Html.Kendo().Grid<ERPMVC.Models.SubServicesWareHouse>
                              ()

                                .Name("gridSubServicesWareHouse")

                                .Columns(columns =>
                                {
                                    columns.Command(command =>
                                    {
                                      //command.Custom("Ver detalles").Click("Detalles");
                                      //command.Destroy();
                                      command.Custom("Editar").Click("EditSubServicesWareHouse");
                                      // command.Destroy().Text("Eliminar");

                                    }).Width(250);
                                    columns.Bound(p => p.SubServicesWareHouseId).Width(150);
                                    columns.Bound(p => p.BranchId).Width(200);
                                    columns.Bound(p => p.BranchName).Width(150);
                                    columns.Bound(p => p.ServiceName).Width(170);
                                    columns.Bound(p => p.SubServiceName).Width(170);
                                    columns.Bound(p => p.SubServiceId).Width(150);
                                    columns.Bound(p => p.SubServiceName).Width(170);
                                    columns.Bound(p => p.StartTime).Format("{0:HH:mm:ss}").Width(150);
                                    columns.Bound(p => p.EndTime).Format("{0:HH:mm:ss}").Width(150);
                                    columns.Bound(p => p.QuantityHours).Width(170);
                        //columns.Bound(p => p.Condition).Width(150);

                    })
                                .ToolBar(tools =>
                                {

                        //tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEmployees()" });
                                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                                })
                                .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                .Sortable()
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                .Pdf(pdf => pdf.FileName("SubServiciosUsadosBodegaReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                .Excel(excel => excel.FileName("SubServiciosUsadosBodegaReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                .DataSource(dataSource =>
                                dataSource
                                .WebApi()

                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.SubServicesWareHouseId);
                                    model.Field(p => p.SubServicesWareHouseId).Editable(false);
                                })
                                .Events(events => events.Error("error_handler"))
                                .Read(read => read.Action("Get", "SubServicesWareHouse"))
                                //.Create(create => create.Action("Insert", "Employees").Type(HttpVerbs.Post))
                                //.Update(update => update.Action("Update", "Employees").Type(HttpVerbs.Post))
                                .Destroy(destroy => destroy.Action("Delete", "SubServicesWareHouse").Type(HttpVerbs.Post))
                                //.Destroy(destroy => destroy.Action("Delete", "Employees", new { IdEmpleado = "{0}" }).Type(HttpVerbs.Delete))
                                )
                                .Events(e =>
                                {
                                    e.Save("onsave");

                                })
)

<div id="numEmployees">
    @await Html.PartialAsync("pvwAddSubServicesWareHouse", new ERPMVC.DTO.SubServicesWareHouseDTO { SubServicesWareHouseId = 0, StartTime = DateTime.Now, EndTime = DateTime.Now, BranchId = Convert.ToInt64(Context.Session.GetString("BranchId")) })
</div>

