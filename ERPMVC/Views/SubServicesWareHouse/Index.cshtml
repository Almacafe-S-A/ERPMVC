@using Kendo.Mvc.UI
@using Microsoft.AspNetCore.Http;
@using System.Security.Claims

@{
    ViewData["Title"] = "SubServicion Utilizados";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>
    $(document).ready(function () {
        ClearSession();
    });


    function ClearSession() {
        var dataObject = ["listadoEmployeeSalary"];
         $.ajax({
            url: '@Url.Action("ClearSession", "Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }
        function Detalles(e) {
    }

    function Editar(e) {
        ClearSession();

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("pvwEditEmployees", "Employees")?IdEmpleado=" + dataItem.IdEmpleado;
    }

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddSubServicesWareHouse() {
        ClearSession();

        var dataObject = {
            SubServicesWareHouseId: 0,
            BranchId : '@Convert.ToInt64(Context.Session.GetString("BranchId"))',
            editar: 0
        };

        var BranchId = 0;
        $.ajax({
            url: '@Url.Action("pvwAddSubServicesWareHouse", "SubServicesWareHouse")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
               // console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);

                var txt = $(result);
                var found = $("#BranchId", txt);
                BranchId = $(found).val();
                console.log(BranchId);
                $("#BranchId").data("kendoDropDownList").value(BranchId);
                $("#IdEstado").data("kendoDropDownList").value(1);

                //$("#btnCAI").hide();
                $('#ModalScheduleSubservice').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }


    function EditSubServicesWareHouse(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            SubServicesWareHouseId: dataItem.SubServicesWareHouseId,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddSubServicesWareHouse", "SubServicesWareHouse")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);

                var txt = $(result);
                var found = $("#SubServiceId", txt);
                subproducto = $(found).val();



                $("#SubServiceId").data("kendoDropDownList").value(subproducto);
                //$("#btnCAI").hide();
                $('#ModalScheduleSubservice').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function RefrescarGrid() {
        var grid = $("#gridSubServicesWareHouse").getKendoGrid();
        grid.dataSource.read();
    }


    function ImprimirServiciosBodega() {
           var url = 'SubServicesWareHouse/SFServiciosBodega/' ;
           var win = window.open(url, '_blank');
           win.focus();
           
       }
</script>

<h3 class="text-themecolor">Servicios utilizados en bodega</h3>

@(Html.Kendo().Grid<ERPMVC.Models.SubServicesWareHouse>
                                  ()

                                    .Name("gridSubServicesWareHouse")

                                    .Columns(columns =>
                                    {
                                        if (User.HasClaim("Inventarios.Servicios Utilizados.Editar", "true"))
                                        {
                                            columns.Command(command =>
                                            {
                                                command.Custom("Editar").Click("EditSubServicesWareHouse").Text(" ").IconClass("fa fa-edit");

                                            }).Width(150).Title("Acciones");
                                        }
                                        columns.Bound(p => p.SubServicesWareHouseId).Width(100).Title("No.");
                                        columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Width(150).Title("Fecha");
                                        columns.Bound(p => p.CustomerName).Width(150);
                                        columns.Bound(p => p.ServiceName).Width(170);
                                        columns.Bound(p => p.SubServiceName).Width(170);
                                        columns.Bound(p => p.BranchName).Width(150);
                                        columns.Bound(p => p.StartTime).Format("{0:HH:mm:ss}").Width(150);
                                        columns.Bound(p => p.EndTime).Format("{0:HH:mm:ss}").Width(150);
                                        columns.Bound(p => p.QuantityHours).Width(120).Title("Cantidad").Format("{0:N2}");
                                        columns.Bound(p => p.Estado).Width(120).Title("Estado")
                .HtmlAttributes(new Dictionary<string, object> { ["style"] = " text-align: right;" }); 
                                    })
                                    .ToolBar(tools =>
                                    {

                                        //tools.Create();
                                        if (User.HasClaim("Inventarios.Servicios Utilizados.Agregar", "true"))
                                        {
                                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddSubServicesWareHouse()" });
                                        }
                                            
                                           tools.Custom().Text("Reporte Servicios Bodega").IconClass("k-icon k-i-sheet")
                                                       .HtmlAttributes(new { @class = "k-i-sheet-sm", onclick = "ImprimirServiciosBodega();" });
                                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                        
                                    })
                                    .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                    .Sortable()
                                    .Pageable()
                                    .Filterable()
                                    .Scrollable()
                                    .Pdf(pdf => pdf.FileName("SubServiciosUsadosBodegaReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                    .Excel(excel => excel.FileName("SubServiciosUsadosBodegaReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    .DataSource(dataSource =>
                                    dataSource
                                    .WebApi()

                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.SubServicesWareHouseId);
                                        model.Field(p => p.SubServicesWareHouseId).Editable(false);
                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Read(read => read.Action("Get", "SubServicesWareHouse"))
                                    //.Create(create => create.Action("Insert", "Employees").Type(HttpVerbs.Post))
                                    //.Update(update => update.Action("Update", "Employees").Type(HttpVerbs.Post))
                                    .Destroy(destroy => destroy.Action("Delete", "SubServicesWareHouse").Type(HttpVerbs.Post))
                                    //.Destroy(destroy => destroy.Action("Delete", "Employees", new { IdEmpleado = "{0}" }).Type(HttpVerbs.Delete))
                                    )
                                    .Events(e =>
                                    {
                                        e.Save("onsave");

                                    })
)

<div id="numEmployees">
    @await Html.PartialAsync("pvwAddSubServicesWareHouse", new ERPMVC.DTO.SubServicesWareHouseDTO { SubServicesWareHouseId = 0, StartTime = DateTime.Now, EndTime = DateTime.Now, BranchId = Convert.ToInt64(Context.Session.GetString("BranchId")) })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridSubServicesWareHouse").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridSubServicesWareHouse").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>