<script>

    function closecustomercondition() {
        $("#myModalCustomerConditions").modal('hide');
    }

    function closecustomerconditionMant() {
        $("#myModalCustomerConditionsMant").modal('hide');
    }

    function seteardropdowns(nombrenumerico, valor) {
        var dropdown = $("#" + nombrenumerico).data("kendoDropDownList");
        dropdown.value(valor);
        dropdown.trigger('change');
        dropdown = null;
    }

    function setearcombobox(nombrenumerico, valor) {
        var combo = $("#" + nombrenumerico).data("kendoComboBox");
        combo.value((valor.toString()));      
        combo.trigger("select");     
    } 

    function AddCustomerCondition() {


        seteardropdowns("ProductId_CC", $("#ProductId").val());
        seteardropdowns("IdTipoDocumento", 12 );
        seteardropdowns("CustomerId_CC", $("#CustomerId").val() );
        //setearcombobox("ProductId_CC", $("#ProductId").val());
       
      
        $("#myModalCustomerConditionsMant").modal('show');
        
    }

    function filterdatacc() {
        return {'DocumentId': $("#SalesOrderId").val(),
            'IdTipoDocumento': 12
        };
    }
</script>

@await Html.PartialAsync("~/Views/CustomerConditions/pvwCustomerConditions.cshtml", new ERPMVC.Models.CustomerConditions ())

<div id="myModalCustomerConditions" class="modal fade" role="dialog" style="z-index:99999">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" onclick="closecustomercondition();">&times;</button>
                <h4 class="modal-title">Detalle de condición</h4>
            </div>
            <div class="modal-body">

                <div class="row" id="validationcondition">
                    <div class="col-lg-12">
                        <div class="card">
                            @(Html.Kendo().Grid<ERPMVC.Models.CustomerConditions>()
                                                .Name("gridCustomerCondition")
                                                .Columns(columns =>
                                                {
                                                    columns.Bound(p => p.CustomerConditionId).Width(100);
                                                    columns.Bound(p => p.ConditionId).Width(100);
                                                    columns.Bound(p => p.CustomerConditionName).Width(100);
                                                    columns.Bound(p => p.LogicalCondition).Width(150);
                                                    columns.Bound(p => p.ValueToEvaluate).Width(150);
                                                    columns.Bound(p => p.ValueDecimal).Width(150);
                                                    columns.Command(command =>
                                                    {
                                                        // command.Edit();
                                                        //command.Destroy();
                                                    }).Width(250);
                                                })
                                                .ToolBar(tools =>
                                                {
                                                    //tools.Create();
                                                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                    .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCustomerCondition();" });
                                                    tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                                    tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                                                })
                                                .Editable(e => e.Mode(GridEditMode.PopUp))
                                                .Sortable()
                                                .Pageable()
                                                .Filterable()
                                                .Scrollable()
                                                .Pdf(pdf => pdf.FileName("CustomerConditionReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                    .Excel(excel => excel.FileName("CustomerConditionReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                .DataSource(dataSource =>
                                                    dataSource
                                                    .WebApi()

                                                    .ServerOperation(true)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.CustomerConditionId);
                                                        model.Field(p => p.CustomerConditionId).Editable(false);
                                                        model.Field(p => p.ConditionId).Editable(true);
                                                        model.Field(p => p.FechaCreacion).Editable(false);
                                                        model.Field(p => p.FechaModificacion).Editable(false);
                                                        model.Field(p => p.CustomerConditionId).Editable(false);

                                                    })
                                                    .Events(events => events.Error("error_handler"))
                                                    .Read(read => read.Action("Get", "CustomerConditions")
                                                         .Type(HttpVerbs.Get).Data("filterdatacc"))
                                                    .Create(create => create.Action("Insert", "CustomerConditions").Type(HttpVerbs.Post))
                                                    .Update(update => update.Action("Update", "CustomerConditions", new { id = "{0}" }))
                                                    .Destroy(destroy => destroy.Action("Delete", "CustomerConditions", new { id = "{0}" }))

                                                )
                                                .Events(e =>
                                                {
                                                    // e.Save("onsave");

                                                })
                            )

                            </div>
</div>
</div>
</div>
</div>
</div>
</div>