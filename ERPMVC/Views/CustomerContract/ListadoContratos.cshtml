@using System.Security.Claims
@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
    ViewData["Title"] = "Contratos";
}

<h3 class="text-themecolor">Contratos de Clientes</h3>
<script>

      function clearsession() {
            var dataObject = ["listadocontratos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalCustomerContract').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
          });
    }

    function AnularContrato() {
        debugger;
         console.log('id', $("#AnularContrato").val())
        console.log('observacion',$("#ObservacionAnular").val())


        if (confirm('Esta seguro de anular esta cotización?')) {


            var dataObject = {
                CustomerContractId: contratoseleccionado,
                Observcion: $("#ObservacionAnular").val(),

                editar: 0
            };

            $.ajax({
                url: '@Url.Action("Anular", "CustomerContract")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {

                    $('#ModalAnular').modal('hide');
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'Contrato Terminado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });

                    RefreshGridCustomerContract();

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });

        }

        }

    function Anular(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        contratoseleccionado = dataItem.CustomerContractId;                
        $('#ModalAnular').modal('show');

            }

    function AddCustomerContractSignature() {

       //  clearsession();

        var mcustomerid = GetCustomerId();
       // console.log(mcustomerid);

         var dataObject = {
             CustomerContractId: 0,
             CustomerId: mcustomerid.CustomerId,
             editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwCustomerContract", "CustomerContract")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#CustomerContract").html('');
                $("#CustomerContract").html(result);
                //RefreshCotizacionesDetail();
                // $("#btnSaveCotizacion").show();
                $('#myModalCustomerContract').modal('show');
                RefreshGridCustomerContract();
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }


    function EditCustomerContractSignature(e) {
        e.preventDefault();

       // clearsession();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            CustomerContractId: dataItem.CustomerContractId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwCustomerContract", "CustomerContract")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#CustomerContract").html('');
                $("#CustomerContract").html(result);

                $('#myModalCustomerContract').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    var contratoseleccionado = 0;


    function ModalActivarContrato(e) {
        e.preventDefault();
        debugger
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        
        contratoseleccionado = dataItem.CustomerContractId;
        $('#ModalActivar').modal('show');
       
    }




    function ActivarContrato(e) {
               

        var dataObject = {
            CustomerContractId: contratoseleccionado,
            FechaInicioContrato: $("#FechaInicio").getKendoDateTimePicker().value().toJSON(),
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("ActivarContrato", "CustomerContract")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $('#ModalPresupuestoFijo').modal('Hide');
                RefrescarGrid();
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'Se ha cambiado el estado de contrato a Vigente',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 7000,
                    stack: 6
                });
                $('#ModalActivar').modal('hide');
                RefreshGridCustomerContract();
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (this.Estado != "Generado") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Activar').hide();

            }
            if (this.Estado != "Generado") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-ActivarAdendum').hide();

            }
            if (this.Estado == "Terminado") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Anular').hide();
            }
            if (this.Estado == "Terminado") {
                $('[data-uid=' + this.uid + ']').find('.k-grid-AnularAdendum').hide();
            }
        })
    }

    function RefrescarGrid() {
        var grid = $("#gridCustomerContract").getKendoGrid();
        grid.dataSource.read();

    }

      function ImprimirContrato(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
          var url = '@Url.Action("SFPrintContract", "CustomerContract")/' + dataItem.CustomerContractId;
           var win = window.open(url, '_blank');
           win.focus();
    }


</script>


<div id="ModalAnular" style="width: 300px; height: 300px; position: absolute; left: 50%; top: 50%; margin-left: -150px; margin-top: -150px;" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Observaciones</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">

                <div class="col-md-12">
                    <div class="form-group">
                        <form id="frmObservacion" kendo-validator="true" 
                              data-ajax-method="post"
                              data-ajax-begin="AnularContrato"
                              class="validation-wizard wizard-circle">
                            <label class="control-label" style="width:100%">Observacion</label>
                            <input type="text" id="ObservacionAnular" class="k-text" style="min-width: 100%" />

                            <button id="btnobservacion" type="button" onclick="AnularContrato()" class="form-control btn-miboton">Anular</button>
                        </form>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@(Html.Kendo().Grid<ERPMVC.Models.CustomerContract>()
                              .Name("gridCustomerContract")
                              .Columns(columns =>
                              {

                                  columns.Command(command =>
                                  {

                                      command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCustomerContractSignature");


                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirContrato");

                                      command.Custom("Activar").Text(" ").IconClass("fa fa-check").Click("ModalActivarContrato");
                                      command.Custom("Anular").Text(" ").IconClass("fa fa-ban").Click("Anular");

                                      // command.Custom("Ver detalles").Click("Detalles");
                                      // command.Edit(); command.Destroy();
                                  }).Title("Acciones").Width(200);

                                  columns.Bound(p => p.CustomerContractId).Width(150).Title("Id Contrato");
                                  columns.Bound(p => p.CustomerId).Visible(false).Width(100);
                                  columns.Bound(p => p.ProductName).Title("Servicio").Width(200);
                                  columns.Bound(p => p.TypeInvoiceName).Title("Tipo de Facturacion").Width(200);
                                  columns.Bound(p => p.CustomerName).Width(300);
                                  columns.Bound(p => p.CustomerManager).Width(230).Title("Gerente Gral Cliente");
                                  columns.Bound(p => p.Plazo).Title("Plazo Meses").Width(150);
                                  //columns.Bound(p => p.TypeContractName).Title("Tipo").Width(100);
                                  //columns.Bound(p => p.Manager).Width(180);
                                  columns.Bound(p => p.SalesOrderId).Title("Cotizacion").Width(150);
                                  columns.Bound(p => p.Estado).Width(150);
                                  columns.Bound(p => p.FechaInicioContrato).Width(200).Format("{0:dd/MM/yyyy}").Title("Fecha Inicio");
                                  columns.Bound(p => p.FechaVencimiento).Width(200).Format("{0:dd/MM/yyyy}");
                                  columns.Bound(p => p.Observcion).Title("Observación").Width(200);


                              })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                       .DoesNotContain("No contiene")
                                                       .EndsWith("Termina con")
                                                       .IsEqualTo("Es igual a")
                                                       .IsNotEqualTo("No es igual a")
                                                       .IsNull("Es nulo")
                                                       .StartsWith("Inicia con")


                                                 )
                                                 .ForNumber(n => n
                                                   .Clear()
                                                   .IsEqualTo("Es igual a")
                                                   .IsGreaterThan("Es mayor que")
                                                   .IsLessThan("Es menor que")
                                                   .IsNull("Es nulo")
                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 )
                                                 .ForDate(d => d
                                                 .Clear()
                                                 .IsEqualTo("Es igual que")
                                                 .IsGreaterThan("Es mayor que")
                                                 .IsLessThan("Es menor que")
                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 .IsNotEqualTo("No es igual que")
                                                  )
                                               ))
                              .ToolBar(tools =>
                              {
                                  //tools.Create();
                                  //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                  //                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCustomerContractSignature();" });
                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                              })
                              .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                              .Sortable()
                              .Pageable()
                              .Filterable()
                              .Scrollable()
                              .ClientDetailTemplateId("template")
                              .Pdf(pdf => pdf.FileName("ClienteAreaReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                               .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                 .Excel(excel => excel.FileName("ClienteAreaReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                               .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                              .DataSource(dataSource =>
                                  dataSource
                                    .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.CustomerId);
                                        model.Field(p => p.CustomerId).Editable(false);
                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Sort(s => s.Add(m => m.CustomerContractId).Descending())
                                    .Read(read => read.Action("GetList", "CustomerContract"))

                                    .Create(create => create.Action("Post", "CustomerContract"))
                                    .Update(update => update.Action("Put", "CustomerContract", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "CustomerContract", new { id = "{0}" }))
                                     
                              )
                                .Events(e => e.DataBound("dataBound"))
                                
)




<div id="CustomerContract">
    @await Html.PartialAsync("pvwCustomerContract", new ERPMVC.Models.CustomerContract { CustomerContractId = 0 })
</div>



<script id="template" type="text/kendo-tmpl">
    Adendums
    @(Html.Kendo().Grid<ERPMVC.Models.CustomerContract>()
                              .Name("grid_#=CustomerContractId#")
                              .Columns(columns =>
                              {

                                  columns.Command(command =>
                                  {

                                      command.Custom("EditarAdendum").Text(" ").IconClass("fa fa-edit").Click("EditCustomerContractSignature");


                                      command.Custom("ImprimirAdendum").Text(" ").IconClass("fa fa-print").Click("ImprimirContrato");

                                      command.Custom("ActivarAdendum").Text(" ").IconClass("fa fa-check").Click("ModalActivarContrato");
                                      command.Custom("AnularAdendum").Text(" ").IconClass("fa fa-ban").Click("Anular");

                                      // command.Custom("Ver detalles").Click("Detalles");
                                      // command.Edit(); command.Destroy();
                                  }).Title("Acciones").Width(200);

                                  columns.Bound(p => p.AdendumNo).Title("No Adendum").Width(170);
                                  columns.Bound(p => p.CustomerContractId).Width(100).Title("Id Contrato").Visible(false);
                                  columns.Bound(p => p.CustomerId).Visible(false).Width(100);
                                  columns.Bound(p => p.ProductName).Title("Servicio").Width(200);
                                  columns.Bound(p => p.TypeInvoiceName).Title("Tipo de Facturacion").Width(200);
                                  //columns.Bound(p => p.CustomerManager).Width(230).Title("Gerente Gral Cliente");
                                  columns.Bound(p => p.Plazo).Title("Plazo Meses").Width(150);
                                  //columns.Bound(p => p.TypeContractName).Title("Tipo").Width(100);
                                  columns.Bound(p => p.CustomerContractId_Source).Title("Contrato").Width(150).Visible(false);
                                  columns.Bound(p => p.SalesOrderId).Title("Cotizacion").Width(150);
                                  //columns.Bound(p => p.Manager).Width(180);
                                  columns.Bound(p => p.Estado).Width(150);
                                  columns.Bound(p => p.FechaInicioContrato).Width(200).Format("{0:dd/MM/yyyy}").Title("Fecha Inicio");
                                  columns.Bound(p => p.FechaVencimiento).Width(200).Format("{0:dd/MM/yyyy}");
                                  columns.Bound(p => p.Observcion).Title("Observación").Width(200);


                              })
                                 
                              .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                              .Sortable()
                              .Pageable()
                              .Filterable()
                              .Scrollable()
                              
                              .Pdf(pdf => pdf.FileName("ClienteAreaReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                               .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                 .Excel(excel => excel.FileName("ClienteAreaReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                               .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                              .DataSource(dataSource =>
                                  dataSource
                                    .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.CustomerId);
                                        model.Field(p => p.CustomerId).Editable(false);
                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Sort(s => s.Add(m => m.CustomerContractId).Descending())
                                    .Read(read => read.Action("CustomerAdendumByContract", "CustomerContract", new { ContractId = "#=CustomerContractId#" }))

                                    .Create(create => create.Action("Post", "CustomerContract"))
                                    .Update(update => update.Action("Put", "CustomerContract", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "CustomerContract", new { id = "{0}" }))

                              )
                                .Events(e => e.DataBound("dataBound")).ToClientTemplate()

)
</script>

<div id="ModalActivar" style="width: 300px; height: 300px; position: absolute; left: 50%; top: 50%; margin-left: -150px; margin-top: -150px;" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Seleccione fecha de Incio</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">

                
                    <div class="form-group">
                        <form id="frmActivar"
                              data-ajax="true"
                              data-ajax-method="post"
                              data-ajax-begin="ActivarContrato"
                              class="validation-wizard wizard-circle">
                            
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class=" control-label" style="width: 100%;">Fecha Inicio</label>
                                    <kendo-datetimepicker name="FechaInicio"
                                                          style="width: 100%;"
                                                          format="dd/MM/yyyy hh:mm:ss"
                                                          time-format="hh:mm:ss"                                                          
                                                          data-val-required="La fecha es requerida"
                                                          value="DateTime.Now" />
                                </div>
                            </div>

                            <button id="btnobservacion" type="submit" class="form-control btn-miboton">Activar Contrato</button>
                        </form>
                    </div>
                

            </div>
        </div>
    </div>
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCustomerContract").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCustomerContract").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Anular", "Anular registro");

    setRowButtonTooltip(".k-grid-Activar", "Activar Contrato");
</script>