@using Kendo.Mvc.UI

<script>

</script>


    <!-- Modal content-->
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Cierre Contable Manual</h4>
            </div>
            <div class="modal-body">
                <div class="col-lg-12">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label style="width:100%">Fecha</label>
                                <kendo-datetimepicker name="Date" style="width: 100%;"
                                                      format="dd/MM/yyyy hh:mm:ss"
                                                      time-format="hh:mm:ss"
                                                      data-val-required="La fecha es requerida"></kendo-datetimepicker>
                                <span class="text-danger k-invalid-msg" data-for="Date"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label style="width:100%"></label>
                                <button type="button" id="Cierre" class="form-control btn-miboton">Ejecutar</button>
                            </div>
                        </div>
                    </div>
                </div>

                <h3 class="text-themecolor"></h3>
                @(Html.Kendo().Grid<ERPMVC.Models.BitacoraCierreProcesos>
                                            ()
                                            .Name("gridBitacoraCierreProcesos")
                                            .Columns(columns =>
                                            {
                                                columns.Command(command =>
                                                {
                                                    //command.Custom("Ver detalles").Click("Detalles");
                                                    //command.Custom("Editar").Click("EditBank");
                                                    //command.Destroy().Text("Eliminar");
                                                }).Width(50);
                                                columns.Bound(p => p.IdBitacoraCierre).Width(100);
                                                columns.Bound(p => p.IdProceso).Width(200);
                                                columns.Bound(p => p.FechaCierre).Width(150);
                                                columns.Bound(p => p.PasoCierre).Width(150);
                                                columns.Bound(p => p.Proceso).Width(150);
                                                columns.Bound(p => p.Estatus).Width(150);
                                            })
                                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                       .Clear()
                                                                       .Contains("Contiene")
                                                                       .DoesNotContain("No contiene")
                                                                       .EndsWith("Termina con")
                                                                       .IsEqualTo("Es igual a")
                                                                       .IsNotEqualTo("No es igual a")
                                                                       .IsNull("Es nulo")
                                                                       .StartsWith("Inicia con")
                                                                 )
                                                                 .ForNumber(n => n
                                                                   .Clear()
                                                                   .IsEqualTo("Es igual a")
                                                                   .IsGreaterThan("Es mayor que")
                                                                   .IsLessThan("Es menor que")
                                                                   .IsNull("Es nulo")
                                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 )
                                                                 .ForDate(d => d
                                                                 .Clear()
                                                                 .IsEqualTo("Es igual que")
                                                                 .IsGreaterThan("Es mayor que")
                                                                 .IsLessThan("Es menor que")
                                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                 .IsNotEqualTo("No es igual que")
                                                                  )
                                                               ))
                                            .ToolBar(tools =>
                                            {
                                                // tools.Create();
                                                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                   .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddBank()" });
                                                tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                                tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



                                            })
                                            .Editable(e => e.Mode(GridEditMode.PopUp))
                                            .Sortable()
                                            .Pageable()
                                            .Filterable()
                                            .Scrollable()
                                            .Pdf(pdf => pdf.FileName("BankReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                .Excel(excel => excel.FileName("BankReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                            .DataSource(dataSource =>
                                                dataSource
                                                .WebApi()

                                                .ServerOperation(true)
                                                .Model(model =>
                                                {
                                                    model.Id(p => p.IdBitacoraCierre);
                                                    model.Field(p => p.IdProceso).Editable(false);
                                                    //model.Field(p => p.FechaCreacion).Editable(true);
                                                    //model.Field(p => p.UsuarioCreacion).Editable(false);
                                                    //model.Field(p => p.UsuarioModificacion).Editable(false);

                                                })
                                                .Events(events => events.Error("error_handler"))
                                            //.Read(read => read.Action("GetBank", "Bank"))
                                            //.Create(create => create.Action("Insert", "Bank"))
                                            //.Update(update => update.Action("Update", "Bank").Type(HttpVerbs.Put))
                                            //.Destroy(destroy => destroy.Action("Delete", "Bank").Type(HttpVerbs.Post))

                                            )
                                            .Events(e =>
                                            {
                                                //e.Save("onsave");

                                            })
                )

            </div>
        </div>
    </div>
