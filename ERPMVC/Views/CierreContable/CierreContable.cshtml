@model ERPMVC.Models.BitacoraCierreContable
@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Cierre Manual";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}


<script>
    function RefrescarGridCierreContable() {
        var grid = $("#gridBitacoraCierreContable").getKendoGrid();
        grid.dataSource.read();
    }

    function RefrescarGridCierreProcesos() {
        var grid = $("#grid_#=Id#").getKendoGrid();
        grid.dataSource.read();
    }


    function Cierre() {
        debugger
        var parametro = $("#FechaCierre").getKendoDatePicker().value().toJSON();
        console.log("parametro", parametro);
        $('#loading').show();
        $("#Cierre").prop('value', 'Ejecutando ...');
        if (parametro != '') {
            var dataObjectConfiguration = {
                FechaCierre: parametro
            };
            $.ajax({
                url: '@Url.Action("GetEjecutarCierreContable", "CierreContable")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: true,

                data: JSON.stringify(dataObjectConfiguration),
                success: function (result) {
                    $('#loading').hide();
                    $("#Cierre").prop('value', 'Ejecutar');
                    $.toast({
                        heading: 'Satisfactorio',
                        text: '' + 'Se aplico el cierre contable.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 30000,
                        stack: 6
                    });
                    $("#FechaCierre").val('');
                    RefrescarGridCierreContable();
                    location.reload();
                    //RefrescarGridCierreProcesos();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(textStatus + ": " + XMLHttpRequest.responseText);
                    $.toast({
                        heading: 'Error',
                        text: '' + XMLHttpRequest.responseText,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                    $('#loading').hide();
                    $("#Cierre").prop('value', 'Ejecutar');

                }
            });
            //RefrescarGridCierreContable();

        }
    }
        $(function () {
            debugger;
            $('#loading').hide();

        });


        function GetPeriodo(){
            var periodo = $("#PeriodoId").val();
            return{
                PeriodoId: periodo,
            }

        
        }

        function EjecutarProceso(){
            $.toast({
                        heading: 'Satisfactorio',
                        text: '' + 'Se aplico el cierre contable.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 30000,
                        stack: 6
                    });
        }
</script>

<h4>Cierre Contable Manual</h4>
<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-lg-12">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label asp-for="Id" class="control-label" style="width:100%">Periodo</label>
                            <kendo-dropdownlist name="PeriodoId" filter="Kendo.Mvc.UI.FilterType.Contains"
                                                id="PeriodoId"
                                                option-label="Seleccione el periodo"                                                
                                                on-change="RefrescarGridCierreContable"
                                                datatextfield="Anio"
                                                datavaluefield="Id"
                                                auto-bind="true"
                                                data-val-required="EL Periodo es requerido"
                                                style="width: 100%;">
                                <datasource type="DataSourceTagHelperType.WebApi">
                                    <transport>
                                        <read url="@Url.Action("GetActivo", "Periodo")" />
                                    </transport>
                                </datasource>

                            </kendo-dropdownlist>
                            <span asp-validation-for="Id" class="text-danger"></span>
                        </div>
                </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label style="width:100%"></label>

                            <div id="loading">
                                <svg class="circular" viewBox="25 25 50 50">
                                    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"></circle>
                                </svg>
                            </div>


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@(Html.Kendo().Grid<ERPMVC.Models.BitacoraCierreContable>
                                                                        ()
                                                                        .Name("gridBitacoraCierreContable")
                                                                        .Columns(columns =>
                                                                        {
                                                                            //columns.Command(command =>
                                                                            //{
                                                                            //command.Custom("Ver detalles").Click("Detalles");
                                                                            //command.Custom("Editar").Click("EditBank");
                                                                            //command.Destroy().Text("Eliminar");
                                                                            //}).Width(10);
                                                                            columns.Bound(p => p.Id).Width(100).Visible(false);
                                                                            columns.Bound(p => p.Mes).Width(100);
                                                                            columns.Bound(p => p.FechaCierre).Format("{0:dd/MM/yyyy}").Width(200);
                                                                            //columns.Bound(p => p.EstatusId).Width(150);
                                                                            columns.Bound(p => p.Estatus).Width(150);
                                                                            columns.Bound(p => p.Mensaje).Width(150);
                                                                        })
                                                                            .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                                                   .Clear()
                                                                                                   .Contains("Contiene")
                                                                                                   .DoesNotContain("No contiene")
                                                                                                   .EndsWith("Termina con")
                                                                                                   .IsEqualTo("Es igual a")
                                                                                                   .IsNotEqualTo("No es igual a")
                                                                                                   .IsNull("Es nulo")
                                                                                                   .StartsWith("Inicia con")
                                                                                             )
                                                                                             .ForNumber(n => n
                                                                                               .Clear()
                                                                                               .IsEqualTo("Es igual a")
                                                                                               .IsGreaterThan("Es mayor que")
                                                                                               .IsLessThan("Es menor que")
                                                                                               .IsNull("Es nulo")
                                                                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                             )
                                                                                             .ForDate(d => d
                                                                                             .Clear()
                                                                                             .IsEqualTo("Es igual que")
                                                                                             .IsGreaterThan("Es mayor que")
                                                                                             .IsLessThan("Es menor que")
                                                                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                             .IsNotEqualTo("No es igual que")
                                                                                              )
                                                                                           ))
                                                                        @*.ToolBar(tools =>
                                                                        {
                                                                            // tools.Create();
                                                                            //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                            //    .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddBank()" });
                                                                                tools.Excel().HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a Excel");
                                                                                tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a PDF");
                                                                        })*@
                                                                        .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                        .Sortable()
                                                                        .AutoBind(true)
                                                                        .Pageable()
                                                                        .Filterable()
                                                                        .Scrollable()
                                                                        .ClientDetailTemplateId("template")
                                                                        .Pdf(pdf => pdf.FileName("CierreContableReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                        .Excel(excel => excel.FileName("CierreContableReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                        .DataSource(dataSource =>
                                                                            dataSource
                                                                            .WebApi()
                                                                            .ServerOperation(true)
                                                                            .Model(model =>
                                                                            {
                                                                                model.Id(p => p.Id);
                                                                                model.Field(p => p.Id).Editable(false);
                                                                            })
                                                                            .Events(events => events.Error("error_handler"))
                                                                        .Read(read => read.Action("GetBitacoraCierreContable", "BitacoraCierreContable").Data("GetPeriodo")))
                                                                        .Events(e =>
                                                                        {
                                                                            //e.Save("onsave");
                                                                        })
)


<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<ERPMVC.Models.BitacoraCierreProcesos>()
                                              .Name("grid_#=Id#")
                                              .Columns(columns =>
                                              {
                                      columns.Command(command =>
                                      {
                                          // command.Destroy();
                                          command.Custom("ProcesarCierre").Text(" ").IconClass("fa fa-play").Click("EjecutarProceso");
                                      }).Width(80);
                                      columns.Bound(o => o.IdProceso).Title("Id").Width(80).Visible(false);
                                                  columns.Bound(o => o.IdBitacoraCierre).Title("Id Bitacora Cierre").Width(150).Visible(false);
                                                  columns.Bound(o => o.FechaCierre).Title("Fecha Ejecucion").Format("{0:dd/MM/yyyy}").Width(150).Visible(true);
                                                  columns.Bound(o => o.PasoCierre).Title("Paso Cierre").Width(150).Visible(true);
                                                  columns.Bound(o => o.Proceso).Title("Proceso").Width(200).Visible(true);
                                                  columns.Bound(o => o.Asientos).Title("Asientos Generados").Width(150);
                                                  columns.Bound(o => o.Mensaje).Title("Mensaje").Width(150);
                                                  columns.Bound(o => o.Estatus).Title("Estatus").Width(120);
                                              })
                                              .DataSource(dataSource => dataSource
                                                 .WebApi()
                                                 .ServerOperation(true)
                                                 //.PageSize(5)
                                                 .Read(read => read.Action("GetCierreProcesosByCierreContableId", "BitacoraCierreProceso", new { IdBitacoraCierre = "#=Id#" }))
                                                 //.Destroy(destroy => destroy.Action("Delete", "UserRol", new { RoleId = "#=Id#" }))
                                                 // .Destroy(destroy => destroy.Action("Delete", "UserRol", new { UserId  = "{0}", RoleId="#=Id#" }))
                                                 )
                                             //.Pageable()
                                             .Sortable()
                                             .ToClientTemplate())

</script>

<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
</script>
<style>
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }

    .employee-details ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

        .employee-details ul li {
            margin: 0;
            line-height: 1.7em;
        }

    .employee-details label {
        display: inline-block;
        width: 90px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
    }
</style>
