@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    DateTime fecha = DateTime.Today;
    bool todo = false;

    ViewData["Title"] = "Horas Extra";

    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}
<h3 class="text-themecolor">Revisión y Aprobación de Horas Extra</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div class="row">
                <form id="frmBiometrico" kendo-validator="true">
                    <div class="form-group">
                                <label class="control-label" style="min-width: 100%;">Fecha</label>
                                <kendo-datepicker name="Fecha"
                                                  style="min-width: 100%;"
                                                  format="dd/MM/yyyy "
                                                  value="fecha"/>
                    </div>
                    <div class="form-group">
                        <label>Mostrar Todos los Estados:</label>
                        <input type="checkbox" id="Todos" name="Todos" value="true" style="position: relative; left: 0px; opacity: 100;" />
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Cargar" onclick="RefrescarGridDetalle()" />
                    </div>
                </form>
            </div>
            <div class="row">
                <h4 id="titulo">Horas Extra de @fecha.ToString("dd/MM/yyyy")</h4>
                <div id="grdConfiguracion"></div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#frmBiometrico").submit(function (event) {
            event.preventDefault(); // Evita la acción de envío por defecto
            var fechaHoraExtra = $("#Fecha").data("kendoDatePicker").value();
            $("#titulo").text("Horas Extra de " + fechaHoraExtra.toLocaleDateString("es-ES"));
            GetData(); // Llama a GetData cuando se envía el formulario
        });
    });


    function RefrescarGridDetalle() {
        var grid = $("#grdConfiguracion").getKendoGrid();
        grid.dataSource.read();

    }

    function GetData() {
        debugger;
        var fechaHoraExtra = $("#Fecha").data("kendoDatePicker").value();
        var checked = $("#Todos").prop("checked");

        var data = {

            fecha: fechaHoraExtra.toJSON(),
            todos: checked
        };
        return data
        RefrescarGridDetalle();
    }

    function Aprobar(e) {
        if (!confirm('Esta seguro de rechazar esta Hora Extra?')) return;
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            idHoraExtra: registro.Id
        };
        debugger;
        $.ajax({
            url: '@Url.Action("AprobarHorasExtra", "HoraExtra")',
            method: 'POST',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'Datos guardados correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $.toast({
                    heading: 'Error',
                    text: textStatus + ": " + XMLHttpRequest.responseText,
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            }
        });
    }

    function Rechazar(e) {
        if (!confirm('Esta seguro de rechazar esta Hora Extra?')) return;
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            idHoraExtra: registro.Id
        };
        debugger;
        $.ajax({
            url: '@Url.Action("RechazarHoraExtra", "HoraExtra")',
            method: 'POST',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'Datos guardados correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $.toast({
                    heading: 'Error',
                    text: textStatus + ": " + XMLHttpRequest.responseText,
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            }
        });
    }


    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            if (this.Estado.NombreEstado != 'Cargado') {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();
                $('[data-uid=' + this.uid + ']').find('.k-grid-Rechazar').hide();
            }
        })
    }

</script>


@(Html.Kendo().Grid<ERPMVC.Models.HoraExtra>()
                                      .Name("grdConfiguracion").NoRecords()

                                      .Columns(columns =>
                                      {
                                          {
                                              columns.Command(command =>
                                              {
                                                  command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("Aprobar");
                                                  command.Custom("Rechazar").Text(" ").IconClass("fa fa-thumbs-down").Click("Rechazar");

                                              }).Width(200).Title("Acciones");
                                          }
                                          columns.Bound(p => p.Id).Title("No.").Width(80);
                                          columns.Bound(p => p.Empleado.NombreEmpleado).Title("Empleado").Width(130);
                                          columns.Bound(p => p.Horas).Title("Horas").Width(130).HtmlAttributes(new { style = "text-align: right;" });
                                          columns.Bound(p => p.Minutos).Title("Minutos").Width(150).HtmlAttributes(new { style = "text-align: right;" });
                                          columns.Bound(p => p.Estado.NombreEstado).Title("Estado").Width(150);
                                      }).Filterable(f => f.Operators(o => o.ForString(s => s
                                                             .Clear()
                                                             .Contains("Contiene")
                                                             .DoesNotContain("No contiene")
                                                             .EndsWith("Termina con")
                                                             .IsEqualTo("Es igual a")
                                                             .IsNotEqualTo("No es igual a")
                                                             .IsNull("Es nulo")
                                                             .StartsWith("Inicia con")
                                                       )
                                                       .ForNumber(n => n
                                                         .Clear()
                                                         .IsEqualTo("Es igual a")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsNull("Es nulo")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       )
                                                       .ForDate(d => d
                                                       .Clear()
                                                       .IsEqualTo("Es igual que")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       .IsNotEqualTo("No es igual que")
                                                        )
                                                     ))

                                        .Editable(e => e.Mode(GridEditMode.PopUp))
                                        .Sortable()
                                        .AutoBind(true)
                                        .Pageable(p => p.Input(true))
                                        .Resizable(s => s.Columns(true))
                                        .Filterable()
                                        .Scrollable()
                                        .DataSource(dataSource =>
                                       dataSource
                                       //.Ajax()
                                       .WebApi()
                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.Id);
                                        })
                                        .Events(events =>
                                        {
                                            events.Error("error_handler");
                                        })
                                        .Read(read => read.Action("GetHorasExtra", "HoraExtra").Data("GetData"))
                                  ).Events(e => e.DataBound("dataBound"))
)

<script>
    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#grdConfiguracion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltip(".k-grid-Aprobar", "Aprobar");
    setRowButtonTooltip(".k-grid-Rechazar", "Rechazar");
</script>
