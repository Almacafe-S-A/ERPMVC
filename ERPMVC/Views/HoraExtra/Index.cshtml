@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    DateTime fecha = DateTime.Today;
    bool todo = false;
    ViewData["Title"] = "Horas Extra";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}
<h3 class="text-themecolor">Revisión y Aprobación de Horas Extra</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div class="row">
                <form id="frmBiometrico" kendo-validator="true">
                    <div class="form-group">
                                <label class="control-label" style="min-width: 100%;">Fecha</label>
                        <kendo-datepicker id="Fecha" name="Fecha" style="min-width: 100%;"
                                          format="dd/MM/yyyy "
                                          value="fecha" />
                        <input type="hidden" id="fechaSeleccionada" name="fechaSeleccionada" />
                    </div>
                    <div class="form-group">
                        <label>Mostrar Todos los Estados:</label>
                        <kendo-switch name="Todos" id="Todos">
                            <messages checked="Si" unchecked="No" />
                        </kendo-switch>
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Cargar" onclick="RefrescarGridDetalle()" />
                    </div>
                </form>
            </div>
            <div class="row">
                <h4 id="titulo">Horas Extra de @fecha.ToString("dd/M/yyyy")</h4>
                <div id="grdConfiguracion"></div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#frmBiometrico").submit(function (event) {
            event.preventDefault(); // Evita la acción de envío por defecto
            debugger;
            var fechaHoraExtra = $("#Fecha").data("kendoDatePicker").value();
            var fechaFormateada = fechaHoraExtra.toLocaleDateString("es-ES", {
                day: "2-digit",
                month: "2-digit",
                year: "numeric"
            });
            if (fechaHoraExtra) {
                $("#fechaHoraExtra").val(kendo.toString(fechaSeleccionada, "dd/MM/yyyy"));
            }
            $("#titulo").text("Horas Extra de " + fechaFormateada);
            GetData(); // Llama a GetData cuando se envía el formulario
        });
    });

    function Revisar(e) {
        debugger;
        if (!confirm('Esta seguro de marcar como revisada esta Hora Extra?')) return;
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            idHoraExtra: registro.Id
        };
        debugger;
        $.ajax({
            url: '@Url.Action("Revisar", "HoraExtra")',
            method: 'POST',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'La Hora Extra se ha revisado correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 7000,
                    stack: 6
                });
                RefrescarGridDetalle();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                notification.show({
                    title: "Validación",
                    message: textStatus + ": " + XMLHttpRequest.responseText
                }, "error");
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function RefrescarGridDetalle() {
        debugger;
        var grid = $("#grdConfiguracion").getKendoGrid();
        grid.dataSource.read();

    }

    function GetData() {
        debugger;
        var fechaHoraExtra = $("#Fecha").data("kendoDatePicker").value();
        var checked = $("#Todos").prop("checked");
        var data = {

            fecha: fechaHoraExtra.toJSON(),
            todos: checked
        };
        return data;
    }

    function Aprobar(e) {
        if (!confirm('Esta seguro de aprobar esta Hora Extra?')) return;
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            idHoraExtra: registro.Id
        };
        debugger;
        $.ajax({
            url: '@Url.Action("Aprobar", "HoraExtra")',
            method: 'POST',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'Datos aprobados correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $.toast({
                    heading: 'Error',
                    text: textStatus + ": " + XMLHttpRequest.responseText,
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            }
        });
    }

    function Rechazar(e) {
        if (!confirm('Esta seguro de rechazar esta Hora Extra?')) return;
        var registro = this.dataItem($(e.currentTarget).closest('tr'));
        var parametros = {
            idHoraExtra: registro.Id
        };
        debugger;
        $.ajax({
            url: '@Url.Action("Rechazar", "HoraExtra")',
            method: 'POST',
            datatype: "json",
            async: false,
            data: parametros,
            success: function (result) {
                $.toast({
                    heading: 'Satisfactorio',
                    text: 'Datos rechazados correctamente.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'success',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                $.toast({
                    heading: 'Error',
                    text: textStatus + ": " + XMLHttpRequest.responseText,
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 3000,
                    stack: 6
                });
                RefrescarGridDetalle();
            }
        });
    }

    function dataBound(e) {
        var grid = this;
        var data = grid.dataSource.data();
        $.each(data, function (index, item) {
            var estado = item.Estados;
            var row = grid.tbody.find("tr[data-uid='" + item.uid + "']");
            // Ocultar todos los botones por defecto
            row.find(".k-grid-Revisar, .k-grid-Aprobar, .k-grid-Rechazar").hide();
            // Mostrar botones según el estado
            if (estado === "Pendiente") {
                row.find(".k-grid-Revisar").show();
            } else if (estado === "Revisado") {
                row.find(".k-grid-Aprobar, .k-grid-Rechazar").show();
            }
        });
    }


</script>


@(Html.Kendo().Grid<ERPMVC.Models.HoraExtra>()
                                      .Name("grdConfiguracion").NoRecords().Events(e => e.DataBound("dataBound"))

                                      .Columns(columns =>
                                      {
                                          {
                                              columns.Command(command =>
                                              {
                                                  command.Edit().Text(" ").IconClass("fa fa-edit");
                                                  command.Custom("Revisar").Text(" ").IconClass("fa fa-check").Click("Revisar");
                                                  command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("Aprobar");
                                                  command.Custom("Rechazar").Text(" ").IconClass("fa fa-thumbs-down").Click("Rechazar");

                                              }).Width(140).Title("Acciones");
                                          }
                                          columns.Bound(p => p.Id).Width(80).Visible(false);
                                          columns.Bound(p => p.IdEmpleado).Title("Id").Width(80);
                                          columns.Bound(p => p.Empleado.NombreEmpleado).Title("Empleado").Width(130);
                                          columns.Bound(p => p.HoraEntrada).Title("Entrada").Width(100);
                                          columns.Bound(p => p.HoraSalida).Title("Salida").Width(90);
                                          columns.Bound(p => p.Horas).Title("Horas").Width(90).HtmlAttributes(new { style = "text-align: right;" });
                                          columns.Bound(p => p.Minutos).Title("Minutos").Width(100).HtmlAttributes(new { style = "text-align: right;" });
                                          columns.Bound(p => p.HorasExtras).Width(125).Title("Total Horas").HtmlAttributes(new { style = "text-align: right;" });
                                          columns.Bound(p => p.Observaciones).Width(135).Title("Observación");
                                          columns.Bound(p => p.Estados).Title("Estado").Width(150);
                                      }).Filterable(f => f.Operators(o => o.ForString(s => s
                                                             .Clear()
                                                             .Contains("Contiene")
                                                             .DoesNotContain("No contiene")
                                                             .EndsWith("Termina con")
                                                             .IsEqualTo("Es igual a")
                                                             .IsNotEqualTo("No es igual a")
                                                             .IsNull("Es nulo")
                                                             .StartsWith("Inicia con")
                                                       )
                                                       .ForNumber(n => n
                                                         .Clear()
                                                         .IsEqualTo("Es igual a")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsNull("Es nulo")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       )
                                                       .ForDate(d => d
                                                       .Clear()
                                                       .IsEqualTo("Es igual que")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                       .IsNotEqualTo("No es igual que")
                                                        )
                                                     ))
                                        .ToolBar(tools =>
                                        {
                                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                        })
                                        .Editable(e => e.Mode(GridEditMode.InLine))
                                        .Sortable()
                                        .AutoBind(true)
                                        .Pageable(p => p.Input(true))
                                        .Resizable(s => s.Columns(true))
                                        .Filterable()
                                        .Scrollable()
                                        .Excel(excel => excel
                                            .AllPages(true)
                                            .Filterable(true)
                                        )
                                        .DataSource(dataSource =>
                                       dataSource
                                       //.Ajax()
                                       .WebApi()
                                        .ServerOperation(true)
                                        .Model(model =>
                                        {
                                            model.Id(p => p.Id);
                                            model.Field(p => p.Id).Editable(false);
                                            model.Field(p => p.IdEmpleado).Editable(false);
                                            model.Field(p => p.HoraEntrada).Editable(false);
                                            model.Field(p => p.HoraSalida).Editable(false);
                                            model.Field(p => p.Empleado.NombreEmpleado).Editable(false);
                                            model.Field(p => p.Horas).Editable(true);
                                            model.Field(p => p.Minutos).Editable(true);
                                            model.Field(p => p.Estados).Editable(false);
                                        })
                                        .Events(events =>
                                        {
                                            events.Error("error_handler");
                                            events.RequestEnd("checkResult");
                                        })
                                        .Read(read => read.Action("GetHorasExtra", "HoraExtra").Data("GetData"))
                                        .Update(update => update.Action("Update", "HoraExtra", new { id = "{0}" }).Type(HttpVerbs.Post))
                                  ).Events(e => e.DataBound("dataBound").ExcelExport("fechaexcel").Cancel("RefrescarGridDetalle"))
)

<script>
    function error_handler(e) {
        $.toast({
            heading: 'Error',
            text: e.xhr.responseText,
            position: 'top-right',
            loaderBg: '#ff6849',
            icon: 'error',
            hideAfter: 30000,
            stack: 6
        });
        RefrescarGridDetalle();

    }
    function fechaexcel(e) {
       debugger;
        var fechaHoraExtra = $("#Fecha").data("kendoDatePicker").value();
        e.workbook.fileName = kendo.toString(fechaHoraExtra, "d") + "_HorasExtraReport.xlsx";
    }
    function checkResult(e) {
         if ((e.type == "update" && e.response.Errors == null)) {
                $.toast({
                    heading: 'Éxito',
                    text: '¡Datos actualizados correctamente!',
                    position: 'top-right',
                    loaderBg: '#00ff00',
                    icon: 'success',
                    hideAfter: 30000,
                    stack: 6
                });
            RefrescarGridDetalle();
        }
    }
    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#grdConfiguracion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltip(".k-grid-edit", "Editar Hora Extra");
    setRowButtonTooltip(".k-grid-Revisar", "Revisar");
    setRowButtonTooltip(".k-grid-Aprobar", "Aprobar");
    setRowButtonTooltip(".k-grid-Rechazar", "Rechazar");
</script>
