@model ERPMVC.DTO.SalesOrderDTO



<script>


    function GetSalesOrderId() {
        if ($("#SubProductId").val() > 0 || @Model.SalesOrderId>0) {
            var subproductname = '', unidaddemedida = '', taxname = '';
            if ($("#UnitOfMeasureId") != null) {
                if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                    unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
                }
            }
            if ($("#SubProductId") != null) {
                if ($("#SubProductId").data("kendoDropDownList") != null) {
                    subproductname = $("#SubProductId").data("kendoDropDownList").text();
                }
            }

            if ($("#TaxId") != null) {
                if ($("#TaxId").data("kendoDropDownList") != null) {
                    taxname = $("#TaxId").data("kendoDropDownList").text();
                }
            }


            var displayedData = $("#gridCotizacionesDetail").data().kendoGrid.dataSource.data();
            var id = -999999;
            debugger;
            if (@Model.SalesOrderId=== 0) {

                if (Number($("#SalesOrderLineId").val()) === 0) {
                    if (displayedData.length > 0) {
                        for (var i = 0; i < displayedData.length; i++) {
                            if (displayedData[i].SalesOrderLineId > id)
                                id = displayedData[i].SalesOrderLineId;

                        }

                        id = id + 1;
                    }
                    else if ($("#Quantity").val() > 0) {
                        id = 1;
                    }

                }
                else {
                    id = $("#SalesOrderLineId").val();
                }


            }
            else {

                id = $("#SalesOrderLineId").val();
            }
            


            return {
                SalesOrderLineId: id,
                SalesOrderId: @Model.SalesOrderId,
                UnitOfMeasureId: $("#UnitOfMeasureId").val(),
                UnitOfMeasureName: unidaddemedida,
                SubProductId: $("#SubProductId").val(),
                SubProductName: subproductname,
                Description: $("#DescriptionDetail").val(),
                Quantity: $("#Quantity").val(),
                Price: $("#Price").val(),
                Amount: $("#AmountLine").val(),
                DiscountPercentage: $("#DiscountPercentage").val(),
                DiscountAmount: $("#DiscountAmount").val(),
                SubTotal: $("#SubTotalLine").val(),
                TaxPercentage: $("#TaxPercentage").val(),
                TaxId: $("#TaxId").val(),
                TaxCode: taxname,
                TaxAmount: $("#TaxAmount").val(),
                Total: $("#TotalLine").val(),
            }
        }
        else {
            return;
        }
    }

    function RefreshCotizacionesDetail() {
        debugger;
        var grid = $("#gridCotizacionesDetail").getKendoGrid();
        grid.dataSource.read().then(() => {
            grid.refresh();
            CalcularTotalDocumento();
        });

    }


    function AddCotizacionDetalle() {
        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'  ) {

            llenarsubproduct();
            $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
            $("#SalesOrderLineId").val('0');
            $("#DescriptionDetail").val('');
            $('#TaxId').data("kendoDropDownList").value(0);
            $('#UnitOfMeasureId').data("kendoDropDownList").value(0);
            $('#Quantity').data("kendoNumericTextBox").value(0);
            $('#Price').data("kendoNumericTextBox").value(0);
            $('#Porcentaje').data("kendoNumericTextBox").value(0);
            $('#Valor').data("kendoNumericTextBox").value(0);
            $('#TaxPercentage').data("kendoNumericTextBox").value(0);
            $('#AmountLine').data("kendoNumericTextBox").value(0);
            $('#DiscountPercentage').data("kendoNumericTextBox").value(0);
            $('#DiscountAmount').data("kendoNumericTextBox").value(0);
            $('#SubTotalLine').data("kendoNumericTextBox").value(0);
            $('#TaxAmount').data("kendoNumericTextBox").value(0);
            $('#TotalLine').data("kendoNumericTextBox").value(0);
            
            $('#myModalSalesOrderLine').modal('show');
            lockunidaddemedida();
        } else {
            var notification = $("#notification").data("kendoNotification");
            $.toast({
                heading: 'Error',
                text: '<br/><br/> Debe seleccionar un servicio!',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
                //title: "Validación",
                //message: "Debe seleccionar un servicio!"
            }/*, "error"*/);

        }

        return true;
    }

    function llenarsubproduct() {
        var combobox = $('#SubProductId').getKendoDropDownList();

            var dataObject = { 'ProductId': $("#ProductId").val() };
              $.ajax({
                    url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                    method: 'GET',
                    datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    data: dataObject,
                  success: function (data) {
                        combobox.setDataSource(data);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {

                      //  $("#btngenerarfactura").show();
                        notification.show({
                            title: "Validación",
                            message: textStatus + ": " + XMLHttpRequest.responseText
                        }, "error");

                    }
                });
    }

    function EditCotizacionDetalle(e) {


        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var subproducto = 0;
        var dataObject = { 'SalesOrderLineId': dataItem.SalesOrderLineId };

        var codigoimpuesto = 0;

        if (dataItem.SalesOrderId > 0) {
            $.ajax({
                url: '@Url.Action("pvwSalesOrderDetailMant", "SalesOrderLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);
                    $("#UnitOfMeasureId").data("kendoDropDownList").value(data.UnitOfMeasureId);
                    debugger;
                    if ('@Model.Estado' != "Aprobado") {

                        $("#btnActualizarCotizacionLinea").removeAttr("disabled");
                    }
                    lockunidaddemedida();
                    var txt = $(data);
                    var found = $("#SubProductId", txt);
                    subproducto = $(found).val();


                    //var foundcodigoimpuesto = $("#TaxCode", txt);
                    //console.log(foundcodigoimpuesto);
                    //codigoimpuesto = $(foundcodigoimpuesto).val();
                    //console.log(codigoimpuesto);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });


           // console.log(subproducto);
            //$("#frmSalesOrderLine :input").prop("disabled", true);
            llenarsubproduct();
            var combobox = $('#SubProductId').getKendoDropDownList();
            combobox.value(subproducto);
            combobox.trigger('change');

            //var comboboxtaxcode = $('#TaxCode').getKendoDropDownList();
            //comboboxtaxcode.dataSource.read();
            //comboboxtaxcode.value(codigoimpuesto);
            //comboboxtaxcode.trigger('change');

        }
        else {
            $("#SalesOrderLineId").val(dataItem.SalesOrderLineId);
            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#DescriptionDetail").val(dataItem.Description);
            $("#Amount").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);
            $("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountAmount);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#SubProductId").data("kendoDropDownList").dataSource.read();
            $("#TaxId").data("kendoDropDownList").value(dataItem.TaxId);
            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
            $("#Porcentaje").data("kendoNumericTextBox").value(dataItem.Amount);

        }

        $('#myModalSalesOrderLine').modal('show');

    }


        function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "SalesOrderLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridCotizacionesDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);

            CalcularTotalDocumento();
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }

</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.SalesOrderLine>()
                                                  .Name("gridCotizacionesDetail")
                                                  .Columns(columns =>
                                                  {
                                                      if (Model.editar == 0 && Model.IdEstado != 8)
                                                      {

                                                      }
                                                      else { 
                                                      columns.Command(command =>
                                                      {
                                                          if (Model.editar == 1)
                                                          {
                                                              command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                              command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");

                                                          }

                                                          if (Model.Estado == "Pendiente")
                                                          {
                                                              command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                          }

                                                          // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                          //  command.Edit(); command.Destroy();
                                                      }).Title("Acciones").Width(150);
                                                  }

                                                      //columns.Bound(p => p.SalesOrderLineId).Title("Id Line").Width(150);
                                                      columns.Bound(p => p.SalesOrderId).Title("Cotización Id").Width(150);
                                                        //columns.Bound(p => p.SubProductId).Title("IdServicio").Width(150);
                                                        columns.Bound(p => p.SubProductName).Title("Subservicio").Width(150);
                                                        // columns.Bound(p => p.Description).Title("Descripcion").Width(150);
                                                        columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(150);
                                                        columns.Bound(p => p.UnitOfMeasureName).Format("{0:n2}").Title("Unidad de medida").Width(180);
                                                        //columns.Bound(p => p.UnitOfMeasureId).Format("{0:n2}").Title("Unidad de medida").Width(180);
                                                        columns.Bound(p => p.Price).Format("{0:n6}").Title("Precio").Width(150);
                                                        columns.Bound(p => p.Amount).Format("{0:n2}").Title("Valor cotizado").Width(150);
                                                        columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Descuentos").Width(150);
                                                        //columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(150);
                                                        columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Width(150);
                                                        columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(150);
                                                        // columns.Bound(p => p.tax).Title("Tipo Impuesto").Width(150);
                                                        columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Impuestos").Width(150);
                                                        columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(200);
                                                        columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(150);

                                                    })
                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                                     )
                                                     .ForNumber(n => n
                                                       .Clear()
                                                       .IsEqualTo("Es igual a")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsNull("Es nulo")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     )
                                                     .ForDate(d => d
                                                     .Clear()
                                                     .IsEqualTo("Es igual que")
                                                     .IsGreaterThan("Es mayor que")
                                                     .IsLessThan("Es menor que")
                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     .IsNotEqualTo("No es igual que")
                                                      )
                                                   ))
                                                  .ToolBar(tools =>
                                                  {
                                                        if (Model.editar == 1 || Model.Estado == "Pendiente" )
                                                        {
                                                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                        }

                                                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                                    })
                                                  .Events(e => e.DataBound("CalcularTotalDocumento"))
                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                    .Sortable()
                                                    .AutoBind(true)
                                                    //.Pageable()
                                                    .Filterable()
                                                    .Scrollable()
                                                    // .ClientDetailTemplateId("template")
                                                    .Pdf(pdf => pdf.FileName("CotizacionDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                      .Excel(excel => excel.FileName("CotizacionDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                    //.Events(e=>e.Save("onsave"))
                                                    .DataSource(dataSource =>

                                                   dataSource
                                                   //.Ajax()
                                                   .WebApi()

                                                    .ServerOperation(false)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.SalesOrderLineId);
                                                        model.Field(p => p.SalesOrderLineId).Editable(false);
                                                        model.Field(p => p.SalesOrderId).Editable(false);

                                                    })
                                                    .Events(events =>
                                                    {
                                                        events.Error("error_handler");
                                                        //events.upda("EditHandler");

                                                    })
                                            .Read(read => read.Action("GetSalesOrderLine", "SalesOrderLine").Data("GetSalesOrderId"))
                                              //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                              //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                              //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                              )
        )

    </div>
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizacionesDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizacionesDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");

</script>