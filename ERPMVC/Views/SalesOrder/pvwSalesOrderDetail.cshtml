@model ERPMVC.DTO.SalesOrderDTO

<script>
    function GetSalesOrderId(){
        return {
            SalesOrderId: @Model.SalesOrderId,
            ProductId: $("#ProductId").val(),
            Quantity: $("#Quantity").val(),
            Price: $("#Price").val(),
            Amount: $("#AmountLine").val(),
            DiscountPercentage: $("#DiscountPercentage").val(),
            DiscountAmount: $("#DiscountAmount").val(),
            SubTotal: $("#SubTotalLine").val(),
            TaxPercentage: $("#TaxPercentage").val(),
            TaxCode: $("#TaxCode").val(),
            TaxAmount:$("#TaxAmount").val(),
            Total: $("#TotalLine").val(),            
            
        }
    }

       function RefreshCotizacionesDetail() {
          var grid = $('#gridCotizacionesDetail').getKendoGrid();
          grid.dataSource.read();
    }

       function AddCotizacionDetalle() {
       $('#myModalSalesOrderLine').modal('show');
    }

</script>

  <div class="box">
     <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.SalesOrderLine>()
                  .Name("gridCotizacionesDetail")
                  .Columns(columns =>
                  {
                      columns.Bound(p => p.SalesOrderLineId).Title("Id Line").Width(150);
                      columns.Bound(p => p.SalesOrderId).Title("Order Id").Width(150);
                      columns.Bound(p => p.ProductId).Title("Producto").Width(150);
                      columns.Bound(p => p.Quantity).Title("Cantidad").Width(150);
                      columns.Bound(p => p.Price).Title("Precio").Width(150);
                    //  columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(150);
                     columns.Bound(p => p.SubTotal).Title("Sub Total").Width(150);
                      columns.Bound(p => p.DiscountAmount).Title("Descuentos").Width(150);
                      columns.Bound(p => p.TaxAmount).Title("Impuestos").Width(150);                     
                      columns.Bound(p => p.Total).Title("Total").Width(150);
                  })
                  .ToolBar(tools =>
                  {
                      //  tools.Create();
                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                      .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });

                      tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                      tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                  })
                   .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .AutoBind(true)
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    // .ClientDetailTemplateId("template")
                    .Pdf(pdf => pdf.FileName("CotizacionDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                      .Excel(excel => excel.FileName("CotizacionDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    //.Events(e=>e.Save("onsave"))
                    .DataSource(dataSource =>

                   dataSource
                   //.Ajax()
                   .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.SalesOrderLineId);
                        model.Field(p => p.SalesOrderLineId).Editable(false);
                        model.Field(p => p.SalesOrderId).Editable(false);

                    })
                    .Events(events => {
                        events.Error("error_handler");
                        //events.upda("EditHandler");

                    })
                    .Read(read => read.Action("GetSalesOrderLine", "SalesOrderLine").Data("GetSalesOrderId"))
                    .Create(create => create.Action("Insert", "SalesOrderLine"))
                    //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                    //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
              )
    )

</div>
</div>

