
<script>

    $(document).ready(function () {
        clearsession();
    });

    function clearsession() {
            var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddCotizacion() {
       // $('#myModalSalesOrder').find(':input').not(':submit').val('');
         //$('#myModalSalesOrder').modal('show');
        clearsession();


         var dataObject = {
            SalesOrderId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwSalesOrder","SalesOrder")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

                RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").show();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditCotizacion(e) {
        e.preventDefault();

        clearsession();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            SalesOrderId: dataItem.SalesOrderId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwSalesOrder","SalesOrder")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

              //  RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").hide();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function ImprimirCotizacion(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href =  '@Url.Action("SFCotizacion", "SalesOrder")/' + dataItem.SalesOrderId;
            
    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }

 

    //$("#gridCotizaciones").kendoTooltip({
    //    filter: ".k-grid-custom",
    //    content: function (e) {
    //        return "Click here";
    //    }
    //});
    //});

    function GenerarContrato(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            SalesOrderId: dataItem.SalesOrderId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("GenerarContrato","SalesOrder")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

              //  RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").hide();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

</script>

<h3 class="text-themecolor">Cotización</h3>

<div id="example">

    @(Html.Kendo().Grid<ERPMVC.Models.SalesOrder>()
                                  .Name("gridCotizaciones")
                                  .Columns(columns =>
                                  {
                                      columns.Command(command =>
                                      {
                                          command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacion");
                                          command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCotizacion");
                                          command.Custom("GenerarContrato").Text(" ").IconClass("fa fa-file-import").Click("GenerarContrato")
                                                 ;
                              //  command.Edit(); command.Destroy();
                          }).Width(250);

                                      columns.Bound(p => p.SalesOrderId).Title("Id").Width(150);
                                      columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Title("Fecha Cotizacion").Width(150);
                                      columns.Bound(p => p.CustomerName).Title("Cliente").Width(150);
                                      columns.Bound(p => p.CustomerRefNumber).Title("Codigo referencia").Width(150);
                                      columns.Bound(p => p.Discount).Title("Descuentos").Width(150);
                          //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                          columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                                      columns.Bound(p => p.Freight).Title("Flete").Width(150);
                                      columns.Bound(p => p.SubTotal).Title("Sub Total").Width(150);
                                      columns.Bound(p => p.Tax).Title("Total Impuesto").Width(150);
                                      columns.Bound(p => p.Total).Title("Total").Width(150);
                                  })
                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")
                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                                  .ToolBar(tools =>
                                  {
                          // tools.Create();
                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                     .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacion();" });

                                      tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                      tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                                  })
                                  
                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .AutoBind(true)
                                    .Pageable()
                                    .Filterable()
                                    .Scrollable()
                                    // .ClientDetailTemplateId("template")
                                    .Pdf(pdf => pdf.FileName("CotizacionReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                      .Excel(excel => excel.FileName("CotizacionReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    //.Events(e=>e.Save("onsave"))
                                    .DataSource(dataSource =>

                                   dataSource
                                   //.Ajax()
                                   .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.SalesOrderId);
                                        model.Field(p => p.SalesOrderId).Editable(true);
                                        model.Field(p => p.SalesOrderId).Editable(true);


                                    })
                                    .Events(events =>
                                    {
                                        events.Error("error_handler");
                            //events.upda("EditHandler");

                        })
                                    .Read(read => read.Action("GetSalesOrder", "SalesOrder"))
                                    .Create(create => create.Action("Insert", "SalesOrder"))
                                    .Update(update => update.Action("Update", "SalesOrder", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "SalesOrder", new { id = "{0}" }))
                              )
    )
    </div>

    <div id="salesorder">
        @await Html.PartialAsync("pvwSalesOrder", new ERPMVC.DTO.SalesOrderDTO { SalesOrderId = 0, OrderDate = DateTime.Now, DeliveryDate = DateTime.Now, ExpirationDate = DateTime.Now.AddDays(30) })
    </div>

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizaciones").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizaciones").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button"); 
    setRowButtonTooltip(".k-grid-GenerarContrato", "Generar un contrato!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
   
</script>



    <div id="ConditionView">
        @*  @await Html.PartialAsync("~/Views/Conditions/pvwConditions.cshtml", new ERPMVC.Models.Conditions { ConditionId = 0 });*@
    </div>

    <div id="CustomerConditionView">
    </div>
