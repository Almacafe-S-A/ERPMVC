@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Unidad de Medida";
    bool permisoAgregar, permisoEditar, permisoEliminar, permisoExportar;
    permisoAgregar = (bool)ViewData["permisoAgregar"];
    permisoEditar = (bool)ViewData["permisoEditar"];
    permisoEliminar = (bool)ViewData["permisoEliminar"];
}
<script>

    function customFunction(input) {

        if (input.attr('name') === "BranchId" && input.val() === "0") {
            return false;
        }

        if (input.attr('name') === "CurrencyId" && input.val() === "0") {
            return false;
        }

        if (input.attr('name') === "Quantity" && input.val() == 0) {
            return false;
        }

        if (input.attr('name') === "Largo" && input.val() == 0) {
            return false;
        }

        if (input.attr('name') === "UsedArea" && input.val() == 0) {
            return false;
        }

        if (input.attr('name') === "Ancho" && input.val() == 0) {
            return false;
        }

        if (input.attr('name') === "Alto" && input.val() == 0) {
            return false;
        }



        return true;
    }

    //-- Agregar --
    function AgregarUoM() {

         var dataObject = {
             UnitOfMeasureId: 0
        };

        $.ajax({
            url: '@Url.Action("Unidad", "UnitOfMeasure")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#unitofmeasure").html('');
                $("#unitofmeasure").html(result);
                $("#btnGuardarUoM").show();
                //$("#titulo").text("Agregar Nueva Unidad");
                //Mostrar modal con la información
                $('#UoModal').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    //-- Editar --
    function EditUoM(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            UnitOfMeasureId: dataItem.UnitOfMeasureId
        };

        $.ajax({
            url: '@Url.Action("Unidad", "UnitOfMeasure")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            //data: { Id: dataItem.UnitOfMeasureId },
            success: function (result) {
                $("#unitofmeasure").html('');
                $("#unitofmeasure").html(result);
                $("#btnGuardarUoM").hide();
                //$("#titulo").text("Editar Unidad");
                //Mostrar modal con la información
                $('#UoModal').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }


      function Delete(e) {
        e.preventDefault();
          if (confirm('¿Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
                url: '@Url.Action("Delete", "UnitOfMeasure")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //notification.show({
                    //    title: "Validación",
                    //    message: textStatus + ": " + XMLHttpRequest.responseText
                    //}, "error");
                    $.toast({
                        heading: 'Validación',
                        text: '<br/><br/>' + errorThrown,
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'error',
                        hideAfter: 30000,
                        stack: 6
                    });
                }
            });
           var grid = $("#gridUoM").data("kendoGrid");
            grid.dataSource.remove(dataItem);
        }
    }

    function RefrescarGrid() {
        var grid = $("#gridUnitOfMeasure").getKendoGrid();
        grid.dataSource.read();

    }
</script>

<h3 class="text-themecolor">Unidad de Medida</h3>
@(Html.Kendo().Grid<ERPMVC.Models.UnitOfMeasure>()
                              .Name("gridUoM")
                              .Columns(columns =>
                              {
                                  if (permisoEditar == true || permisoEliminar == true)
                                  {
                                      columns.Command(command =>
                                      {
                              //command.Custom("Ver detalles").Click("Detalles");
                              if (permisoEditar)
                                          {
                                              command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditUoM");
                                          }
                                          if (permisoEliminar)
                                          {
                                              command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                          }
                                      }).Title("Acciones").Width(150);
                                  }
                                  columns.Bound(p => p.UnitOfMeasureId).Title("Id unidad de medida").Width(200);
                                  columns.Bound(p => p.UnitOfMeasureName).Title("Nombre unidad de medida").Width(250);
                                  columns.Bound(p => p.Description).Title("Descripción unidad de medida").Width(300);
                                  columns.Bound(p => p.Estado).Width(160);
                      //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(150);
                      //columns.Bound(p => p.ConcurrencyStamp).Width(150);
                  })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                                   .Clear()
                                                   .Contains("Contiene")
                                                   .DoesNotContain("No contiene")
                                                   .EndsWith("Termina con")
                                                   .IsEqualTo("Es igual a")
                                                   .IsNotEqualTo("No es igual a")
                                                   .IsNull("Es nulo")
                                                   .StartsWith("Inicia con")
                                             )
                                             .ForNumber(n => n
                                               .Clear()
                                               .IsEqualTo("Es igual a")
                                               .IsGreaterThan("Es mayor que")
                                               .IsLessThan("Es menor que")
                                               .IsNull("Es nulo")
                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             )
                                             .ForDate(d => d
                                             .Clear()
                                             .IsEqualTo("Es igual que")
                                             .IsGreaterThan("Es mayor que")
                                             .IsLessThan("Es menor que")
                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             .IsNotEqualTo("No es igual que")
                                              )
                                           ))
                              .ToolBar(tools =>
                              {
                                  if (permisoAgregar)
                                  {
                                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus").HtmlAttributes(new { @onclick = "AgregarUoM();" });
                                  }
                                      tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                      tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                              })
                               .Editable(e => e.Mode(GridEditMode.PopUp))
                               .Sortable()
                               .Pageable()
                               .Filterable()
                               .Scrollable()
                               .Pdf(pdf => pdf.FileName("UnidaddeMedidaReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                               .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                 .Excel(excel => excel.FileName("UnidaddeMedidaReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                               .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                               .DataSource(dataSource =>
                                  dataSource
                                    .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.UnitOfMeasureId);
                                        model.Field(p => p.UnitOfMeasureId).Editable(false);

                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Read(read => read.Action("GetUnitOfMeasure", "UnitOfMeasure"))
                                    .Create(create => create.Action("Insert", "UnitOfMeasure"))
                                    .Update(update => update.Action("Update", "UnitOfMeasure", new { id = "{0}" }))
                              //.Destroy(destroy => destroy.Action("Delete", "UnitOfMeasure", new { id = "{0}" }))
                              )
)

<div id="unitofmeasure">
    @await Html.PartialAsync("Unidad", new ERPMVC.Models.UnitOfMeasure())
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridUoM").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridUoM").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>