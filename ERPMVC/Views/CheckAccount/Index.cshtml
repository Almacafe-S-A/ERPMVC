@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "CHEQUERA";
}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        //data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        //data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }


    function AddCheckAccount() {
        $('#ModalCheckAccount').find(':input').not(':submit').val('');
        $('#ModalCheckAccount').modal('show');
        $("#CheckAccountId").val('0');
    }


    function EditCheckAccount(e) {
        e.preventDefault();
    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    var dataObject = {
        CheckAccountId: dataItem.CheckAccountId,
        editar : 0
    };

    $.ajax({
        url: '@Url.Action("pvwAddCheckAccount", "CheckAccount")',
        method: 'POST',
        datatype: "json",
        contentType: 'application/json',
        async: false,
        data: JSON.stringify(dataObject),
        success: function (result) {
            $("#numCheckAccount").html('');
            $("#numCheckAccount").html(result);
            $('#ModalCheckAccount').modal('show');
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {
            alert(textStatus + ": " + XMLHttpRequest.responseText);
        }
    });
    }

    function RefrescarGrid() {
        var grid = $("#gridCheakAccount").getKendoGrid();
            grid.dataSource.read();
    }
</script>

<h3 class="text-themecolor">Chequera</h3>

@(Html.Kendo().Grid<ERPMVC.Models.CheckAccount>
                      ()

                        .Name("gridCheakAccount")

                        .Columns(columns =>
                        {

                            columns.Command(command =>
                            {
                                //command.Custom("Ver detalles").Click("Detalles");
                                command.Custom("Editar").Click("EditCheckAccount");
                                command.Destroy().Text("Eliminar");
                            }).Width(160);
                            columns.Bound(p => p.CheckAccountNo).Width(100);
                            columns.Bound(p => p.BankName).Width(200);
                            columns.Bound(p => p.AssociatedAccountNumber).Width(170);
                            columns.Bound(p => p.NoInicial).Width(150);
                            columns.Bound(p => p.NoFinal).Width(150);
                            columns.Bound(p => p.FechaIngreso).Width(170);
                            //columns.Bound(p => p.UsuarioCreacion).Width(170);
                            //columns.Bound(p => p.UsuarioModificacion).Width(190);
                        })
                            .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                       .DoesNotContain("No contiene")
                                                       .EndsWith("Termina con")
                                                       .IsEqualTo("Es igual a")
                                                       .IsNotEqualTo("No es igual a")
                                                       .IsNull("Es nulo")
                                                       .StartsWith("Inicia con")
                                                 )
                                                 .ForNumber(n => n
                                                   .Clear()
                                                   .IsEqualTo("Es igual a")
                                                   .IsGreaterThan("Es mayor que")
                                                   .IsLessThan("Es menor que")
                                                   .IsNull("Es nulo")
                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 )
                                                 .ForDate(d => d
                                                 .Clear()
                                                 .IsEqualTo("Es igual que")
                                                 .IsGreaterThan("Es mayor que")
                                                 .IsLessThan("Es menor que")
                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 .IsNotEqualTo("No es igual que")
                                                  )
                                               ))

                        .ToolBar(tools =>
                        {
                            //tools.Create();
                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                              .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCheckAccount()" });
                            //tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                            //tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                        })
                        .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                        .Sortable()
                        .Pageable()
                        .Filterable()
                        .Scrollable()
                        .Pdf(pdf => pdf.FileName("DepartamentoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("DepartamentoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                        .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.CheckAccountId);
                            model.Field(p => p.CheckAccountId).Editable(false);


                        })
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("GetCheckAccount", "CheckAccount"))
                        .Create(create => create.Action("Insert", "CheckAccount").Type(HttpVerbs.Post))
                        .Update(update => update.Action("Update", "CheckAccount").Type(HttpVerbs.Post))
                        .Destroy(destroy => destroy.Action("Delete", "CheckAccount").Type(HttpVerbs.Delete))

                        )
                        .Events(e =>
                        {
                            e.Save("onsave");

                        })
)

<div id="numCheckAccount">
    @await Html.PartialAsync("pvwAddCheckAccount", new ERPMVC.DTO.CheckAccountDTO { CheckAccountId = 0 })
</div>

