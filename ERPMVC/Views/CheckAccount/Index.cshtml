@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Chequeras";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}


<script>
      function clearsession() {
         var dataObject = ["journalentryline"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }


    function AddCheckAccount() {

        $('#ModalCheckAccount').find(':input').not(':submit').val('');
        //$('#ModalCheckAccount').modal('show');
        $("#CheckAccountId").val('0');
        var dataObject = {
            CheckAccountId: 0,
            editar: 0
        };
         $.ajax({
                url: '@Url.Action("pvwAddCheckAccount", "CheckAccount")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCheckAccount").html('');
                    $("#NumCheckAccount").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalCheckAccount').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });

    }

         function EditCheckAccount(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CheckAccountId: dataItem.CheckAccountId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddCheckAccount", "CheckAccount")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCheckAccount").html('');
                    $("#NumCheckAccount").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalCheckAccount').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }


     function Detalles(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
         //window.location.href = "@Url.Action("CheckAccountLines", "CheckAccount")?CheckAccountId=" + dataItem.CheckAccountId;
         window.location.href = '@Url.Action("CheckAccountLines", "CheckAccount")?CheckAccountId=' + dataItem.CheckAccountId;
    }



</script>


<h3 class="text-themecolor">Chequeras</h3>
@(Html.Kendo().Grid<ERPMVC.Models.CheckAccount>
                                ()
                                .Name("gridCheckAccount")
                                .Columns(columns =>
                                {
                                    if ( permisos.HasClaim("Bancos.Chequera.Editar", "true"))
                                    {
                                        columns.Command(command =>
                                        {
                                            
                                            if (permisos.HasClaim("Bancos.Chequera.Editar", "true"))
                                            {
                                                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCheckAccount");
                                                command.Custom("Vercheques").Click("Detalles").Text(" ").IconClass("far fa-list-alt");

                                            }

                                            //command.Destroy().IconClass("fa fa-trash").Text(" ");
                                        }).Title("Acciones").Width(150);
                                    }
                                    columns.Bound(p => p.CheckAccountId).Width(100);
                                    columns.Bound(p => p.CheckAccountNo).Width(200);
                                    columns.Bound(p => p.BankName).Width(150);
                                    columns.Bound(p => p.AccountManagementId).Visible(false);
                                    columns.Bound(p => p.AssociatedAccountNumber).Width(150);
                                    columns.Bound(p => p.NoInicial).Width(150);
                                    columns.Bound(p => p.NoFinal).Width(150);
                                    columns.Bound(p => p.NumeroActual).Width(150);
                                    columns.Bound(p => p.Estado).Width(150);
                                })
                                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                                           .Clear()
                                                           .Contains("Contiene")
                                                           .DoesNotContain("No contiene")
                                                           .EndsWith("Termina con")
                                                           .IsEqualTo("Es igual a")
                                                           .IsNotEqualTo("No es igual a")
                                                           .IsNull("Es nulo")
                                                           .StartsWith("Inicia con")


                                                     )
                                                     .ForNumber(n => n
                                                       .Clear()
                                                       .IsEqualTo("Es igual a")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsNull("Es nulo")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     )
                                                     .ForDate(d => d
                                                     .Clear()
                                                     .IsEqualTo("Es igual que")
                                                     .IsGreaterThan("Es mayor que")
                                                     .IsLessThan("Es menor que")
                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     .IsNotEqualTo("No es igual que")
                                                      )
                                                   ))
                                .ToolBar(tools =>
                                {
                                    // tools.Create();
                                    if (permisos.HasClaim("Bancos.Chequera.Agregar", "true"))
                                    {
                                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCheckAccount()" });
                                    }
                                    tools.Excel().Text("Exportar a Excel").HtmlAttributes(new { @class = "toolbar-field" });
                                    tools.Pdf().Text("Exportar a PDF").HtmlAttributes(new { @class = "toolbar-field" });



                                })
                                .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .Pageable(e => e.Refresh(true))
                                .Filterable()
                                .AutoBind(true)
                                .Scrollable()
                                //.ClientDetailTemplateId("GridCheckAccountLines")
                                .Pdf(pdf => pdf.FileName("CheckAccountReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                    .Excel(excel => excel.FileName("CheckAccountReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                .DataSource(dataSource =>
                                    dataSource
                                    .WebApi()

                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.CheckAccountId);
                                        model.Field(p => p.CheckAccountId).Editable(false);
                                        model.Field(p => p.FechaCreacion).Editable(true);
                                        model.Field(p => p.UsuarioCreacion).Editable(false);
                                        model.Field(p => p.UsuarioModificacion).Editable(false);

                                    }).Sort(s => s.Add(a => a.CheckAccountId).Descending())
                                    .Events(events => events.Error("error_handler"))
                                    .Read(read => read.Action("GetCheckAccount", "CheckAccount"))
                                    .Create(create => create.Action("Insert", "CheckAccount"))
                                    .Update(update => update.Action("Update", "CheckAccount").Type(HttpVerbs.Put))
                                    .Destroy(destroy => destroy.Action("Delete", "CheckAccount").Type(HttpVerbs.Post))

                                )
)



<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCheckAccount").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCheckAccount").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Anular", "Anular Cheque");
    setRowButtonTooltip(".k-grid-ImprimirCheque", "Imprimir Cheque");
    setRowButtonTooltip(".k-grid-ImprimirReporteCheque", "Imprimir reporte de voucher");
    setRowButtonTooltip(".k-grid-Editar", "Editar Chequera");
    setRowButtonTooltip(".k-grid-delete", "Eliminar");
    setRowButtonTooltip(".k-grid-EmitirCheque", "Emitir Cheque");
    setRowButtonTooltip(".k-grid-Vercheques", "Ver cheques");

</script>





<div id="NumCheckAccount">
    @await Html.PartialAsync("pvwAddCheckAccount", new ERPMVC.DTO.CheckAccountDTO { CheckAccountId = 0, FechaIngreso = DateTime.Now })
</div>

