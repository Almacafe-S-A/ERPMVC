@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "CheckAccount";
}


<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        //data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        //data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddCheckAccount() {

        $('#ModalCheckAccount').find(':input').not(':submit').val('');
        //$('#ModalCheckAccount').modal('show');
        $("#CheckAccountId").val('0');
        var dataObject = {
            CheckAccountId: 0,
            editar: 0
        };
         $.ajax({
                url: '@Url.Action("pvwAddCheckAccount", "CheckAccount")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCheckAccount").html('');
                    $("#NumCheckAccount").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalCheckAccount').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });

    }


         function EditCheckAccount(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CheckAccountId: dataItem.CheckAccountId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddCheckAccount", "CheckAccount")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCheckAccount").html('');
                    $("#NumCheckAccount").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalCheckAccount').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }



</script>

<h3 class="text-themecolor">Chequera</h3>
@(Html.Kendo().Grid<ERPMVC.Models.CheckAccount>
                            ()
                            .Name("gridCheckAccount")
                            .Columns(columns =>
                            {

                                columns.Command(command =>
                                {
                                    //command.Custom("Ver detalles").Click("Detalles");
                                    command.Custom("Editar").Click("EditCheckAccount");
                                    command.Destroy().Text("Eliminar");
                                }).Width(250);

                                columns.Bound(p => p.CheckAccountId).Width(100);
                                columns.Bound(p => p.CheckAccountNo).Width(200);
                                columns.Bound(p => p.BankName).Width(150);
                                columns.Bound(p => p.AssociatedAccountNumber).Width(150);
                                columns.Bound(p => p.NoInicial).Width(150);
                                columns.Bound(p => p.NoFinal).Width(150);






                            })
                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                       .DoesNotContain("No contiene")
                                                       .EndsWith("Termina con")
                                                       .IsEqualTo("Es igual a")
                                                       .IsNotEqualTo("No es igual a")
                                                       .IsNull("Es nulo")
                                                       .StartsWith("Inicia con")


                                                 )
                                                 .ForNumber(n => n
                                                   .Clear()
                                                   .IsEqualTo("Es igual a")
                                                   .IsGreaterThan("Es mayor que")
                                                   .IsLessThan("Es menor que")
                                                   .IsNull("Es nulo")
                                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 )
                                                 .ForDate(d => d
                                                 .Clear()
                                                 .IsEqualTo("Es igual que")
                                                 .IsGreaterThan("Es mayor que")
                                                 .IsLessThan("Es menor que")
                                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                 .IsNotEqualTo("No es igual que")
                                                  )
                                               ))
                            .ToolBar(tools =>
                            {
                                // tools.Create();
                                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                   .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCheckAccount()" });
                                tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



                            })
                            .Editable(e => e.Mode(GridEditMode.PopUp))
                            .Sortable()
                            .Pageable()
                            .Filterable()
                            .Scrollable()
                            .Pdf(pdf => pdf.FileName("CheckAccountReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                .Excel(excel => excel.FileName("CheckAccountReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                            .DataSource(dataSource =>
                                dataSource
                                .WebApi()

                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.CheckAccountId);
                                    model.Field(p => p.CheckAccountId).Editable(false);
                                    model.Field(p => p.FechaCreacion).Editable(true);
                                    model.Field(p => p.UsuarioCreacion).Editable(false);
                                    model.Field(p => p.UsuarioModificacion).Editable(false);

                                })
                                .Events(events => events.Error("error_handler"))
                                .Read(read => read.Action("GetCheckAccount", "CheckAccount"))
                                .Create(create => create.Action("Insert", "CheckAccount"))
                                .Update(update => update.Action("Update", "CheckAccount").Type(HttpVerbs.Put))
                                .Destroy(destroy => destroy.Action("Delete", "CheckAccount").Type(HttpVerbs.Post))

                            )
                            .Events(e =>
                            {
                                e.Save("onsave");

                            })
)

<div id="NumCheckAccount">
    @await Html.PartialAsync("pvwAddCheckAccount", new ERPMVC.DTO.CheckAccountDTO { CheckAccountId = 0, FechaIngreso = DateTime.Now })
</div>

