@model ERPMVC.DTO.JournalEntryLineDTO


<script>


    function OnRequestEnd_TopLinePriceGrid(e) {
        console.log(e.type);

        if (e.type === "update" || e.type === "create" || e.type == "read") {
            $("#TotalCredito").data("kendoNumericTextBox").value(0);
            $("#TotalDebito").data("kendoNumericTextBox").value(0);
            $("#TotalDebit").val("0");
            $("#TotalCredit").val("0");
            for (var i = 0; i < e.response.Data.length; i++) {
                $("#TotalCredito").data("kendoNumericTextBox").value(parseFloat(Number($("#TotalCredito").val()) + Number(e.response.Data[i].Credit)).toFixed(2));
                $("#TotalDebito").data("kendoNumericTextBox").value(parseFloat(Number($("#TotalDebito").val()) + Number(e.response.Data[i].Debit)).toFixed(2));
                $("#TotalDebit").val(parseFloat(Number($("#TotalDebit").val()) + Number(e.response.Data[i].Debit)).toFixed(2));
                $("#TotalCredit").val(parseFloat(Number($("#TotalCredit").val()) + Number(e.response.Data[i].Credit)).toFixed(2));
            }
        }

    }

    $("#Credito").on("change", function () {
        var displayedData = $("#gridNumeracionJournalEntryLine").data().kendoGrid.dataSource.data();
        var cuenta = $("#Cuenta").val();
        var costo = $("#CostCenter").val();
        var beneficiario = $('#PartyNamedet').val();
        var Credito = $('#Credito').val();
        for (i = 0; i < displayedData.length; i++) {
            if (beneficiario != "") {
                if (Number(displayedData[i].Credit) > 0) {
                    if (Number(displayedData[i].Credit) == Number(Credito)) {
                        if (Number(displayedData[i].AccountId) == Number(cuenta)) {
                            if (Number(displayedData[i].CostCenterId) == Number(costo)) {
                                if (displayedData[i].PartyName == beneficiario) {
                                    if (Number(displayedData[i].Credit) > 0 || Number(displayedData[i].Debit) > 0) {
                                        alert("Ya se agrego un crédito para este centro de costos, está cuenta, este beneficiario y con el mismo Monto.");
                                        $("#Credito").val("");
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if (Number(displayedData[i].Credit) > 0) {
                    if (Number(displayedData[i].Credit) == Number(Credito)) {
                        if (Number(displayedData[i].AccountId) == Number(cuenta)) {
                            if (Number(displayedData[i].CostCenterId) == Number(costo)) {
                                if (Number(displayedData[i].Credit) > 0 || Number(displayedData[i].Debit) > 0) {
                                    alert("Ya se agrego un crédito para este centro de costos, está cuenta y con el mismo Monto.");
                                    $("#Credito").val("");
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        };
    });




    $("#Debito").on("change", function () {
        var displayedData = $("#gridNumeracionJournalEntryLine").data().kendoGrid.dataSource.data();
        var cuenta = $("#Cuenta").val();
        var costo = $("#CostCenter").val();
        var beneficiario = $('#PartyNamedet').val();
        var Debito = $('#Debito').val();
        for (i = 0; i < displayedData.length; i++) {
            if (beneficiario != "") {
                if (Number(displayedData[i].Debit) > 0) {
                    if (Number(displayedData[i].Debit) == Number(Debito)) {
                        if (Number(displayedData[i].AccountId) == Number(cuenta)) {
                            if (Number(displayedData[i].CostCenterId) == Number(costo)) {
                                if (displayedData[i].PartyName == beneficiario) {
                                    if (Number(displayedData[i].Credit) > 0 || Number(displayedData[i].Debit) > 0) {
                                        alert("Ya se agrego un débito para este centro de costos, está cuenta, este beneficiario y con el mismo Monto.");
                                        $("#Debito").data("kendoNumericTextBox").value(null);
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if (Number(displayedData[i].Debit) > 0) {
                    if (Number(displayedData[i].Debit) == Number(Debito)) {
                        if (Number(displayedData[i].AccountId) == Number(cuenta)) {
                            if (Number(displayedData[i].CostCenterId) == Number(costo)) {
                                if (Number(displayedData[i].Credit) > 0 || Number(displayedData[i].Debit) > 0) {
                                    alert("Ya se agrego un débito para este centro de costos, está cuenta y con el mismo Monto.");
                                    $("#Debito").data("kendoNumericTextBox").value(null);
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        };
    });

    function customFunction(input) {

        if (input.attr('name') === "JournalEntryLineid" && input.val() === "0") {
            return false;
        }


        return true;
    }

    function onsave(e) {
    }

    function onBound() {

    }


    function AddJournalEntryLine() {

        $("#JournalEntryId").val('0');
    }



</script>




<div class="row">
    <div class="col-lg-12">
        <div class="card-body">
            <div class="row">
                <div class="col-md-2">
                    <h3 class="card-title">Líneas de Diarios</h3>

                </div>
                @*<div class="col-md-8">
                    <button class="btn btn-primary">Agregar Linea del Cheque a Diario</button>
                </div>*@
                <hr>
            </div>
            <div class="row" id="div1">
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Cuentalbl">Cuenta</label>
                        <kendo-dropdownlist id="Cuenta" filter="Kendo.Mvc.UI.FilterType.Contains" 
                                            option-label="Seleccione la cuenta "
                                            datatextfield="AccountName"
                                            datavaluefield="AccountId"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" page-size="9999999">
                                <transport>
                                    <read url="@Url.Action("GetAccountingDiary", "Accounting")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                        <span id="Span" class="text-danger"></span>
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="form-group">
                        <label id="Descripcionlbl" class=" control-label" style="width:100%">Descripción</label>
                        <input id="Descripcion" type="text" class="k-textbox"    style="min-width:100%" required maxlength="100" />
                        <span id="Span2" class="text-danger"></span>
                    </div>
                </div>
                
            </div>
            <div class="row" id="div2">
                <div class="col-md-4">
                    <div class="form-group">
                        <label class="  control-label" style="width:100%">Tipo de Beneficiario</label>
                        <kendo-dropdownlist name="PartyTypeIddet"
                                            id="IdPartyTypedet"
                                            data-val-required="El Tipo Beneficiario es requerido."
                                            filter="Kendo.Mvc.UI.FilterType.Contains"
                                            style="width: 100%;">
                        </kendo-dropdownlist>
                        @*<span asp-validation-for="PartyTypeId" class="text-danger"></span>*@
                    </div>
                </div>
                <input type="text"  name="PartyNamedet" Id="PartyNamedet" hidden />
                <div class="col-md-4">
                    <div class="form-group" id="partydet">
                        <label class="  control-label" style="width:100%">Beneficiario</label>
                        <kendo-dropdownlist name="PartyIddet"
                                            id="IdPartydet"
                                            enable: false,
                                            option-label="Seleccionar beneficiario"
                                            filter="Kendo.Mvc.UI.FilterType.Contains"
                                            style="width: 100%;">
                        </kendo-dropdownlist>
                        @*<span asp-validation-for="PartyId" class="text-danger"></span>*@
                    </div>
                    <div class="form-group" id="employedet">
                        <label class="  control-label" style="width:100%">Beneficiario</label>
                        <kendo-dropdownlist name="PartyIddet"
                                            id="idemployedet"
                                            filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccionar Empleado"
                                            datatextfield="NombreEmpleado"
                                            datavaluefield="IdEmpleado"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" server-operation="true" page-size="9999999999">
                                <sorts>
                                    <sort field="NombreEmpleado" direction="asc" />
                                </sorts>
                                <transport>
                                    <read url="@Url.Action("Get", "Employees")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                    </div>
                    <div class="form-group" id="vendordet">
                        <label class="  control-label" style="width:100%">Beneficiario</label>
                        <kendo-dropdownlist name="PartyIddet"
                                            id="IdVendordet"
                                            filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccionar Proveedor"
                                            datatextfield="VendorName"
                                            datavaluefield="VendorId"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" server-operation="true" page-size="9999999999">
                                <sorts>
                                    <sort field="VendorName" direction="asc" />
                                </sorts>
                                <transport>
                                    <read url="@Url.Action("GetVendor", "Vendor")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                    </div>
                    <div class="form-group" id="customerdet">
                        <label class="  control-label" style="width:100%">Beneficiario</label>
                        <kendo-dropdownlist name="VoucheTypedet"
                                            id="IdCustomerdet"
                                            filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccionar Cliente"
                                            datatextfield="CustomerName"
                                            datavaluefield="CustomerId"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" server-operation="true" page-size="9999999999">
                                <sorts>
                                    <sort field="CustomerName" direction="asc" />
                                </sorts>
                                <transport>
                                    <read url="@Url.Action("Get", "Customer")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="CostCenterLbl">Centro de Costos</label>
                        <kendo-dropdownlist name="CostCenter" filter="Kendo.Mvc.UI.FilterType.Contains"
                                            option-label="Seleccione centro de costos"
                                            datatextfield="CostCenterName"
                                            datavaluefield="CostCenterId"
                                            style="width: 100%;">
                            <datasource type="DataSourceTagHelperType.WebApi" page-size="9999999">
                                <transport>
                                    <read url="@Url.Action("Get", "CostCenter")" />
                                </transport>
                            </datasource>
                        </kendo-dropdownlist>
                        <span id="Span3" class="text-danger"></span>
                    </div>
                </div>
            </div>



            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Debitolbl" class=" control-label" style="width:100%">Débito</label>
                        <kendo-numerictextbox id="Debito"
                                              spinners="false"
                                              style="min-width:93%"
                                              min="0"
                                              max="99999999999999"
                                              onKeyPress="return format(event)" />
                        @*<input id="Debito" type="number" class="form-control" style="min-width:93%" min="0" maxlength="30" onKeyPress="return format(event)" />*@
                        @*<script>
                                $(document).ready(function () {
                                    $("#Debito").kendoNumericTextBox();
                                });
                            </script>*@
                        <span id="Span5" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label id="Creditolbl" class=" control-label" style="width:100%">Crédito</label>
                        <kendo-numerictextbox id="Credito"
                                              spinners="false"
                                              style="min-width:93%"
                                              min="0"
                                              max="99999999999999"
                                              onKeyPress="return format(event)" />
                        @*<input id="Credito" type="number" class="form-control" style="min-width:93%" min="0" maxlength="30" onKeyPress="return format(event)" />*@
                        @*<script>
                                $(document).ready(function () {
                                    $("#Credito").kendoNumericTextBox();
                                });
                            </script>*@
                        <span id="Span4" class="text-danger"></span>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        <label id="JournalEntryLinelbl" class=" control-label" style="width:100%" hidden>Id Journal Entry Line</label>
                        <input id="JournalEntryLineId" type="text" class="form-control" style="min-width:100%" value="0" hidden />
                        <label class=" control-label" style="width:100%"></label>
                        <button type="button" id="btnAgregarLinea" class="form-control btn-miboton" onclick="RefrescarGridLinea();">Agregar Línea</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>


<script>

    var id = $("#EstadoId").val();
    if (id == 6) {
        $("#div1").hide();
        $("#div2").hide();
        $("#div3").hide();
    }

    function format(e) {
        tecla = (document.all) ? e.keyCode : e.which;
        tecla = String.fromCharCode(tecla)
        return /^[0-9.]*$/i.test(tecla);
    }
    $("#Debito").change(function () {
        var debito = $("#Debito").val();
        var credito = $("#Credito").val();
        this.value = parseFloat(this.value).toFixed(2);
        if (Number(credito) && Number(debito) > 0) {
            alert("No se puede ingresar débito y crédito al mismo tiempo.");
            $("#Credito").data("kendoNumericTextBox").value(null);
            $("#Debito").data("kendoNumericTextBox").value(null);
        }

    });
    $("#Credito").change(function () {
        var debito = $("#Debito").val();
        var credito = $("#Credito").val();
        this.value = parseFloat(this.value).toFixed(2);
        if (Number(credito) && Number(debito) > 0) {
            alert("No se puede ingresar débito y crédito al mismo tiempo.");
            $("#Credito").data("kendoNumericTextBox").value(null);
            $("#Debito").data("kendoNumericTextBox").value(null);
        }
    });


    function AgregarLinea() {
        debugger;
        if (Number($("#Cuenta").val()) > 0) {
            var displayedData = $("#gridNumeracionJournalEntryLine").data().kendoGrid.dataSource.data();
            var id = -999999;
            debugger;
            var prueba = $("#JournalEntryLineId").val();
            console.log(prueba)
            if ($("#JournalEntryLineId").val() == 0) {
                if (displayedData.length > 0) {
                    for (var i = 0; i < displayedData.length; i++) {
                        if (displayedData[i].JournalEntryLineId > id)
                            id = displayedData[i].JournalEntryLineId;
                    }
                    id = id + 1;
                }
                else if (Number($("#Cuenta").val()) > 0) {
                    id = 1;
                }
            }
            else {
                id = $("#JournalEntryLineId").val();
            }
            var setCostCenterName = "";
            if ($("#CostCenter").val() == 0) {
                setCostCenterName = "";
            }
            else {
                setCostCenterName = $("#CostCenter").data("kendoDropDownList").text()
            }
            var setPartyTypeName = "";
            if ($("#IdPartyTypedet").val() == 0) {
                setPartyTypeName = "";
            }
            else {
                setPartyTypeName = $("#IdPartyTypedet").data("kendoDropDownList").text()
            }
            return {
                'JournalEntryLineId': id,
                'JournalEntryId': @Model.JournalEntryId,
                'Debit': Number($("#Debito").val()),
                'Credit': Number($("#Credito").val()),
                'AccountId': Number($("#Cuenta").val()),
                'AccountName': $("#Cuenta").data("kendoDropDownList").text(),
                'PartyTypeId': Number($("#IdPartyTypedet").val()),
                'PartyTypeName': setPartyTypeName,
                'PartyId': Number($("#PartyIddet").val()),
                'PartyName': $("#PartyNamedet").val(),
                // 'Num': $("#Num").val(),
                'Description': $("#Descripcion").val(),
                'CostCenterId': Number($("#CostCenter").val()),
                'CostCenterName': setCostCenterName,
            }
        }
        else {
            return {
                'JournalEntryId': @Model.JournalEntryId,
            }
        }
    }

    function EliminarJournalEntry(e) {
        if (confirm('¿Esta seguro que desea eliminar este registro?')) {
            e.preventDefault();

            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            console.log(dataItem);
            var grid = $("#gridNumeracionJournalEntryLine").data("kendoGrid");
            var datasource = grid.dataSource;
            datasource.remove(dataItem);

            $.ajax({
                url: '@Url.Action("Delete", "JournalEntryLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });


            datasource.read();
            // var grid = $("#gridGoodsReceived").getKendoGrid();
            //grid.dataSource.read();
        }
    }

    function RefrescarGridLinea() {
        var debito = $("#Debito").val();
        var credito = $("#Credito").val();
        var des = $("#Descripcion").val();
        var cuenta = $("#Cuenta").val();
        var costo = $("#CostCenter").val();

        if (cuenta == "") {
            //$('#Cuenta').after('</br> <span id="Span" class="text-danger">Campos requeridos</span>');
            $('#Span').text("Campos requeridos");
            return false;
        }
        //else if (costo == "") {
        //    $('#CostCenter').after(' <span id="Span3" class="text-danger">Campos requeridos</span>');
        //    return false;
        //}
        else if (credito == 0 && debito==0) {
            alert("Debe de ingresar un débito o crédito.");
        }
        else {
            $('#Descripcion').text('');
            $('#Credito').text('');
            $('#Debito').text('');
            var grid = $("#gridNumeracionJournalEntryLine").getKendoGrid();
            grid.dataSource.read();
            grid.refresh();
            $("#JournalEntryLineId").val(0);
            $('#Debito').data("kendoNumericTextBox").value(null);
            $('#Credito').data("kendoNumericTextBox").value(null);
            $('#Descripcion').val('');
            $("#IdPartyTypedet").data('kendoDropDownList').value(0);
            $('#PartyNamedet').val(null);
            $("#customerdet").hide();
            $("#partydet").show();
            $("#vendordet").hide();
            $("#employedet").hide();
            $("#IdVendordet").data("kendoDropDownList").value(0);
            $("#idemployedet").data("kendoDropDownList").value(0);
            $("#IdCustomerdet").data("kendoDropDownList").value(0);
            $("#CostCenter").data('kendoDropDownList').value(0);
            $("#Cuenta").data('kendoDropDownList').value(0);
        }
    }

    //borrar mensajes en tiempo real
    $("#Cuenta").on("change", function () {
        $('#Span').text('');
    });


    $("#CostCenter").on("change", function (){
        $('#Span3').text('');
    });

</script>

@*<h3 class="text-themecolor">Lineas de Diarios</h3>*@
@(Html.Kendo().Grid<ERPMVC.Models.JournalEntryLine>
                                                                                                ()
                                                                                                .Name("gridNumeracionJournalEntryLine")
                                                                                                .Columns(columns =>
                                                                                                {

                                                                                                    columns.Command(command =>
                                                                                                    {
                                                                                                        //command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntryLine");
                                                                                                        //command.Edit().Text("").UpdateText("Update").IconClass("fa fa-edit").CancelText("Cancelar");

                                                                                                        command.Custom("Eliminar").IconClass("fa fa-trash-alt").Click("EliminarJournalEntry").Text(" ");


                                                                                                        //command.Destroy().Text(" ").IconClass("fa fa-trash");
                                                                                                        //  command.Destroy();
                                                                                                    }).Title("Acciones").Width(100);

                                                                                                    columns.Bound(p => p.JournalEntryLineId).Title("Id Line").Width(100).Hidden(true);
                                                                                                    columns.Bound(p => p.AccountId).Hidden().Width(200);
                                                                                                    columns.Bound(p => p.AccountName).Width(200);
                                                                                                    columns.Bound(p => p.Debit).Width(200).Format("{0:N2}");
                                                                                                    columns.Bound(p => p.Credit).Width(200).Format("{0:N2}");
                                                                                                    columns.Bound(p => p.Description).Title("Descripción").Width(200);
                                                                                                    columns.Bound(p => p.PartyTypeId).Hidden().Width(200);
                                                                                                    columns.Bound(p => p.PartyTypeName).Title("Tipo de Beneficiario").Width(250);
                                                                                                    columns.Bound(p => p.PartyId).Hidden().Width(200);
                                                                                                    columns.Bound(p => p.PartyName).Title("Nombre del Beneficiario").Width(270);
                                                                                                    columns.Bound(p => p.CostCenterId).Hidden().Width(200);
                                                                                                    columns.Bound(p => p.CostCenterName).Width(200);
                                                                                                }

                                                                                                //columns.Bound(p => p.JournalEntryLineId).Width(150);
                                                                                                //columns.Bound(p => p.JournalEntryId).Width(150).HtmlAttributes(new { JournalEntryId = "id" });
                                                                                                //columns.Bound(p => p.JournalEntryId).Width(150);
                                                                                                //columns.Bound(p => p.CreatedDate).Format("{0:dd/MM/yyyy}").Width(250);
                                                                                                //columns.Bound(p => p.Num).Title("Número").Width(200); ;
                                                                                                //  columns.Bound(p => p.DebitME).Width(200);
                                                                                                // columns.Bound(p => p.CreditME).Width(200);
                                                                                                // columns.Bound(p => p.DebitSy).Width(200);
                                                                                                //columns.Bound(p => p.CreditSy).Width(200);

                                                                                                )
                                                                                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                                                .Clear()
                                                                                                .Contains("Contiene")
                                                                                                .DoesNotContain("No contiene")
                                                                                                .EndsWith("Termina con")
                                                                                                .IsEqualTo("Es igual a")
                                                                                                .IsNotEqualTo("No es igual a")
                                                                                                .IsNull("Es nulo")
                                                                                                .StartsWith("Inicia con")


                                                                                                )
                                                                                                .ForNumber(n => n
                                                                                                .Clear()
                                                                                                .IsEqualTo("Es igual a")
                                                                                                .IsGreaterThan("Es mayor que")
                                                                                                .IsLessThan("Es menor que")
                                                                                                .IsNull("Es nulo")
                                                                                                .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                                )
                                                                                                .ForDate(d => d
                                                                                                .Clear()
                                                                                                .IsEqualTo("Es igual que")
                                                                                                .IsGreaterThan("Es mayor que")
                                                                                                .IsLessThan("Es menor que")
                                                                                                .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                                .IsNotEqualTo("No es igual que")
                                                                                                )
                                                                                                ))
                                                                                                .Editable(e => e.Mode(GridEditMode.InLine))
                                                                                                .Sortable()
                                                                                                //.Pageable(s => s
                                                                                                //.Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                                                                //.Empty("No hay datos."))
                                                                                                //)
                                                                                                .Filterable()
                                                                                                .Scrollable()
                                                                                                .Pdf(pdf => pdf.FileName("Asiento_Contable_Línea_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                                .Excel(excel => excel.FileName("Asiento_Contable_Línea_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                                .DataSource(dataSource => dataSource
                                                                                                .WebApi()
                                                                                                .Events(q => q.RequestEnd("OnRequestEnd_TopLinePriceGrid"))
                                                                                                .ServerOperation(true)
                                                                                                .Model(model =>
                                                                                                {
                                                                                                    model.Id(p => p.JournalEntryLineId);
                                                                                                    model.Field(p => p.JournalEntryLineId).Editable(false);
                                                                                                    model.Field(p => p.Description).Editable(true);
                                                                                                    model.Field(p => p.AccountId).Editable(false);
                                                                                                    model.Field(p => p.AccountName).Editable(false);
                                                                                                    model.Field(P => P.CostCenterId).Editable(false);
                                                                                                    model.Field(p => p.CostCenterName).Editable(false);
                                                                                                    model.Field(p => p.Credit).Editable(true);
                                                                                                    model.Field(p => p.Debit).Editable(true);
                                                                                                    //model.Field(p => p.DebitME).Editable(true);
                                                                                                    //model.Field(p => p.CreditME).Editable(true);
                                                                                                    //model.Field(p => p.DebitSy).Editable(true);
                                                                                                    //model.Field(p => p.CreditSy).Editable(true);
                                                                                                    /*     columns.Bound(p => p.Num).Title("Centro de Costo").Width(150);
                                                                                                    columns.Bound(p => p.AccountId).Title("Cuenta").Width(200);
                                                                                                    columns.Bound(p => p.DrCr).Title("Tipo ").Width(250);
                                                                                                    columns.Bound(p => p.Amount).Title("Monto ").Width(250);
                                                                                               */
                                                                                                })
                                                                                                //.Sort(s => s.Add(m => m.JournalEntryLineId).Descending())
                                                                                                .Events(events => events.Error("error_handler"))
                                                                                                .Read(read => read.Action("GetJournalEntryLine", "JournalEntryLine").Data("AgregarLinea"))
                                                                                                .Create(create => create.Action("Insert", "JournalEntryLine"))
                                                                                                 .Destroy(destroy => destroy.Action("Delete", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Post))
                                                                                                //.Update(update => update.Action("Update", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Put))
                                                                                                // .Destroy(destroy => destroy.Action("Delete", "JournalEntryLine", new { JournalEntryLineId = "{0}" }).Type(HttpVerbs.Delete))

                                                                                                )
                                                                                                .Events(e =>
                                                                                                {
                                                                                                    e.Save("onsave");
                                                                                                    e.DataBound("onBound");


                                                                                                })
)


@*<div id="NumJournalEntryLine">
        @await Html.PartialAsync("pvwAddJournalEntryLine", new ERPMVC.DTO.JournalEntryLineDTO { JournalEntryLineId = 0, JournalEntryId = 0 })
    </div>*@
<hr>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            @*<label id="Totallbl" class=" control-label" style="width:100%">Total:</label>*@
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%"></label>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%"></label>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%">Total Débito:</label>
            <input id="TotalDebito" type="number" class="form-control" style="min-width:80%" readonly />
            <script>
                $(document).ready(function () {
                    //$('#Cuenta').val();
                    $("#Cuenta").data('kendoDropDownList').value(@Model.AccountId);
                    
                    $("#TotalDebito").kendoNumericTextBox({
                        spinners: false
                    });
                    
                });
            </script>
            <span id="spanDebito" class="text-danger"></span>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-group">
            <label id="Totallbl" class=" control-label" style="width:100%">Total Crédito:</label>
            <input id="TotalCredito" type="number" class="form-control" style="min-width:80%" readonly />
            <script>
                $(document).ready(function () {
                    $("#TotalCredito").kendoNumericTextBox({
                        spinners: false
                    });
                });
            </script>
            <span id="spanCredito" class="text-danger"></span>
        </div>
    </div>

</div>
<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionJournalEntryLine").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionJournalEntryLine").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Eliminar", "Eliminar registro");

     $(document).ready(function () {  
        $("#customerdet").hide();
        $("#partyder").show();
        $("#vendordet").hide();
        $("#employedet").hide();
        $("#IdPartyTypedet").kendoDropDownList({
            dataTextField: "text",
            dataValueField: "value",
            optionLabel: {
                text: "Seleccione tipo de  beneficiario",
                value: 0
            },
            dataSource: [
                { text: "Cliente", value: 1 },
                { text: "Empleado", value: 2 },
                { text: "Proveedor", value: 3 },
                { text: "Otros", value: 4 },
            ],
            filter: "contains",
            suggest: true,
        });
        $("#IdPartydet").kendoDropDownList({
            optionLabel: "Seleccione beneficiario",
            enable: false
        });

        $('#IdPartyTypedet').on("change", function () {
            var party = $("#IdPartyTypedet").data("kendoDropDownList").text();
            var Id = $("#IdPartyTypedet").data("kendoDropDownList").value();
            debugger;
            if (Id == 1) {
                if ($("#customerdet").is(':hidden')) {
                    $("#IdCustomerdet").data("kendoDropDownList").value(0);
                }
                $("#customerdet").show();
                //$("#IdCustomer").attr("required", "required");
                $("#partydet").hide();
                $("#vendordet").hide();
                //$("#IdVendor").removeAttr("required");
                $("#employedet").hide();
                //$("#idemploye").removeAttr("required");
            }
            else if (Id == 2) {
                $("#customerdet").hide();
                //$("#IdCustomer").removeAttr("required");
                $("#partydet").hide();
                $("#vendordet").hide();
                //$("#IdVendor").removeAttr("required");
                if ($("#employedet").is(':hidden')) {
                    $("#idemployedet").data("kendoDropDownList").value(0);
                }
                $("#employedet").show();
                //$("#idemploye").attr("required", "required");
            }
            else if (Id == 3) {
                $("#customerdet").hide();
                //$("#IdCustomer").removeAttr("required");
                $("#partydet").hide();
                if ($("#vendordet").is(':hidden')) {
                    $("#IdVendordet").data("kendoDropDownList").value(0);
                }
                $("#vendordet").show();
                //$("#IdVendor").attr("required", "required");
                $("#employedet").hide();
                //$("#idemploye").removeAttr("required");
            }
            else if (Id == 4) {
                $("#customerdet").hide();
                //$("#IdCustomer").removeAttr("required");
                $("#partydet").show();
                if ($("#vendordet").is(':hidden')) {
                    $("#IdVendordet").data("kendoDropDownList").value(0);
                }
                $("#vendordet").hide();
                //$("#IdVendor").attr("required", "required");
                $("#employedet").hide();
                //$("#idemploye").removeAttr("required");
            }
            else {
                $("#customerdet").hide();
                //$("#IdCustomer").removeAttr("required");
                $("#partydet").show();
                $("#vendordet").hide();
                //$("#IdVendor").removeAttr("required");
                $("#employedet").hide();
                $("#PartyNamedet").val(null);
                //$("#idemploye").removeAttr("required");
            }
        });
    });

    $('#IdCustomerdet').on("change", function () {
        $('#PartyIddet').val($('#IdCustomerdet').val());
        $('#PartyNamedet').val($('#IdCustomerdet').data("kendoDropDownList").text());
    })
    $('#IdVendordet').on("change", function () {
        $('#PartyIddet').val($('#IdVendordet').val());
        $('#PartyNamedet').val($('#IdVendordet').data("kendoDropDownList").text());
    })
    $('#idemployedet').on("change", function () {
        $('#PartyIddet').val($('#idemployedet').val());
        $('#PartyNamedet').val($("#idemployedet").data("kendoDropDownList").text());
    })

</script>

