@using Kendo.Mvc.UI
@using System.Security.Claims
@{
    ViewData["Title"] = "Reglas de cobro";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>
    $(document).ready(function () {
        ClearSession();
    });


    function ClearSession() {
        var dataObject = ["listadoEmployeeSalary"];
         $.ajax({
            url: '@Url.Action("ClearSession", "Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }
        function Detalles(e) {
    }

    function Editar(e) {
        ClearSession();

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("pvwEditEmployees", "Employees")?IdEmpleado=" + dataItem.IdEmpleado;
    }

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddEmployees() {
        ClearSession();

        var dataObject = {
            ScheduleSubservicesId: 0,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddScheduleSubServices", "ScheduleSubservices")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
               // console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);


                //$("#btnCAI").hide();
                $('#ModalScheduleSubservice').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }


    function EditEmployeeExtraHours(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            ScheduleSubservicesId: dataItem.ScheduleSubservicesId,
            CustomerId: $("CustomerId").val(),
            CustomerName: $("#CustomerId").data("kendoDropDownList").value(),
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddScheduleSubServices", "ScheduleSubservices")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log('success', result)

                $("#numEmployees").html('');
                $("#numEmployees").html(result);

                var txt = $(result);
                var found = $("#SubServiceId", txt);
                subproducto = $(found).val();

                $("#SubServiceId").data("kendoDropDownList").value(subproducto);
                //$("#btnCAI").hide();
                $('#ModalScheduleSubservice').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function RefrescarGrid() {
        var grid = $("#gridEmployees").getKendoGrid();
        grid.dataSource.read();
    }

</script>

<h3 class="text-themecolor">Reglas de cobro/Asociar a clientes</h3>

@(Html.Kendo().Grid<ERPMVC.Models.ScheduleSubservices>
                          ()

                            .Name("gridEmployees")

                            .Columns(columns =>
                            {
                                if (permisos.HasClaim("Clientes.Reglas de Cobro.Editar", "true"))
                                {
                                    columns.Command(command =>
                                    {
                                        //command.Custom("Ver detalles").Click("Detalles");
                                        //command.Destroy();
                                        command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditEmployeeExtraHours");
                                        // command.Destroy().Text("Eliminar");

                                    }).Title("Acciones").Width(150);
                                }
                                columns.Bound(p => p.ScheduleSubservicesId).Width(150);
                                columns.Bound(p => p.ServiceName).Width(250);
                                columns.Bound(p => p.SubServiceName).Width(250);
                                // columns.Bound(p => p.Description).Width(250);
                                columns.Bound(p => p.StartTime).Format("{0:HH:mm:ss}").Width(180);
                                columns.Bound(p => p.EndTime).Format("{0:HH:mm:ss}").Width(180);
                                columns.Bound(p => p.QuantityHours).Width(250);
                                columns.Bound(p => p.FactorHora).Width(180);
                                columns.Bound(p => p.Transport).Width(210);
                                columns.Bound(p => p.Day).Width(110);
                                columns.Bound(p => p.Condition).Width(180);
                                columns.Bound(p => p.Estado).Width(120);

                            })
                            .ToolBar(tools =>
                            {

                                //tools.Create();
                                if (permisos.HasClaim("Clientes.Reglas de Cobro.Agregar", "true"))
                                {
                                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEmployees()" });
                                }
                                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                
                            })
                            .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                            .Sortable()
                            .Pageable()
                            .Filterable()
                            .Scrollable()
                            .Pdf(pdf => pdf.FileName("ReglasdeCobroReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                            .Excel(excel => excel.FileName("ReglasdeCobroReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                            .DataSource(dataSource =>
                            dataSource
                            .WebApi()

                            .ServerOperation(true)
                            .Model(model =>
                            {
                                model.Id(p => p.ScheduleSubservicesId);
                                model.Field(p => p.ScheduleSubservicesId).Editable(false);
                            })
                            .Events(events => events.Error("error_handler"))
                            .Read(read => read.Action("Get", "ScheduleSubservices"))
                            //.Create(create => create.Action("Insert", "Employees").Type(HttpVerbs.Post))
                            //.Update(update => update.Action("Update", "Employees").Type(HttpVerbs.Post))
                            .Destroy(destroy => destroy.Action("Delete", "ScheduleSubservices").Type(HttpVerbs.Post))
                            //.Destroy(destroy => destroy.Action("Delete", "Employees", new { IdEmpleado = "{0}" }).Type(HttpVerbs.Delete))
                            )
                            .Events(e =>
                            {
                                e.Save("onsave");

                            })
)

<div id="numEmployees">
    @await Html.PartialAsync("pvwAddScheduleSubServices", new ERPMVC.DTO.ScheduleSubservicesDTO { ScheduleSubservicesId = 0, StartTime = DateTime.Now, EndTime = DateTime.Now })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridEmployees").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridEmployees").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>