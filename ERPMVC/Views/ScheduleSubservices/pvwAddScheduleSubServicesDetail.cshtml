@model ERPMVC.DTO.PaymentScheduleRulesByCustomerDTO

<script>

    function onsaveEmployeesHoursDetail(e) {
       // console.log(e);
        try {
          //  e.model.EndTime = e.model.EndTime.toJSON();
           // e.model.StartTime = e.model.StartTime.toJSON();
        } catch (e) {

        }
       
        
    }

    function addRowD() {
        $('.k-grid-add').trigger('click');
        var notification = $("#notification").data("kendoNotification");
        //console.log('Horas extras detalle');
        if (Number($("#ScheduleSubservicesId").val()) > 0) {
            if ($("#CustomerIdSeleccion").val() > 0) {
                let grid = $("#gridPaymentScheduleRulesByCustomer").data("kendoGrid");
                var today = new Date();
                let fechaactual = String(today.getDate()).padStart(2, '0') + "/" + String(today.getMonth() + 1).padStart(2, '0') + "/" + today.getFullYear();
                grid.dataSource.insert({ PaymentScheduleRulesByCustomerId: 0, ScheduleSubservicesId: $("#ScheduleSubservicesId").val(), CustomerId: $("#CustomerIdSeleccion").val(), CustomerName: $("#CustomerIdSeleccion").data("kendoDropDownList").text(),  });
            }
            else {
                //notification.show({
                //    title: "Validación",
                //    message: "Seleccione el cliente!"
                //}, "error");
                $.toast({
                    heading: 'Validación',
                    text: '<br/><br/>Seleccione el cliente!',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 30000,
                    stack: 6
                });
            }
        }
        else {
            //notification.show({
            //    title: "Validación",
            //    message: "Debe guardar la regla antes de asignarla!"
            //}, "error");
            $.toast({
                heading: 'Validación',
                text: '<br/><br/>Debe guardar la regla antes de asignarla!',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
            });
        }
    }

    function dataScheduleSubservicesId() {
        return { ScheduleSubservicesId: $("#ScheduleSubservicesId").val() }
    }


     function Delete(e) {
        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            var grid = $("#gridPaymentScheduleRulesByCustomer").data("kendoGrid");
            var datasource = grid.dataSource;
            datasource.remove(dataItem);
            $.ajax({
                url: '@Url.Action("Delete", "PaymentScheduleRulesByCustomer")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {                   
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                }
            });
            grid.dataSource.remove(dataItem);
        }
    }
</script>

 <h3 class="text-themecolor">Detalle de clientes a los que se aplica la regla </h3>

    @(Html.Kendo().Grid<ERPMVC.Models.PaymentScheduleRulesByCustomer>()
       .Name("gridPaymentScheduleRulesByCustomer")
       .Columns(columns =>
       {
           columns.Command(command =>
           {

               //command.Custom("Editar").Click("Editar");
               command.Edit().Text(" ").IconClass("fa fa-edit").UpdateText("Actualizar").CancelText("Cancelar");
               command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");

               //command.Destroy().Text("Eliminar");

           }).Title("Acciones").Width(100);
           columns.Bound(p => p.PaymentScheduleRulesByCustomerId).Hidden(true).Width(100);
           columns.Bound(p => p.ScheduleSubservicesId).Width(125);
           columns.Bound(p => p.CustomerId).EditorTemplateName("Customer").Width(135);
           columns.Bound(p => p.CustomerName).Title("Nombre Cliente").Width(120);
           //columns.Bound(p => p.).Width(150);

       })
       .ToolBar(tools =>
       {
           //tools.Create().Text("Agregar");
           tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "addRowD()" });
           tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
           tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

       })
       .Editable(e => e.Mode(GridEditMode.InLine).DisplayDeleteConfirmation("¿Esta seguro que desea eliminar este registro?"))
       .Sortable()
       .Pageable()
       .Filterable()
       .Scrollable()
       .Pdf(pdf => pdf.FileName("CobrosdeSudserviciosReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
       .ProxyURL(Url.Action("Export", "Home")).AllPages())
       .Excel(excel => excel.FileName("CobrosdeSudserviciosReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
       .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
       .DataSource(dataSource =>
       dataSource
       .WebApi()

       .ServerOperation(true)
       .Model(model =>
       {
           model.Id(p => p.PaymentScheduleRulesByCustomerId);
           model.Field(p => p.PaymentScheduleRulesByCustomerId).Editable(false);
           model.Field(p => p.ScheduleSubservicesId).Editable(false);
           model.Field(p => p.CustomerName).Editable(false);
           model.Field(p => p.FechaCreacion).Editable(false);

       })
       .Events(events => events.Error("error_handler"))
       .Read(read => read.Action("GetByScheduleId", "PaymentScheduleRulesByCustomer").Data("dataScheduleSubservicesId"))
       .Create(create => create.Action("Insert", "PaymentScheduleRulesByCustomer").Type(HttpVerbs.Post))
       .Update(update => update.Action("Update", "PaymentScheduleRulesByCustomer").Type(HttpVerbs.Post))
       //.Destroy(destroy => destroy.Action("Delete", "PaymentScheduleRulesByCustomer").Type(HttpVerbs.Post))
       )
       .Events(e =>
       {
           e.Save("onsaveEmployeesHoursDetail");

       })
  )


@*<div id="numEmployeesDetail">
        @await Html.PartialAsync("pvwAddEmployeeExtraHours", new ERPMVC.DTO.EmployeeExtraHoursDTO { EmployeeExtraHoursId = 0, WorkDate = DateTime.Now })
    </div>*@


 <script>
     function setToolbarTooltip(btn_cl, btn_tooltip) {
         $("#gridPaymentScheduleRulesByCustomer").kendoTooltip({
             filter: btn_cl,
             content: btn_tooltip
         });
     }

     function setRowButtonTooltip(btn_cl, btn_tooltip) {
         $("#gridPaymentScheduleRulesByCustomer").kendoTooltip({
             filter: btn_cl,
             content: btn_tooltip
         });
     }

     setRowButtonTooltip(".k-grid-edit", "Editar registro");
     setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
 </script>