@model ERPMVC.DTO.PaymentScheduleRulesByCustomerDTO

<script>

    function onsaveEmployeesHoursDetail(e) {
        // console.log(e);
        try {
            //  e.model.EndTime = e.model.EndTime.toJSON();
            // e.model.StartTime = e.model.StartTime.toJSON();
        } catch (e) {

        }


    }

    function addRowD() {
        $('.k-grid-add').trigger('click');
        var notification = $("#notification").data("kendoNotification");
        //console.log('Horas extras detalle');
        if (Number($("#ScheduleSubservicesId").val()) > 0) {
            if ($("#CustomerIdSeleccion").val() > 0) {
                let grid = $("#gridPaymentScheduleRulesByCustomer").data("kendoGrid");
                var today = new Date();
                let fechaactual = String(today.getDate()).padStart(2, '0') + "/" + String(today.getMonth() + 1).padStart(2, '0') + "/" + today.getFullYear();
                grid.dataSource.insert({ PaymentScheduleRulesByCustomerId: 0, ScheduleSubservicesId: $("#ScheduleSubservicesId").val(), CustomerId: $("#CustomerIdSeleccion").val(), CustomerName: "Seleccione el cliente registro no guardado" });
            }
            else {
                notification.show({
                    title: "Validación",
                    message: "Seleccione el cliente!"
                }, "error");
            }
        }
        else {
            notification.show({
                title: "Validación",
                message: "Debe guardar la regla antes de asignarla!"
            }, "error");
        }


    }

    function dataScheduleSubservicesId() {
        return { ScheduleSubservicesId: $("#ScheduleSubservicesId").val() }
    }

</script>

<h3 class="text-themecolor">Detalle de clientes a los que se aplica la regla </h3>

@(Html.Kendo().Grid<ERPMVC.Models.PaymentScheduleRulesByCustomer>()
           .Name("gridPaymentScheduleRulesByCustomer")
           .Columns(columns =>
           {
               columns.Command(command =>
               {

       //command.Custom("Editar").Click("Editar");
       command.Edit().IconClass("fa fa-edit").Text(" ").UpdateText("Actualizar").CancelText("Cancelar"); ;
       //command.Destroy().Text("Eliminar");.IconClass("fa fa-edit").Text(" ")

   }).Title("Acciones").Width(80);
               columns.Bound(p => p.PaymentScheduleRulesByCustomerId).Width(90);
               columns.Bound(p => p.ScheduleSubservicesId).Width(100);
               columns.Bound(p => p.CustomerId).EditorTemplateName("Customer").Width(100);
               columns.Bound(p => p.CustomerName).Title("Nombre Cliente").Width(250);
   //columns.Bound(p => p.).Width(150);

})
           .ToolBar(tools =>
           {
   //tools.Create().Text("Agregar");
   tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                   .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "addRowD()" });
               tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
               tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

           })
           .Editable(e => e.Mode(GridEditMode.InLine).DisplayDeleteConfirmation("¿Esta seguro que desea eliminar este registro?"))
           .Sortable()
           .Pageable()
           .Filterable()
           .Scrollable()
           .Pdf(pdf => pdf.FileName("PaymentScheduleRulesByCustomerReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
           .ProxyURL(Url.Action("Export", "Home")).AllPages())
           .Excel(excel => excel.FileName("PaymentScheduleRulesByCustomerReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
           .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
           .DataSource(dataSource =>
           dataSource
           .WebApi()

           .ServerOperation(true)
           .Model(model =>
           {
               model.Id(p => p.PaymentScheduleRulesByCustomerId);
               model.Field(p => p.PaymentScheduleRulesByCustomerId).Editable(false);
               model.Field(p => p.ScheduleSubservicesId).Editable(false);
               model.Field(p => p.CustomerName).Editable(false);
               model.Field(p => p.FechaCreacion).Editable(false);

           })
           .Events(events => events.Error("error_handler"))
           .Read(read => read.Action("GetByScheduleId", "PaymentScheduleRulesByCustomer").Data("dataScheduleSubservicesId"))
           .Create(create => create.Action("Insert", "PaymentScheduleRulesByCustomer").Type(HttpVerbs.Post))
           .Update(update => update.Action("Update", "PaymentScheduleRulesByCustomer").Type(HttpVerbs.Post))
           //.Destroy(destroy => destroy.Action("Delete", "PaymentScheduleRulesByCustomer").Type(HttpVerbs.Post))
           )
           .Events(e =>
           {
               e.Save("onsaveEmployeesHoursDetail");

           })
)



<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridPaymentScheduleRulesByCustomer").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridPaymentScheduleRulesByCustomer").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setRowButtonTooltip(".k-grid-edit", "Editar registro");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar registro");
</script>

@*<div id="numEmployeesDetail">
        @await Html.PartialAsync("pvwAddEmployeeExtraHours", new ERPMVC.DTO.EmployeeExtraHoursDTO { EmployeeExtraHoursId = 0, WorkDate = DateTime.Now })
    </div>*@
