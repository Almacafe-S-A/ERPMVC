@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Información de la empresa";
    bool permisoAgregar, permisoEditar, permisoEliminar, permisoExportar;
    permisoAgregar = (bool)ViewData["permisoAgregar"];
    permisoEditar = (bool)ViewData["permisoEditar"];
    permisoEliminar = (bool)ViewData["permisoEliminar"];
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

      function AddCompanyInfo() {
         // $('#ModalCompanyInfo').find(':input').not(':submit').val('');
          //$('#ModalCompanyInfo').modal('show');
          //$("#CompanyInfoId").val('0');

          var dataObject = {
              CompanyInfoId: 0,
              editar: 1
          };
           $.ajax({
                url: '@Url.Action("pvwAddCompanyInfo", "CompanyInfo")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCompanyInfo").html('');
                    $("#NumCompanyInfo").html(result);
                    $('#ModalCompanyInfo').modal('show');
                },
               error: function (XMLHttpRequest, textStatus, errorThrown) {
                   alert(errorThrown);
                }
            });

      }


    function EditCompanyInfo(e) {
        debugger;
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CompanyInfoId: dataItem.CompanyInfoId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddCompanyInfo", "CompanyInfo")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCompanyInfo").html('');
                    $("#NumCompanyInfo").html(result);
                    //var archivo = dataItem.image;
            @*if (archivo != "" || archivo ){
            var res = archivo.split("/");
            console.log(res)
            var image = "/" + res[1] + "/"+res[2];
            var fileName = res[2];
            var fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);
            var files = [
                { name: fileName, extension: "." + fileExtension },
            ];
            $("#files").kendoUpload({
                async: {
                    saveUrl: "@Url.Action("SaveImage","CompanyInfo")",
                    removeUrl: "@Url.Action("", "")",
                    //autoUpload: true,
                },
                upload: SaveCompanyImages,
                multiple: false,
                localization: {
                    select: "Seleccionar Imagen",
                    cancel: "Cancelar",
                    dropFilesHere: "Soltar Archivo aquí",
                    invalidFileExtension: "Extensión de Archivo Invalido",
                    retry: "Reintentar",
                },
                files: files,
            });
             }*@
                    $('#ModalCompanyInfo').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(errorThrown);
                }
            });
         }



</script>

<h3 class="text-themecolor">Información de la Empresa</h3>
@(Html.Kendo().Grid<ERPMVC.Models.CompanyInfo>
                    ()
                    .Name("gridCompanyInfo")
                    .Columns(columns =>
                    {
                        if (permisoEditar == true || permisoEliminar == true)
                        {
                            columns.Command(command =>
                            {
                                //command.Custom("Ver detalles").Click("Detalles");
                                if (permisoEditar)
                                {
                                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCompanyInfo");
                                }
                                if (permisoEliminar)
                                {
                                    command.Destroy().IconClass("fa fa-trash-alt").Text(" ");
                                }
                            }).Title("Acciones").Width(200);
                        }
                        columns.Bound(p => p.CompanyInfoId).Title("Id Empresa").Width(150);
                        columns.Bound(p => p.Company_Name).Width(300);
                        columns.Bound(p => p.Address).Width(300);
                        columns.Bound(p => p.Phone).Width(200);
                        columns.Bound(p => p.Fax).Width(150);
                        columns.Bound(p => p.Email).Width(250);
                        columns.Bound(p => p.Tax_Id).Width(250);
                        columns.Bound(p => p.image).Width(200);
                        columns.Bound(p => p.CountryName).Title("País").Width(200);
                        columns.Bound(p => p.Address).Width(300);
                        columns.Bound(p => p.Manager).Title("Director General").Width(200);
                        columns.Bound(p => p.RTNMANAGER).Title("RTN Director General").Width(250);
                        columns.Bound(p => p.PostalCode).Width(200);
                        //columns.Bound(p => p.PrintHeader).Width(300);                       
                        //columns.Bound(p => p.RevOffice).Width(200);
                    })
                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                    .ToolBar(tools =>
                    {
                        // tools.Create();
                        if (permisoAgregar)
                        {
                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCompanyInfo()" });
                        }
                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("InformaciondelaEmpresaReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("InformaciondelaEmpresaReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.CompanyInfoId);
                            model.Field(p => p.CompanyInfoId).Editable(false);
                            model.Field(p => p.FechaCreacion).Editable(true);
                            model.Field(p => p.UsuarioCreacion).Editable(false);
                            model.Field(p => p.UsuarioModificacion).Editable(false);

                        })
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("Get", "CompanyInfo"))
                        .Create(create => create.Action("Insert", "CompanyInfo"))
                        //.Update(update => update.Action("Update", "CompanyInfo", new { CompanyInfoId = "{0}" }).Type(HttpVerbs.Put))
                        .Destroy(destroy => destroy.Action("Delete", "CompanyInfo").Type(HttpVerbs.Post))


                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)

<div id="NumCompanyInfo">
    @await Html.PartialAsync("pvwAddCompanyInfo", new ERPMVC.DTO.CompanyInfoDTO { CompanyInfoId = 0 })
</div>

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCompanyInfo").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCompanyInfo").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>