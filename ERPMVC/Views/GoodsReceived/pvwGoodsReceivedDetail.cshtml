@model ERPMVC.DTO.GoodsReceivedDTO



<script>


    function GetGoodsReceivedLineId() {

        return {
            'GoodsReceiveLinedId': $("#GoodsReceiveLinedId").val(),
            'GoodsReceivedId': $("#GoodsReceivedId").val(),
            'UnitOfMeasureId': $("#UnitOfMeasureId").val(),
            //'UnitOfMeasureName': $("#UnitOfMeasureId").data("kendoDropDownList").text(),
            'ProducId': $("#ProducId").val(),
            //'ProductName': $("#ProducId").data("kendoDropDownList").text(),
            'SubProducId': $("#SubProductIddetail").val(),
          //  'SubProductName': $("#SubProducId").data("kendoDropDownList").text(),
            'Description': $("#Description").val(),
            'ControlPalletsId': $("#ControlPalletsId").val(),
            'Quantity': $("#Quantity").val(),
            'QuantitySacos': $("#QuantitySacos").val(),
            'Price': $("#Price").val(),
            'Total': $("#Total").val(),
            'WareHouseId': $("#WareHouseId").val(),
            'CenterCostId': $("#CenterCostId").val(),
            //'FechaCreacion':$("#FechaCreacion").val(), 
            //'FechaModificacion':$("#FechaModificacion").val(), 
            //'UsuarioCreacion':$("#UsuarioCreacion").val(), 
            //'UsuarioModificacion':$("#UsuarioModificacion").val(),
        }
    }

    function RefreshGoodsReceivedDetail() {
        var grid = $("#gridGoodsReceivedDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function AddGoodsReceivedDetalle() {
        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'  ) {

           // llenarsubproduct();
            $("#frmControlPalletsLine :input").not('#ControlPalletsLineId').prop("disabled", false);
            $('#myModalControlPalletsLine').modal('show');
        } else {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Validacion",
                message: "Debe seleccionar un producto!"
            }, "error");

        }

    }

    @*function llenarsubproduct() {
           var combobox = $('#SubProductId').getKendoDropDownList();

            var dataObject = { 'ProductId': $("#ProductId").val() };
              $.ajax({
                    url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                    method: 'GET',
                    datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    data: dataObject,
                    success: function (data) {
                        combobox.setDataSource(data);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {

                      //  $("#btngenerarfactura").show();
                        notification.show({
                            title: "Validacion",
                            message: textStatus + ": " + XMLHttpRequest.responseText
                        }, "error");

                    }
                });
    }*@

    function EditGoodsReceivedDetalle(e) {
     
        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var subproducto = 0;
        var dataObject = { 'SalesOrderLineId': dataItem.SalesOrderLineId };
              $.ajax({
                    url: '@Url.Action("pvwGoodsReceivedMant", "GoodsReceivedLine")',
                    method: 'POST',
                    datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    data: JSON.stringify(dataObject),
                    success: function (data) {
                        $("#ControlPalletsLineMant").html('');
                        $("#ControlPalletsLineMant").html(data);
                        var txt = $(data);
                        var found = $("#SubProductId", txt);
                        subproducto = $(found).val();
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {

                      //  $("#btngenerarfactura").show();
                        notification.show({
                            title: "Validacion",
                            message: textStatus + ": " + XMLHttpRequest.responseText
                        }, "error");

                    }
              });


     
        $("#frmSalesOrderLine :input").prop("disabled", true);
      //  llenarsubproduct();
        var combobox = $('#SubProductId').getKendoDropDownList();
        combobox.value(subproducto);
        combobox.trigger('change');      
        $('#myModalSalesOrderLine').modal('show');
       
    }
</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.GoodsReceivedLine>()
                                          .Name("gridGoodsReceivedDetail")
                                          .Columns(columns =>
                                          {
                                              columns.Command(command =>
                                              {
                                                  command.Custom("Editar").Click("EditGoodsReceivedDetalle");
                                                  // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                  //  command.Edit(); command.Destroy();
                                              }).Width(150);

                                              columns.Bound(p => p.GoodsReceiveLinedId).Title("Id Linea").Width(120);
                                              columns.Bound(p => p.GoodsReceivedId).Title("Recibo de Mercaderia").Width(150);
                                              columns.Bound(p => p.Quantity).Title("Cantidad").Width(150);
                                              columns.Bound(p => p.UnitOfMeasureName).Title("Unidad de medida").Width(150);
                                              columns.Bound(p => p.UnitOfMeasureId).Hidden().Title("Unidad de medida").Width(0);
                                              columns.Bound(p => p.ProducId).Title("Producto").Hidden().Width(0);
                                              columns.Bound(p => p.ProductName).Title("Producto").Width(150);
                                              columns.Bound(p => p.QuantitySacos).Title("Sacos").Width(150);
                                              columns.Bound(p => p.WareHouseId).Title("Bodega").Width(150);
                                              columns.Bound(p => p.ControlPalletsId).Title("Estiba No.").Width(150);

                                          })
                                          .ToolBar(tools =>
                                          {
                                              if (Model.editar == 1)
                                              {
                                                  tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                  .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsReceivedDetalle();" });
                                              }

                                              tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                              tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                                          })
                                           .Editable(e => e.Mode(GridEditMode.PopUp))
                                            .Sortable()
                                            .AutoBind(true)
                                            .Pageable()
                                            .Filterable()
                                            .Scrollable()
                                            // .ClientDetailTemplateId("template")
                                            .Pdf(pdf => pdf.FileName("ReciboMercaderiaDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                              .Excel(excel => excel.FileName("ReciboMercaderiaDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                            //.Events(e=>e.Save("onsave"))
                                            .DataSource(dataSource =>

                                           dataSource
                                           //.Ajax()
                                           .WebApi()

                                            .ServerOperation(true)
                                            .Model(model =>
                                            {
                                                model.Id(p => p.GoodsReceiveLinedId);
                                                model.Field(p => p.GoodsReceiveLinedId).Editable(false);
                                                model.Field(p => p.GoodsReceivedId).Editable(false);
                                                model.Field(p => p.ControlPalletsId).Editable(true);

                                            })
                                            .Events(events =>
                                            {
                                                events.Error("error_handler");
                                                //events.upda("EditHandler");

                                            })
                                            .Read(read => read.Action("GetControlPalletsLineByControlPalletId", "GoodsReceivedLine").Data("GetGoodsReceivedLineId"))
                                            //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                            //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                            //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                      )
        )

    </div>
</div>


<script>

</script>