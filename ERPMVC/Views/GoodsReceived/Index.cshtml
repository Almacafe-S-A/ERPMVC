
<script>
    function AddGoodsReceived() {

         var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });


         var dataObject = {
             GoodsReceivedId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwGoodsReceived", "GoodsReceived")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#goodsReceived").html('');
                $("#goodsReceived").html(result);

                //RefreshCotizacionesDetail();
                 //$("#btnSaveCotizacion").show();
                $('#myModalGoodsReceived').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditGoodsReceived(e) {
         e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            GoodsReceivedId: dataItem.GoodsReceivedId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwGoodsReceived", "GoodsReceived")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#goodsReceived").html('');
                $("#goodsReceived").html(result);
                var customer = $("#CustomerId").val();
                $("#CustomerId").val(0);
                $("#CustomerId").data("kendoDropDownList").select(customer);
                $("#CustomerId").data("kendoDropDownList").value(customer);
            
                hcustom = customer;
                GetProductTypeIdS();
                $("#SubProductId").data("kendoDropDownList").dataSource.read();
               // var sapProject = $("#CustomerId").data("kendoDropDownList").bind("select", onChange(customer));

                $('#myModalGoodsReceived').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function onChange(CustomerId) {
        $("#CustomerId").val(CustomerId);
    }

    function ImprimirGoodsReceived(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFGoodsReceived", "GoodsReceived")/' + dataItem.ControlPalletsId;
    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Recibo de mercaderías</h3>

@(Html.Kendo().Grid<ERPMVC.Models.GoodsReceived>()
                              .Name("gridGoodsReceived")
                              .Columns(columns =>
                              {
                                  columns.Command(command =>
                                  {
                                      command.Custom("Editar").Click("EditGoodsReceived");
                                      command.Custom("Imprimir").Click("ImprimirGoodsReceived");
                                        //  command.Edit(); command.Destroy();
                                   }).Width(250);

                                  columns.Bound(p => p.GoodsReceivedId).Title("Id").Width(150);
                                  columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Title("Fecha Documento").Width(150);
                                  //columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Width(150);
                                  columns.Bound(p => p.Name).Width(150);
                                  columns.Bound(p => p.ProductId).Title("Producto").Width(150);
                                  columns.Bound(p => p.ProductName).Title("Descripcion").Width(150);
                      //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                      columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                                  columns.Bound(p => p.WarehouseName).Title("Bodega").Width(150);
                                  columns.Bound(p => p.ExitTicket).Title("Ticket de salida").Width(150);
                                  columns.Bound(p => p.Reference).Title("SubTotal").Width(150);

                              })
                              .ToolBar(tools =>
                              {
                      //tools.Create();
                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                  .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsReceived();" });

                                  tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                  tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                              })
                               .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .AutoBind(true)
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                // .ClientDetailTemplateId("template")
                                .Pdf(pdf => pdf.FileName("GoodsReceivedReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                  .Excel(excel => excel.FileName("GoodsReceivedReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                //.Events(e=>e.Save("onsave"))
                                .DataSource(dataSource =>

                               dataSource
                               //.Ajax()
                               .WebApi()
                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.GoodsReceivedId);
                                    model.Field(p => p.GoodsReceivedId).Editable(true);
                                    model.Field(p => p.CustomerId).Editable(true);


                                })
                                .Events(events =>
                                {
                                    events.Error("error_handler");
                        //events.upda("EditHandler");

                    })
                                .Read(read => read.Action("Get", "GoodsReceived"))
                                .Create(create => create.Action("Insert", "GoodsReceived"))
                                .Update(update => update.Action("Update", "GoodsReceived", new { id = "{0}" }))
                                .Destroy(destroy => destroy.Action("Delete", "GoodsReceived", new { id = "{0}" }))
                          )
)

<div id="goodsReceived">
    @await Html.PartialAsync("pvwGoodsReceived", new ERPMVC.DTO.GoodsReceivedDTO { GoodsReceivedId = 0, DocumentDate = DateTime.Now, OrderDate = DateTime.Now })
</div>




<div id="ConditionView">
</div>

<div id="CustomerConditionView">
</div>
