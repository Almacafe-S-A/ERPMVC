@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Horarios";
 }
<h3 class="text-themecolor">Horarios</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div class="row">
                <div id="grdConfiguracion"></div>
            </div>
        </div>
    </div>
</div>
<script>
    function AddHorario() {
        var dataObject = {
            Id: 0,
            editar: 1
        };

        $.ajax({
            url: '@Url.Action("pvwAddHorario", "Horario")',
            method: 'POST',
            datatype: "html", // Cambia a "html" para recibir la vista parcial
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                // Actualiza el contenido del elemento con el ID "numHorario" con la vista parcial
                $("#numHorario").html(result);
                $('#ModalHorario').modal('show');

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function EditHorario(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            Id: dataItem.Id,
            editar: 0
        };

         $.ajax({
            url: '@Url.Action("pvwAddHorario", "Horario")',
            method: 'POST',
            datatype: "html", // Cambia a "html" para recibir la vista parcial
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                // Actualiza el contenido del elemento con el ID "numHorario" con la vista parcial
                $("#numHorario").html(result);
                $('#ModalHorario').modal('show');

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function EliminarHorario(e) {
        debugger;
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (confirm("¿Estás seguro de que deseas eliminar este horario?")) {
            $.ajax({
                url: '@Url.Action("Delete", "Horario")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                data: JSON.stringify(dataItem),
                success: function (data) {
                    var grid = $("#grdConfiguracion").data("kendoGrid");
                    grid.dataSource.read();

                    // Agregar la notificación de éxito aquí
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'Horario eliminado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 3000, // Cambiado a 3000 para ocultar después de 3 segundos
                        stack: 6
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
        }
    }


    function configurarHoraInicioPicker(container, options) {
        // Configurar el TimePicker
        container.find(".k-timepicker").kendoTimePicker({
            format: "HH:mm",
            interval: 15, // Opcional: define el intervalo de tiempo deseado
        });
    }

    function VerificarHora(e){
            var registro = e.model;
            if (new Date(registro.HoraFinal) < new Date(registro.HoraInicio)) {
                alert('Hora final no puede ser menor a hora de inicio');
                e.preventDefault();
                return false;
        }
    }
    function onRequestEnd() {
        var grid = $("#grdConfiguracion").getKendoGrid();
        grid.dataSource.read();
    }
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#grdConfiguracion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#grdConfiguracion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-toolbar a.k-grid-add", "Agregar Usuario");
    setRowButtonTooltip(".k-grid-edit", "Editar Horario");
    setRowButtonTooltip(".k-grid-update", "Guardar");
    setRowButtonTooltip(".k-grid-cancel", "Cancelar");
</script>
@(Html.Kendo().Grid<ERPMVC.Models.Horario>()
                  .Name("grdConfiguracion").NoRecords()

                  .Columns(columns =>
                  {
                      {
                          columns.Command(command =>
                          {
                              command.Custom("Editar").Click("EditHorario").Text(" ").IconClass("fa fa-edit");
                              command.Custom("Eliminar").Click("EliminarHorario").Text(" ").IconClass("fa fa-trash");
                          }).Width(200).Title("Acciones");
                      }
                      columns.Bound(p => p.Id).Title("No.").Width(80);
                      columns.Bound(p => p.Nombre).Title("No.").Width(80);
                      columns.Bound(p => p.HoraInicio)
                          .Title("Hora Inicio")
                          .Width(130)
                          .Format("{0:HH:mm}");
                      columns.Bound(p => p.HoraFinal)
                          .Title("Fecha Final")
                          .Width(130)
                          .Format("{0:HH:mm}");
                      columns.Bound(p => p.Lunes).Title("Lunes").Width(130).ClientTemplate("<input type='checkbox' #= Lunes ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Martes).Title("Martes").Width(130).ClientTemplate("<input type='checkbox' #= Martes ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Miercoles).Title("Miercoles").Width(130).ClientTemplate("<input type='checkbox' #= Miercoles ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Jueves).Title("Jueves").Width(130).ClientTemplate("<input type='checkbox' #= Jueves ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Viernes).Title("Viernes").Width(130).ClientTemplate("<input type='checkbox' #= Viernes ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Sabado).Title("Sabado").Width(130).ClientTemplate("<input type='checkbox' #= Sabado ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Domingo).Title("Domingo").Width(130).ClientTemplate("<input type='checkbox' #= Domingo ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Almuerzo).Title("Almuerzo").Width(150).ClientTemplate("<input type='checkbox' #= Almuerzo ? 'checked' : '' # disabled='disabled' />");
                      columns.Bound(p => p.Estado).Title("Estado").Width(150);
                      columns.Bound(p => p.Factor).Title("Factor").Visible(false);
                  }).Filterable(f => f.Operators(o => o.ForString(s => s
                                         .Clear()
                                         .Contains("Contiene")
                                         .DoesNotContain("No contiene")
                                         .EndsWith("Termina con")
                                         .IsEqualTo("Es igual a")
                                         .IsNotEqualTo("No es igual a")
                                         .IsNull("Es nulo")
                                         .StartsWith("Inicia con")
                                   )
                                     .ForNumber(n => n
                                     .Clear()
                                     .IsEqualTo("Es igual a")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsNull("Es nulo")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                   )
                                   .ForDate(d => d
                                   .Clear()
                                   .IsEqualTo("Es igual que")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                   .IsNotEqualTo("No es igual que")
                                    )
                                 ))
                                 .ToolBar(tools =>
                              {
                                   tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                      .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddHorario();" });
                              })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .AutoBind(true)
                    .Pageable(p => p.Input(true))
                    .Resizable(s => s.Columns(true))
                    .Filterable()
                    .Scrollable()
                    .DataSource(dataSource =>
                   dataSource
                   //.Ajax()
                   .WebApi()
                    .ServerOperation(true)
                    .Model(model =>
                    {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);
                    })
                    .Events(events =>
                    {
                        events.Error("error_handler");
                    })
                    .Read(read => read.Action("GetHorarios", "Horario"))
                    .Update(update => update.Action("Guardar", "Horario"))
                    .Create(create => create.Action("Guardar", "Horario"))
              )
)
<div id="numHorario">
    @await Html.PartialAsync("pvwAddHorario", new ERPMVC.DTO.HorarioDTO { Id = 0 })
</div>
<style>
    #grdConfiguracion {
        width: 100%; /* establece un ancho específico en píxeles o porcentaje */
    }
</style>
