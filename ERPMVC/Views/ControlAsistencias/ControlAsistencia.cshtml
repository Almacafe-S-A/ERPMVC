

@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Control Aistencias";
}


<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function EditControlAsistencias(e) {
        console.log(1234567)
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            Id: dataItem.Id,
            editar: 0
        };


    }

    function RefrescarGrid() {

        var grid = $("#gridControlAsistencia").getKendoGrid();
        grid.dataSource.read();

    }


</script>

<h3 class="text-themecolor">Control Asistencias</h3>
<div class="">
    <h4 style="margin-top: 2em;">Seleccionar Mes:</h4>

    @(Html.Kendo().DatePicker()
                  .Name("monthpicker")
                  .Start(CalendarView.Year)
                  .Depth(CalendarView.Year)
                  .Format("MMMM yyyy")
                  .Value("November 2019")
                  .DateInput()
                  .HtmlAttributes(new { style = "width: 100%", title = "monthpicker" })
                  .Events(e => e.Change("monthpicker_change"))
                  
    )
</div>



<script>

    //var f = new Date();
    //document.write(f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear());


    function monthpicker_change() {
        var datepicker = $("#monthpicker").data("kendoDatePicker");
        var value = datepicker.value();
        var fecha = kendo.toString(value, "MMMM yyyy ");
        console.log(fecha)

        var str = fecha;      
        var date = str.split(" ");       

        var Mes = date[0];
        var Año = date[1];

        var MesNum = 0;
        
        if(Mes )

        //var res = str.split(" ", 1);
        //var res2 = str.split(" ", 2);
        console.log(date)
        console.log(Año)
        console.log(Mes)
        if (Mes == "enero") {
            MesNum = 1;
        }
        else if (Mes == "febrero") {
            MesNum = 2;
        }
        else if (Mes == "marzo") {
            MesNum = 3;
        }
        else if (Mes == "abril") {
            MesNum = 4;
        }
        else if (Mes == "mayo") {
            MesNum = 5;
        }
        else if (Mes == "junio") {
            MesNum = 6;
        }
        else if (Mes == "julio") {
            MesNum = 7;
        }
        else if (Mes == "agosto") {
            MesNum = 8;
        }
        else if (Mes == "septiembre") {
            MesNum = 9;
        }
        else if (Mes == "octubre") {
            MesNum = 10;
        }
        else if (Mes == "noviembre") {
            MesNum = 11;
        }
        else if (Mes == "diciembre") {
            MesNum = 12;
        };

        console.log(MesNum);



    }






</script>







<br />

@(Html.Kendo().Grid<ERPMVC.DTO.ControlAsistenciasDTO>
                            ()
                            .Name("gridControlAsistencia")
                            .Columns(columns =>
                            {

                                columns.Command(command =>
                                {

                        //command.Custom("Ver detalles").Click("Detalles");
                        command.Custom("Editar").Click("EditControlAsistencias");
                                    //command.Destroy().Text("Eliminar");
                                }).Width(250);
                                columns.Bound(p => p.Id).Width(100);
                                columns.Bound(p => p.Empleado.IdEmpleado).Width(150);
                                columns.Bound(p => p.Empleado.NombreEmpleado).Width(150);
                                columns.Bound(p => p.Dia1).Title("1").Width(100);
                                columns.Bound(p => p.Dia2).Title("2").Width(150);
                                columns.Bound(p => p.Dia3).Title("3").Width(150);
                                columns.Bound(p => p.Dia4).Title("4").Width(150);
                                columns.Bound(p => p.Dia5).Title("5").Width(150);
                                columns.Bound(p => p.Dia6).Title("6").Width(150);
                                columns.Bound(p => p.Dia7).Title("7").Width(150);
                                columns.Bound(p => p.Dia8).Title("8").Width(150);
                                columns.Bound(p => p.Dia9).Title("9").Width(150);
                                columns.Bound(p => p.Dia11).Title("10").Width(150);
                                columns.Bound(p => p.Dia12).Title("11").Width(150);
                                columns.Bound(p => p.Dia10).Title("12").Width(150);
                                columns.Bound(p => p.Dia13).Title("13").Width(150);
                                columns.Bound(p => p.Dia14).Title("14").Width(150);
                                columns.Bound(p => p.Dia15).Title("15").Width(150);
                                columns.Bound(p => p.Dia16).Title("16").Width(150);
                                columns.Bound(p => p.Dia17).Title("17").Width(150);
                                columns.Bound(p => p.Dia18).Title("18").Width(150);
                                columns.Bound(p => p.Dia19).Title("19").Width(150);
                                columns.Bound(p => p.Dia20).Title("20").Width(150);
                                columns.Bound(p => p.Dia21).Title("21").Width(150);
                                columns.Bound(p => p.Dia22).Title("22").Width(150);
                                columns.Bound(p => p.Dia23).Title("23").Width(150);
                                columns.Bound(p => p.Dia24).Title("24").Width(150);
                                columns.Bound(p => p.Dia25).Title("25").Width(150);
                                columns.Bound(p => p.Dia26).Title("26").Width(150);
                                columns.Bound(p => p.Dia27).Title("27").Width(150);
                                columns.Bound(p => p.Dia28).Title("28").Width(150);
                                columns.Bound(p => p.Dia29).Title("29").Width(150);
                                columns.Bound(p => p.Dia30).Title("30").Width(150);
                                columns.Bound(p => p.Dia31).Title("31").Width(150);
                                columns.Bound(p => p.LlegadasTarde).Width(150).Title("Llegadas Tarde");
                                columns.Bound(p => p.DiasLaborales).Width(150).Title("Dias Laborales");
                                columns.Bound(p => p.PorcentajeLlegadasTarde).Width(150).Title("%Llgadas Tarde");





                    //columns.Bound(p => p.UsuarioCreacion).Width(230);
                    //columns.Bound(p => p.UsuarioModificacion).Width(230);
                    //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(190);
                    //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(220);



                })
                                .Filterable(f => f.Operators(o => o.ForString(s => s
                                                               .Clear()
                                                               .Contains("Contiene")
                                                               .DoesNotContain("No contiene")
                                                               .EndsWith("Termina con")
                                                               .IsEqualTo("Es igual a")
                                                               .IsNotEqualTo("No es igual a")
                                                               .IsNull("Es nulo")
                                                               .StartsWith("Inicia con")


                                                         )
                                                         .ForNumber(n => n
                                                           .Clear()
                                                           .IsEqualTo("Es igual a")
                                                           .IsGreaterThan("Es mayor que")
                                                           .IsLessThan("Es menor que")
                                                           .IsNull("Es nulo")
                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         )
                                                         .ForDate(d => d
                                                         .Clear()
                                                         .IsEqualTo("Es igual que")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         .IsNotEqualTo("No es igual que")
                                                          )
                                                       ))
                            .ToolBar(tools =>
                            {
                    // tools.Create();
                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEstados()" });
                                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                            })
                            .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                            .Sortable()
                            .Pageable()
                            .Filterable()
                            .Scrollable()
                            .Pdf(pdf => pdf.FileName("EstadosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                .Excel(excel => excel.FileName("EstadosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                            .DataSource(dataSource =>
                                dataSource
                                .WebApi()

                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.Id);
                                    model.Field(p => p.Empleado.IdEmpleado);
                                    model.Field(p => p.Empleado.NombreEmpleado);
                                    model.Field(p => p.Dia1).Editable(true).DefaultValue(
                                                                    ViewData["defaultbranch"] as ERPMVC.Models.ElementoConfiguracion); 
                                    model.Field(p => p.Dia2).Editable(true); 
                                    model.Field(p => p.Dia3).Editable(true); 
                                    model.Field(p => p.Dia4).Editable(true); 
                                    model.Field(p => p.Dia5).Editable(true); 
                                    model.Field(p => p.Dia6).Editable(true); 
                                    model.Field(p => p.Dia7).Editable(true); 
                                    model.Field(p => p.Dia8).Editable(true); 
                                    model.Field(p => p.Dia9).Editable(true); 
                                    model.Field(p => p.Dia10).Editable(true); 
                                    model.Field(p => p.Dia11).Editable(true); 
                                    model.Field(p => p.Dia12).Editable(true); 
                                    model.Field(p => p.Dia13).Editable(true); 
                                    model.Field(p => p.Dia14).Editable(true); 
                                    model.Field(p => p.Dia15).Editable(true); 
                                    model.Field(p => p.Dia16).Editable(true); 
                                    model.Field(p => p.Dia17).Editable(true); 
                                    model.Field(p => p.Dia18).Editable(true); 
                                    model.Field(p => p.Dia19).Editable(true); 
                                    model.Field(p => p.Dia20).Editable(true); 
                                    model.Field(p => p.Dia21).Editable(true); 
                                    model.Field(p => p.Dia22).Editable(true); 
                                    model.Field(p => p.Dia23).Editable(true); 
                                    model.Field(p => p.Dia24).Editable(true); 
                                    model.Field(p => p.Dia25).Editable(true); 
                                    model.Field(p => p.Dia26).Editable(true); 
                                    model.Field(p => p.Dia27).Editable(true); 
                                    model.Field(p => p.Dia28).Editable(true); 
                                    model.Field(p => p.Dia29).Editable(true); 
                                    model.Field(p => p.Dia30).Editable(true); 
                                    model.Field(p => p.Dia31).Editable(true); 
                                    model.Field(p => p.LlegadasTarde);
                                    model.Field(p => p.DiasLaborales);
                                    model.Field(p => p.PorcentajeLlegadasTarde);

                        //{
                        //    var dias =  model.Field(p =>  p.Dia27) + model.Field(p => p.Dia28); ;
                        //}


                        model.Field(p => p.FechaCreacion).Editable(true);
                                    model.Field(p => p.UsuarioCreacion).Editable(false);
                                    model.Field(p => p.UsuarioModificacion).Editable(false);

                                })
                                .Events(events => events.Error("error_handler"))
                                .Read(read => read.Action("GetGetControlAsistencias", "ControlAsistencias"))
                              //   .Read(read => read.Action("GetGetControlAsistencias", "ControlAsistencias")) 
                            //.Read(read => read.Action("GetControlAsistencias", "ControlAsistencias"))
                            //.Create(create => create.Action("Insert", "Estados").Type(HttpVerbs.Post))
                            //.Update(update => update.Action("Update", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Put))
                            //.Destroy(destroy => destroy.Action("Delete", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Delete))

                            )
                            .Events(e =>
                            {
                                e.Save("onsave");

                            })
)

@*<div id="NumEstados">
        @await Html.PartialAsync("AddControlAsistencia", new ERPMVC.DTO.ControlAsistenciasDTO { Id = 0 })
    </div>*@



