

@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Control Aistencias";
}


<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddEstados() {

          $('#ModalEstado').find(':input').not(':submit').val('');
          $('#ModalEstado').modal('show');
          $("#IdEstado").val('0');
    }


         function EditEstado(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                IdEstado: dataItem.IdEstado,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("", "")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumEstados").html('');
                    $("#NumEstados ").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalEstado').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function RefrescarGrid() {

        var grid = $("#gridControlAsistencia").getKendoGrid();
        grid.dataSource.read();

    }




</script>

<h3 class="text-themecolor">Control Asistencias</h3>


<div class="">
    <h4 style="margin-top: 2em;">Seleccionar Mes:</h4>

    @(Html.Kendo().DatePicker()       
                          .Name("monthpicker")
                          .Start(CalendarView.Year)
                          .Depth(CalendarView.Year)
                          .Format("MMMM yyyy")
                          .Value("November 2019")
                          .DateInput()                          
                          .HtmlAttributes(new { style = "width: 100%", title = "monthpicker" })
                          .Events(e => e.Change("monthpicker_change"))
                          )
</div>



<script>

    //var f = new Date();
    //document.write(f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear());


    function monthpicker_change() {
        var datepicker = $("#monthpicker").data("kendoDatePicker");
        var value = datepicker.value();
        var rock =  kendo.toString(value, "MMMM yyyy ");
        console.log(rock)

        var str = rock;
        var res = str.split(" ", 1);

        var res2 = str.split(" ", 2);

        console.log(res)
        console.log(res2)

        


      
    }

        




</script>







<br />

@(Html.Kendo().Grid<ERPMVC.DTO.ControlAsistenciasDTO>
            ()
            .Name("gridControlAsistencia")
            .Columns(columns =>
            {

                columns.Command(command =>
                {

                    //command.Custom("Ver detalles").Click("Detalles");
                    command.Custom("Editar").Click("");
                    command.Destroy().Text("Eliminar");
                }).Width(250);
                columns.Bound(p => p.Id).Width(150);
                columns.Bound(p => p.Empleado.IdEmpleado).Width(150);
                columns.Bound(p => p.Empleado.NombreEmpleado).Width(150);
                columns.Bound(p => p.Dia1).Width(150);
                columns.Bound(p => p.Dia2).Width(150);
                columns.Bound(p => p.Dia3).Width(150);
                columns.Bound(p => p.Dia4).Width(150);
                columns.Bound(p => p.Dia5).Width(150);
                columns.Bound(p => p.Dia6).Width(150);
                columns.Bound(p => p.Dia7).Width(150);
                columns.Bound(p => p.Dia8).Width(150);
                columns.Bound(p => p.Dia9).Width(150);
                columns.Bound(p => p.Dia10).Width(150);
                columns.Bound(p => p.Dia11).Width(150);
                columns.Bound(p => p.Dia12).Width(150);
                columns.Bound(p => p.Dia13).Width(150);
                columns.Bound(p => p.Dia14).Width(150);
                columns.Bound(p => p.Dia15).Width(150);
                columns.Bound(p => p.Dia16).Width(150);
                columns.Bound(p => p.Dia17).Width(150);
                columns.Bound(p => p.Dia18).Width(150);
                columns.Bound(p => p.Dia19).Width(150);
                columns.Bound(p => p.Dia20).Width(150);
                columns.Bound(p => p.Dia21).Width(150);
                columns.Bound(p => p.Dia22).Width(150);
                columns.Bound(p => p.Dia23).Width(150);
                columns.Bound(p => p.Dia24).Width(150);
                columns.Bound(p => p.Dia25).Width(150);
                columns.Bound(p => p.Dia26).Width(150);
                columns.Bound(p => p.Dia27).Width(150);
                columns.Bound(p => p.Dia28).Width(150);
                columns.Bound(p => p.Dia29).Width(150);
                columns.Bound(p => p.Dia30).Width(150);
                columns.Bound(p => p.Dia31).Width(150);

                {
                    var diasfaltos = 0;
                }

               

                //columns.Bound(p => p.UsuarioCreacion).Width(230);
                //columns.Bound(p => p.UsuarioModificacion).Width(230);
                //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(190);
                //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(220);



            })
                .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
            .ToolBar(tools =>
            {
                // tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEstados()" });
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


            })
            .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("EstadosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("EstadosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
                dataSource
                .WebApi()

                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Empleado.IdEmpleado );
                    model.Field(p => p.Empleado.NombreEmpleado);
                    model.Field(p => p.Dia1);
                    model.Field(p => p.Dia2);
                    model.Field(p => p.Dia3);
                    model.Field(p => p.Dia4);
                    model.Field(p => p.Dia5);
                    model.Field(p => p.Dia6);
                    model.Field(p => p.Dia7);
                    model.Field(p => p.Dia8);
                    model.Field(p => p.Dia9);
                    model.Field(p => p.Dia10);
                    model.Field(p => p.Dia11);
                    model.Field(p => p.Dia12);
                    model.Field(p => p.Dia13);
                    model.Field(p => p.Dia14);
                    model.Field(p => p.Dia15);
                    model.Field(p => p.Dia16);
                    model.Field(p => p.Dia17);
                    model.Field(p => p.Dia18);
                    model.Field(p => p.Dia19);
                    model.Field(p => p.Dia20);
                    model.Field(p => p.Dia21);
                    model.Field(p => p.Dia22);
                    model.Field(p => p.Dia23);
                    model.Field(p => p.Dia24);
                    model.Field(p => p.Dia25);
                    model.Field(p => p.Dia26);
                    model.Field(p => p.Dia27);
                    model.Field(p => p.Dia28);
                    model.Field(p => p.Dia29);
                    model.Field(p => p.Dia30);
                    model.Field(p => p.Dia31);

                    //{
                    //    var dias =  model.Field(p =>  p.Dia27) + model.Field(p => p.Dia28); ;
                    //}


                    model.Field(p => p.FechaCreacion).Editable(true);
                    model.Field(p => p.UsuarioCreacion).Editable(false);
                    model.Field(p => p.UsuarioModificacion).Editable(false);

                })
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("GetListEmployees", "ControlAsistencias"))
            //.Read(read => read.Action("GetControlAsistencias", "ControlAsistencias"))
            //.Create(create => create.Action("Insert", "Estados").Type(HttpVerbs.Post))
            //.Update(update => update.Action("Update", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Put))
            //.Destroy(destroy => destroy.Action("Delete", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Delete))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)

@*<div id="NumEstados">
        @await Html.PartialAsync("AddControlAsistencia", new ERPMVC.DTO.ControlAsistenciasDTO { Id = 0 })
    </div>*@
