

@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Control Aistencias";

    var ElementoConfiguracion = ViewData["ElementoConfiguracion"] as IEnumerable<ERPMVC.Models.ElementoConfiguracion>;
}


<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function EditControlAsistencias(e) {
        console.log(1234567)
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            Id: dataItem.Id,
            editar: 0
        };


    }

    function RefrescarGrid() {

        var grid = $("#gridControlAsistencia").getKendoGrid();
        grid.dataSource.read();

    }


</script>

<h3 class="text-themecolor">Control Asistencias</h3>
<div class="">
    <h4 style="margin-top: 2em;">Seleccionar Mes:</h4>

    @(Html.Kendo().DatePicker()
                                  .Name("monthpicker")
                                  .Start(CalendarView.Year)
                                  .Depth(CalendarView.Year)
                                  .Format("MMMM yyyy")
                                  .Value("sELECCIONES DATA")
                                  .DateInput()
                                  .HtmlAttributes(new { style = "width: 100%", title = "monthpicker" })
                                  .Events(e => e.Change("monthpicker_change"))

    )
    @*<div class="row">
        <div class="col-md-12">
            <button id="btnAsistencias" class="form-control btn-miboton" onclick="ConsultarAsistencias(this);"> Conultar </button>
        </div>
    </div>*@

</div>

<script>
    function ConsultarAsistencias(e) {
        console.log("Entre")
               // var notification = $("#notification").data("kendoNotification");
        var displayedData1 = $("#monthpicker").getKendoDatePicker().value().toJSON()
        console.log(displayedData1)

        var stringVal = displayedData1.toString();

        console.log(stringVal + " String")

        var dates = displayedData1.split("-");

        //var fin = stringVal.substring(0, 9).toString();

        function additionalInfo() {
            return {
                name: "test",
                id: 2
            }
        }


        var p1 = dates[0];
        var p2 = dates[1];
        var p3 = dates[2];
        console.log("_____________________________________")
        var primero = (p1 + "-" + p2 + "-" + "01").toString();




        console.log(primero)
        console.log(fin)

				//var dataObject = {
                    
    //                '_Data': displayedData1
				//};

       // console(dataObject)

               // var validator = $("#frmEmployees").data("kendoValidator");
                //if (validator.validate()) {


                    $.ajax({
                        url: '@Url.Action("GetGetControlAsistencias", "ControlAsistencias")',
                        method: 'GET',
                        datatype: "json",
                        contentType: 'application/json',
                        async: false,
                        data: { 'primero': primero, 'actual': stringVal},
                        success: function (data) {
							$.toast({
                                heading: 'Satisfactorio',
                                text: '<br/><br/> Consultando Asistencias.',
                                position: 'top-right',
                                loaderBg: '#ff6849',
                                icon: 'success',
                                hideAfter: 30000,
                                stack: 6
                            });
							//RefrescarGrid();
                            //$('#ModalEmployees').modal('hide');
                        },
                        //error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //    notification.show({ 
                        //       // title: "Validación",
                        //        message: textStatus + ": " + XMLHttpRequest.responseText
                        //    }, "error");
                        //}
                    });
               //}
                //else {
                //    $("#btnEmployees").prop("disabled", false);
                //}
    }


</script>




<script>

    //var f = new Date();
    //document.write(f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear());


    function monthpicker_change() {

         console.log("Entre")
               // var notification = $("#notification").data("kendoNotification");
        var displayedData1 = $("#monthpicker").getKendoDatePicker().value().toJSON()
        console.log(displayedData1)

        var stringVal = displayedData1.toString();

        console.log(stringVal + " String")

        var dates = displayedData1.split("-");

        //var fin = stringVal.substring(0, 9).toString();

       

        var p1 = dates[0];
        var p2 = dates[1];
        var p3 = dates[2];
        console.log("_____________________________________")
        var primero = (p1 + "-" + p2 + "-" + "01").toString();




        console.log(primero)
       

				//var dataObject = {
                    
    //                '_Data': displayedData1
				//};

       // console(dataObject)

               // var validator = $("#frmEmployees").data("kendoValidator");
                //if (validator.validate()) {


                    $.ajax({
                        url: '@Url.Action("GetGetControlAsistencias", "ControlAsistencias")',
                        method: 'GET',
                        datatype: "json",
                        contentType: 'application/json',
                        async: false,
                        data: { 'primero': primero, 'actual': stringVal},
                        success: function (data) {
							$.toast({
                                heading: 'Satisfactorio',
                                text: '<br/><br/> Resiviendo Listado de Asistencia.',
                                position: 'top-right',
                                loaderBg: '#ff6849',
                                icon: 'success',
                                hideAfter: 30000,
                                stack: 6
                            });
							//RefrescarGrid();
                            //$('#ModalEmployees').modal('hide');
                        },
                        //error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //    notification.show({ 
                        //       // title: "Validación",
                        //        message: textStatus + ": " + XMLHttpRequest.responseText
                        //    }, "error");
                        //}
                    });
               //}
                //else {
                //    $("#btnEmployees").prop("disabled", false);
                //}
    }




    //    var datepicker = $("#monthpicker").data("kendoDatePicker");
    //    var value = datepicker.value();
    //    var fecha = kendo.toString(value, "MMMM yyyy ");


    //    console.log(fecha)




    //    var str = fecha;
    //    var date = str.split(" ");

    //    var Mes = date[0];
    //    var Año = date[1];

    //    var MesNum = 0;

    //    if (Mes)

    //        //var res = str.split(" ", 1);
    //        //var res2 = str.split(" ", 2);
    //        console.log(date)
    //    console.log(Año)
    //    console.log(Mes)
    //    if (Mes == "enero") {
    //        MesNum = 1;
    //    }
    //    else if (Mes == "febrero") {
    //        MesNum = 2;
    //    }
    //    else if (Mes == "marzo") {
    //        MesNum = 3;
    //    }
    //    else if (Mes == "abril") {
    //        MesNum = 4;
    //    }
    //    else if (Mes == "mayo") {
    //        MesNum = 5;
    //    }
    //    else if (Mes == "junio") {
    //        MesNum = 6;
    //    }
    //    else if (Mes == "julio") {
    //        MesNum = 7;
    //    }
    //    else if (Mes == "agosto") {
    //        MesNum = 8;
    //    }
    //    else if (Mes == "septiembre") {
    //        MesNum = 9;
    //    }
    //    else if (Mes == "octubre") {
    //        MesNum = 10;
    //    }
    //    else if (Mes == "noviembre") {
    //        MesNum = 11;
    //    }
    //    else if (Mes == "diciembre") {
    //        MesNum = 12;
    //    };

    //    console.log(MesNum);



    //}






</script>







<br />

@(Html.Kendo().Grid<ERPMVC.DTO.ControlAsistenciasDTO>
                                ()
                                .Name("gridControlAsistencia")
                                .Columns(columns =>
                                {

                                    columns.Command(command =>
                                    {

                                        //command.Custom("Ver detalles").Click("Detalles");
                                        //command.Custom("Editar").Click("EditControlAsistencias");
                                        command.Edit().Text("Editar").UpdateText("Actualizar").CancelText("Cancelar");
                                        //command.Destroy().Text("Eliminar");
                                    }).Width(250);
                                    columns.Bound(p => p.Contador).Width(100);
                                   
                                    columns.Bound(p => p.Empleado.IdEmpleado).Width(150);
                                    //columns.ForeignKey()
                                    columns.Bound(p => p.Empleado.NombreEmpleado).Width(150);
                                    columns.ForeignKey(p => p.Dia1TA,
                                                                   (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("1").Width(100);
                                    //columns.Bound(p => p.Empleado.NombreEmpleado).Width(150);

                                    columns.ForeignKey(p => p.Dia2TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("2").Width(100);
                                    columns.ForeignKey(p => p.Dia3TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("3").Width(100);
                                    columns.ForeignKey(p => p.Dia4TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("4").Width(100);
                                    columns.ForeignKey(p => p.Dia5TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("5").Width(100);
                                    columns.ForeignKey(p => p.Dia6TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("6").Width(100);
                                    columns.ForeignKey(p => p.Dia7TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("7").Width(100);
                                    columns.ForeignKey(p => p.Dia8TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("8").Width(100);
                                    columns.ForeignKey(p => p.Dia9TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("9").Width(100);
                                    columns.ForeignKey(p => p.Dia10TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("10").Width(100);
                                    columns.ForeignKey(p => p.Dia11TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("11").Width(100);
                                    columns.ForeignKey(p => p.Dia12TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("12").Width(100);
                                    columns.ForeignKey(p => p.Dia13TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("13").Width(100);
                                    columns.ForeignKey(p => p.Dia14TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("14").Width(100);
                                    columns.ForeignKey(p => p.Dia15TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("15").Width(100);
                                    columns.ForeignKey(p => p.Dia16TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("16").Width(100);
                                    columns.ForeignKey(p => p.Dia17TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("17").Width(100);
                                    columns.ForeignKey(p => p.Dia18TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("18").Width(100);
                                    columns.ForeignKey(p => p.Dia19TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("19").Width(100);
                                    columns.ForeignKey(p => p.Dia20TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("20").Width(100);
                                    columns.ForeignKey(p => p.Dia21TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("21").Width(100);
                                    columns.ForeignKey(p => p.Dia22TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("22").Width(100);
                                    columns.ForeignKey(p => p.Dia23TA, (System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("23").Width(100);
                                    columns.ForeignKey(p => p.Dia24TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("24").Width(100);
                                    columns.ForeignKey(p => p.Dia25TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("25").Width(100);
                                    columns.ForeignKey(p => p.Dia26TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("26").Width(100);
                                    columns.ForeignKey(p => p.Dia27TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("27").Width(100);
                                    columns.ForeignKey(p => p.Dia28TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("28").Width(100);
                                    columns.ForeignKey(p => p.Dia29TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("29").Width(100);
                                    columns.ForeignKey(p => p.Dia30TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("30").Width(100);
                                    columns.ForeignKey(p => p.Dia31TA,(System.Collections.IEnumerable)ViewData["ElementoConfiguracion"], "Id", "Valorstring").Title("31").Width(100);



                                    //columns.Bound(p => p.Dia1).Title("1").Width(100);
                                    //columns.Bound(p => p.Dia2).Title("2").Width(150);
                                    //columns.Bound(p => p.Dia3).Title("3").Width(150);
                                    //columns.Bound(p => p.Dia4).Title("4").Width(150);
                                    //columns.Bound(p => p.Dia5).Title("5").Width(150);
                                    //columns.Bound(p => p.Dia6).Title("6").Width(150);
                                    //columns.Bound(p => p.Dia7).Title("7").Width(150);
                                    //columns.Bound(p => p.Dia8).Title("8").Width(150);
                                    //columns.Bound(p => p.Dia9).Title("9").Width(150);
                                    //columns.Bound(p => p.Dia11).Title("10").Width(150);
                                    //columns.Bound(p => p.Dia12).Title("11").Width(150);
                                    //columns.Bound(p => p.Dia10).Title("12").Width(150);
                                    //columns.Bound(p => p.Dia13).Title("13").Width(150);
                                    //columns.Bound(p => p.Dia14).Title("14").Width(150);
                                    //columns.Bound(p => p.Dia15).Title("15").Width(150);
                                    //columns.Bound(p => p.Dia16).Title("16").Width(150);
                                    //columns.Bound(p => p.Dia17).Title("17").Width(150);
                                    //columns.Bound(p => p.Dia18).Title("18").Width(150);
                                    //columns.Bound(p => p.Dia19).Title("19").Width(150);
                                    //columns.Bound(p => p.Dia20).Title("20").Width(150);
                                    //columns.Bound(p => p.Dia21).Title("21").Width(150);
                                    //columns.Bound(p => p.Dia22).Title("22").Width(150);
                                    //columns.Bound(p => p.Dia23).Title("23").Width(150);
                                    //columns.Bound(p => p.Dia24).Title("24").Width(150);
                                    //columns.Bound(p => p.Dia25).Title("25").Width(150);
                                    //columns.Bound(p => p.Dia26).Title("26").Width(150);
                                    //columns.Bound(p => p.Dia27).Title("27").Width(150);
                                    //columns.Bound(p => p.Dia28).Title("28").Width(150);
                                    //columns.Bound(p => p.Dia29).Title("29").Width(150);
                                    //columns.Bound(p => p.Dia30).Title("30").Width(150);
                                    //columns.Bound(p => p.Dia31).Title("31").Width(150);
                                    columns.Bound(p => p.LlegadasTarde).Width(150).Title("Llegadas Tarde");
                                    columns.Bound(p => p.DiasLaborales).Width(150).Title("Dias Laborales");
                                    columns.Bound(p => p.PorcentajeLlegadasTarde).Width(150).Title("%Llgadas Tarde");





                                    //columns.Bound(p => p.UsuarioCreacion).Width(230);
                                    //columns.Bound(p => p.UsuarioModificacion).Width(230);
                                    //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(190);
                                    //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(220);



                                })
                                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                   .Clear()
                                                                   .Contains("Contiene")
                                                                   .DoesNotContain("No contiene")
                                                                   .EndsWith("Termina con")
                                                                   .IsEqualTo("Es igual a")
                                                                   .IsNotEqualTo("No es igual a")
                                                                   .IsNull("Es nulo")
                                                                   .StartsWith("Inicia con")


                                                             )
                                                             .ForNumber(n => n
                                                               .Clear()
                                                               .IsEqualTo("Es igual a")
                                                               .IsGreaterThan("Es mayor que")
                                                               .IsLessThan("Es menor que")
                                                               .IsNull("Es nulo")
                                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                             )
                                                             .ForDate(d => d
                                                             .Clear()
                                                             .IsEqualTo("Es igual que")
                                                             .IsGreaterThan("Es mayor que")
                                                             .IsLessThan("Es menor que")
                                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                             .IsNotEqualTo("No es igual que")
                                                              )
                                                           ))
                                .ToolBar(tools =>
                                {
                                    // tools.Create();
                                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEstados()" });
                                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                })
                                .Editable(e => e.Mode(GridEditMode.InLine).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                .Sortable()
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                .Pdf(pdf => pdf.FileName("EstadosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                    .Excel(excel => excel.FileName("EstadosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                .DataSource(dataSource =>
                                    dataSource
                                    .WebApi()

                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Field(p => p.Contador);
                                        model.Field(p => p.Empleado.IdEmpleado).Editable(false);
                                        model.Field(p => p.Empleado.NombreEmpleado).Editable(false);
                                        model.Field(p => p.Dia1TA).DefaultValue(1);
                                        model.Field(p => p.Dia2TA).DefaultValue(1);
                                        model.Field(p => p.Dia3TA).DefaultValue(1);
                                        model.Field(p => p.Dia4TA).DefaultValue(1);
                                        model.Field(p => p.Dia5TA).DefaultValue(1);
                                        model.Field(p => p.Dia6TA).DefaultValue(1);
                                        model.Field(p => p.Dia7TA).DefaultValue(1);
                                        model.Field(p => p.Dia8TA).DefaultValue(1);
                                        model.Field(p => p.Dia9TA).DefaultValue(1);
                                        model.Field(p => p.Dia10TA).DefaultValue(1);
                                        model.Field(p => p.Dia11TA).DefaultValue(1);
                                        model.Field(p => p.Dia12TA).DefaultValue(1);
                                        model.Field(p => p.Dia13TA).DefaultValue(1);
                                        model.Field(p => p.Dia14TA).DefaultValue(1);
                                        model.Field(p => p.Dia15TA).DefaultValue(1);
                                        model.Field(p => p.Dia16TA).DefaultValue(1);
                                        model.Field(p => p.Dia17TA).DefaultValue(1);
                                        model.Field(p => p.Dia18TA).DefaultValue(1);
                                        model.Field(p => p.Dia19TA).DefaultValue(1);
                                        model.Field(p => p.Dia20TA).DefaultValue(1);
                                        model.Field(p => p.Dia21TA).DefaultValue(1);
                                        model.Field(p => p.Dia22TA).DefaultValue(1);
                                        model.Field(p => p.Dia23TA).DefaultValue(1);
                                        model.Field(p => p.Dia24TA).DefaultValue(1);
                                        model.Field(p => p.Dia25TA).DefaultValue(1);
                                        model.Field(p => p.Dia26TA).DefaultValue(1);
                                        model.Field(p => p.Dia27TA).DefaultValue(1);
                                        model.Field(p => p.Dia28TA).DefaultValue(1);
                                        model.Field(p => p.Dia29TA).DefaultValue(1);
                                        model.Field(p => p.Dia30TA).DefaultValue(1);
                                        model.Field(p => p.Dia31TA).DefaultValue(1);
                                        //model.Field(p => p.Dia2).Editable(true);
                                        //model.Field(p => p.Dia3).Editable(true);
                                        //model.Field(p => p.Dia4).Editable(true);
                                        //model.Field(p => p.Dia5).Editable(true);
                                        //model.Field(p => p.Dia6).Editable(true);
                                        //model.Field(p => p.Dia7).Editable(true);
                                        //model.Field(p => p.Dia8).Editable(true);
                                        //model.Field(p => p.Dia9).Editable(true);
                                        //model.Field(p => p.Dia10).Editable(true);
                                        //model.Field(p => p.Dia11).Editable(true);
                                        //model.Field(p => p.Dia12).Editable(true);
                                        //model.Field(p => p.Dia13).Editable(true);
                                        //model.Field(p => p.Dia14).Editable(true);
                                        //model.Field(p => p.Dia15).Editable(true);
                                        //model.Field(p => p.Dia16).Editable(true);
                                        //model.Field(p => p.Dia17).Editable(true);
                                        //model.Field(p => p.Dia18).Editable(true);
                                        //model.Field(p => p.Dia19).Editable(true);
                                        //model.Field(p => p.Dia20).Editable(true);
                                        //model.Field(p => p.Dia21).Editable(true);
                                        //model.Field(p => p.Dia22).Editable(true);
                                        //model.Field(p => p.Dia23).Editable(true);
                                        //model.Field(p => p.Dia24).Editable(true);
                                        //model.Field(p => p.Dia25).Editable(true);
                                        //model.Field(p => p.Dia26).Editable(true);
                                        //model.Field(p => p.Dia27).Editable(true);
                                        //model.Field(p => p.Dia28).Editable(true);
                                        //model.Field(p => p.Dia29).Editable(true);
                                        //model.Field(p => p.Dia30).Editable(true);
                                        //model.Field(p => p.Dia31).Editable(true);
                                        model.Field(p => p.LlegadasTarde);
                                        model.Field(p => p.DiasLaborales);
                                        model.Field(p => p.PorcentajeLlegadasTarde);

                                        // model.Field(p => p.TipoAsistencia).DefaultValue(ViewData["defaultTipo"] as ERPMVC.Models.ControlAsistencias);

                                        //{
                                        //    var dias =  model.Field(p =>  p.Dia27) + model.Field(p => p.Dia28); ;
                                        //}


                                        model.Field(p => p.FechaCreacion).Editable(true);
                                        model.Field(p => p.UsuarioCreacion).Editable(false);
                                        model.Field(p => p.UsuarioModificacion).Editable(false);

                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Read(read => read.Action("GetGetControlAsistencias", "ControlAsistencias"))
                                //   .Read(read => read.Action("GetGetControlAsistencias", "ControlAsistencias"))
                                //.Read(read => read.Action("GetControlAsistencias", "ControlAsistencias"))
                                .Create(create => create.Action("PostControlAsistencias", "ControlAsistencias"))
                                .Update(update => update.Action("PostControlAsistencias", "ControlAsistencias", new { Id = "{0}" }))
                                //.Update(update => update.Action("PostControlAsistencias", "ControlAsistencias", new { Id = "{0}" }))
                                 // .Update(update => update.Action("PostControlAsistenciasS", "ControlAsistencias", new { ExchangeRateId = "{0}" }).Type(HttpVerbs.Put))
                                //.Update(update => update.Action("Update", "ControlAsistencias", new { Id = "{0}" }).Type(HttpVerbs.Put))
                                //.Destroy(destroy => destroy.Action("Delete", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Delete))

                                )
                                .Events(e =>
                                {
                                    e.Save("onsave");

                                })
)

@*<div id="NumEstados">
        @await Html.PartialAsync("AddControlAsistencia", new ERPMVC.DTO.ControlAsistenciasDTO { Id = 0 })
    </div>*@



