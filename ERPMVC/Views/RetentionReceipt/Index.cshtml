@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Comprobante de Retención";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3 class="text-themecolor">Comprobante de Retención</h3>

@(Html.Kendo().Grid<ERPMVC.Models.RetentionReceipt>()
                    .Name("gridComprobanteRetencion")
                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditComprobanteRetencion");
                            command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("DeleteComprobanteRetencion");
                        }).Width(125).Title("Acciones");
                        columns.Bound(p => p.RetentionReceiptId).Width(100);
                        columns.Bound(p => p.NoCorrelativo).Title("No. Correlativo").Width(300);
                        columns.Bound(p => p.FechaEmision).Title("Fecha Emisioón").Format("{0:dd/MM/yyyy}").Width(250);
                        columns.Bound(p => p.DueDate).Title("Fecha de Vencimiento").Format("{0:dd/MM/yyyy}").Width(250);
                        columns.Bound(p => p.CAI).Title("CAI").Format("{0:dd/MM/yyyy}").Width(350);
                    })
                    .Filterable(f => f.Operators(o => o.ForString(s => s
                        .Clear()
                        .Contains("Contiene")
                        .DoesNotContain("No contiene")
                        .EndsWith("Termina con")
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("No es igual a")
                        .IsNull("Es nulo")
                        .StartsWith("Inicia con"))
                    .ForNumber(n => n
                        .Clear()
                        .IsEqualTo("Es igual a")
                        .IsGreaterThan("Es mayor que")
                        .IsLessThan("Es menor que")
                        .IsNull("Es nulo")
                        .IsLessThanOrEqualTo("Es menor o igual que")
                        .IsGreaterThanOrEqualTo("Es mayor o igual que"))
                    .ForDate(d => d
                        .Clear()
                        .IsEqualTo("Es igual que")
                        .IsGreaterThan("Es mayor que")
                        .IsLessThan("Es menor que")
                        .IsLessThanOrEqualTo("Es menor o igual que")
                        .IsGreaterThanOrEqualTo("Es mayor o igual que")
                        .IsNotEqualTo("No es igual que"))
                    ))
                    .ToolBar(tools =>
                    {
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus").HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddComprobanteRetencion()" });
                        tools.Custom().Text("Reporte").IconClass("").HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirComprobanteRetencion();" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .Pageable(s => s
                        .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                        .Empty("No hay datos."))
                    )
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("Comprobantes_Retención_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("Comprobantes_Retención_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()
                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.RetentionReceiptId);
                        model.Field(p => p.RetentionReceiptId).Editable(false);
                    })
                    .Sort(s => s.Add(m => m.RetentionReceiptId).Descending())
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "RetentionReceipt"))
                    )
                    .Events(e =>
                    {
                        e.Save("onsave");
                    })
)

<div id="numComprobanteRetencion">
    @await Html.PartialAsync("pvwAddRetentionReceipt", new ERPMVC.DTO.RetentionReceiptDTO { RetentionReceiptId = 0, FechaEmision = DateTime.Now, DueDate = DateTime.Now })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridComprobanteRetencion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridComprobanteRetencion").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setToolbarTooltip(".k-grid-Reporte", "Reporte de Comprobante de Retención");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");

    function AddComprobanteRetencion() {
        var dataObject = {
            RetentionReceiptId: 0,
            editar : 1
        };
        $.ajax({
            url: '@Url.Action("pvwAddRetentionReceipt", "RetentionReceipt")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numComprobanteRetencion").html('');
                $("#numComprobanteRetencion").html(result);
                $('#ModalComprobanteRetencion').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }
    function EditComprobanteRetencion(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            RetentionReceiptId: dataItem.RetentionReceiptId,
            editar : 1
        };
        $.ajax({
            url: '@Url.Action("pvwAddRetentionReceipt", "RetentionReceipt")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numComprobanteRetencion").html('');
                $("#numComprobanteRetencion").html(result);

                $('#ModalComprobanteRetencion').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }
    function DeleteComprobanteRetencion(e) {
        if (confirm('¿Esta seguro que desea eliminar este registro?')) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                RetentionReceiptId: dataItem.RetentionReceiptId
            };
            $.ajax({
                url: '@Url.Action("Delete", "RetentionReceipt")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    RefrescarGrid();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
        }
    }
    function onsave() {
        console.log("onsave");
    }

    function RefrescarGrid() {
        var grid = $("#gridComprobanteRetencion").getKendoGrid();
        grid.dataSource.read();
    }

    function ImprimirComprobanteRetencion() {
        console.log("ImprimirComprobanteRetencion");
    }
</script>
