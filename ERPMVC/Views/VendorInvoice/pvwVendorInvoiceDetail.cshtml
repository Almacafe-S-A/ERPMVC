@model ERPMVC.DTO.VendorInvoiceDTO
@using System.Security.Claims
@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosVendorInvoice"];
}

<script>


    function GetInvoiceId() {
       // console.log($("#DescriptionDetail").val());
        if ($("#CostCenter").val() != null && $("#CostCenter").val() != 0 || @Model.VendorInvoiceId > 0) {
            var subproductname = '', /*unidaddemedida*/ /*= '',*/ cuenta = '', taxname = '',costcenter = '';
            //if ($("#UnitOfMeasureId") != null) {
            //    if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
            //        unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
            //    }
            //}
            if ($("#CostCenter") != null) {
                if ($("#CostCenter").data("kendoDropDownList") != null) {
                    costcenter = $("#CostCenter").data("kendoDropDownList").text();
                }
            }

            //if ($("#ProductId") != null) {
            //    if ($("#ProductId").data("kendoDropDownList") != null) {
            //        subproductname = $("#ProductId").data("kendoDropDownList").text();
            //    }
            //}
            if ($("#TaxCode") != null) {
                if ($("#TaxCode").data("kendoDropDownList") != null) {
                    taxname = $("#TaxCode").data("kendoDropDownList").text();
                }
            }
            if ($("#cuentaline") != null) {
                if ($("#cuentaline").data("kendoDropDownList") != null) {
                    cuenta = $("#cuentaline").data("kendoDropDownList").text();
                }
            }

            var displayedData = $("#gridInvoiceDetail").data().kendoGrid.dataSource.view();
            var id = -999999;
            debugger;
            if (Number($("#VendorInvoiceLineId").val()) === 0) {
                if (displayedData.length > 0) {
                    for (var i = 0; i < displayedData.length; i++) {
                        //console.log('Linea:' + displayedData[i].InvoiceLineId);
                        //console.log('Linea:' + id);
                        if (displayedData[i].VendorInvoiceLineId > id)
                            id = displayedData[i].VendorInvoiceLineId;

                    }

                    id = id + 1;
                }
                else if ($("#CostCenter").val() > 0) {
                    id = 1;
                }
            }
            else {
                id = $("#VendorInvoiceLineId").val();
            }
            var CuentaId = $("#cuentaline").val();
            console.log("Cuenta", CuentaId);
            return {
                VendorInvoiceLineId: id,
                VendorInvoiceId: @Model.VendorInvoiceId,
                /*ProductId: $("#ProductId").val(),*/
                //ProductId: $("#ProductId").val(),
                //ItemName: subproductname,
                CostCenterId: $("#CostCenter").val(),
                //CostCenterName : $("#CostCenter").data("kendoDropDownList").text(),
                CostCenterName: costcenter,
                //UnitOfMeasureId: $("#UnitOfMeasureId").val(),
                //UnitOfMeasureName: unidaddemedida,
                Description: $("#DescriptionDetail").val(),
                //Quantity: $("#Quantity").val(),
                //Price: $("#Price").val(),
                Amount: $("#AmountLine").val(),
                //DiscountPercentage: $("#DiscountPercentage").val(),
                //DiscountAmount: $("#DiscountAmount").val(),
                //SubTotal: $("#SubTotalLine").val(),
                AccountId: CuentaId,
                TaxPercentage: $("#TaxPercentage").val(),
                TaxId: $("#TaxCode").val(),
                TaxCode: taxname,
                TaxAmount: $("#TaxAmount").val(),
                Total: $("#TotalLine").val(),
            }
        }
        else {
            return false;
        }
    }

    function RefreshInvoiceDetail() {
        var grid = $("#gridInvoiceDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function AddCotizacionDetalle() {
        debugger
        var notification = $("#notification").data("kendoNotification");
        var validator = $("#frmSalesOrderLine").data("kendoValidator");
        validator.hideMessages();

            //llenarsubproduct();
        $("#frmSalesOrderLine :input").not('#SalesOrderId').prop("disabled", false);
        //$('#TaxCode').val(0);
        $("#TaxCode").data("kendoDropDownList").value(0);
        $('#DescriptionDetail').val('');
        //$('#ProductId').data("kendoDropDownList").value(0);
        //$("#Quantity").data("kendoNumericTextBox").value(0);
        //$("#Price").data("kendoNumericTextBox").value(0);
        $("#Amount").data("kendoNumericTextBox").value(0);
        //$("#SubTotalLine").data("kendoNumericTextBox").value(0);
        //$("#TaxAmount").data("kendoNumericTextBox").value(0);
        $("#AmountLine").data("kendoNumericTextBox").value(0);
        $("#TotalLine").data("kendoNumericTextBox").value(0);
        $("#cuentaline").data("kendoDropDownList").value(0);
        //$("#UnitOfMeasureId").data("kendoDropDownList").value(0);
        $("#CostCenter").data("kendoDropDownList").value(0);
        $("#TaxPercentage").data("kendoNumericTextBox").value(0);
        //$("#DiscountPercentage").data("kendoNumericTextBox").value(0);
        $("#btnActualizarCotizacionLinea").show();
        $("#btnActualizarCotizacionLinea").prop("disabled", false);
        $('#myModalInvoiceLine').modal('show');


    }



    var hcustom = 0;
    function EditCotizacionDetalle(e) {
        var notification = $("#notification").data("kendoNotification");
        var validator = $("#frmSalesOrderLine").data("kendoValidator");
        validator.hideMessages();
        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //  debugger;
        console.log(dataItem);
        if (dataItem.VendorInvoiceId != 0) {
             $("#btnActualizarCotizacionLinea").prop("disabled", true);
            var subproducto = 0;
            var dataObject = { 'VendorInvoiceLineId': dataItem.VendorInvoiceLineId };
            $.ajax({
                url: '@Url.Action("pvwVendorInvoiceLine", "VendorInvoiceLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    debugger;
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);

                    //$("#TaxCode").data("kendoDropDownList").value(data.TaxId);
                    GetPercentage();
                    var txt = $(data);

                    //var combobox = $('#SubProductId').getKendoDropDownList();
                    //if (combobox != null) {
                    //    var found = $("#SubProductId", txt);
                    //    subproducto = $(found).val();
                    //}
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            $("#frmSalesOrderLine :input").prop("disabled", true);
            //llenarsubproduct();
            //var combobox = $('#SubProductId').getKendoDropDownList();
            //if (combobox != null) {
            //    combobox.value(subproducto);
            //    combobox.trigger('change');

            //}
        }
        else {



            debugger;
            $("#btnActualizarCotizacionLinea").show();
            $("#btnActualizarCotizacionLinea").prop("disabled", false);
            $("#VendorInvoiceLineId").val(dataItem.VendorInvoiceLineId);

            //llenarsubproduct();
            //$("#ProductId").data("kendoDropDownList").dataSource.read();
            //$("#ProductId").data("kendoDropDownList").value(dataItem.ProductId);
            //$("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#DescriptionDetail").val(dataItem.Description);
            //$("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            //$("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#TaxCode").data("kendoDropDownList").value(dataItem.TaxId);
            //$("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
            //$("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#AmountLine").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
            $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountAmount);
            //$("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);
             $("#CostCenter").data("kendoDropDownList").value(dataItem.CostCenterId);
            //$("#cuentaline").data("kendoDropDownList").value(dataItem.AccountId);
            var cuentaline = $("#cuentaline").data("kendoDropDownList");
            cuentaline.value(dataItem.AccountId);
            cuentaline.trigger("change");
            var cuenta = $("#cuentaline").data("kendoDropDownList").value(dataItem.AccountId);
            console.log('Aqui', cuenta)
        }

        $('#myModalInvoiceLine').modal('show');

    }


        function Delete(e) {

        e.preventDefault();
        if (confirm('¿Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "VendorInvoiceLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridInvoiceDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            CalcularTotalDocumento();
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }

</script>



<div class="box">
    <div class="box-body">
        <h3 class="text-themecolor">Detalle de la Factura</h3>
        @(Html.Kendo().Grid<ERPMVC.Models.VendorInvoiceLine>()
                                                                                  .Name("gridInvoiceDetail")
                                                                                  .Columns(columns =>
                                                                                  {
                                                                                      
                                                                                          columns.Command(command =>
                                                                                          {
                                                                                              if (Model.VendorInvoiceId == 0)
                                                                                              {
                                                                                                  
                                                                                                      command.Custom("Detalles").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                                                                  
                                                                                                      command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                                                  

                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                 
                                                                                                      command.Custom("Detalles").Text(" ").IconClass("far fa-list-alt").Click("EditCotizacionDetalle");
                                                                                                  
                                                                                              }

                                                                                              // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                                              //  command.Edit(); command.Destroy();
                                                                                          }).Width(125).Title("Acciones");
                                                                                      

                                                                                      columns.Bound(p => p.VendorInvoiceLineId).Title("Id Línea").Width(150).Hidden(true);
                                                                                      columns.Bound(p => p.VendorInvoiceId).Title("Factura Id").Width(150);
                                                                                      //columns.Bound(p => p.ProductId).Title("IdProducto").Visible(false);
                                                                                      //columns.Bound(p => p.ItemName).Title("Producto").Width(150);
                                                                                      //columns.Bound(p => p.Description).Title("Descripción").Width(250);
                                                                                      //columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(150);
                                                                                      //columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio").Format("{0:n2}").Width(200);
                                                                                      //columns.Bound(p => p.UnitOfMeasureId).Title("Unidad de medida").Hidden(true);
                                                                                      //  columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(150);
                                                                                      //columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Width(200);
                                                                                      //columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Descuentos").Width(200);
                                                                                      columns.Bound(p => p.TaxId).Title("Id Impuesto").Hidden(true);
                                                                                      columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(200);
                                                                                      columns.Bound(p => p.CostCenterId).Title("Id Centro de Costo").Width(150);
                                                                                      columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Impuestos").Width(200);

                                                                                      columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(200);
                                                                                      columns.Bound(p => p.AccountId).Title("Cuenta").Width(200);

                                                                                  })
                                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                               .Clear()
                                                                               .Contains("Contiene")
                                                                               .DoesNotContain("No contiene")
                                                                               .EndsWith("Termina con")
                                                                               .IsEqualTo("Es igual a")
                                                                               .IsNotEqualTo("No es igual a")
                                                                               .IsNull("Es nulo")
                                                                               .StartsWith("Inicia con")


                                                                         )
                                                                         .ForNumber(n => n
                                                                           .Clear()
                                                                           .IsEqualTo("Es igual a")
                                                                           .IsGreaterThan("Es mayor que")
                                                                           .IsLessThan("Es menor que")
                                                                           .IsNull("Es nulo")
                                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         )
                                                                         .ForDate(d => d
                                                                         .Clear()
                                                                         .IsEqualTo("Es igual que")
                                                                         .IsGreaterThan("Es mayor que")
                                                                         .IsLessThan("Es menor que")
                                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         .IsNotEqualTo("No es igual que")
                                                                          )
                                                                       ))
                                                                                  .ToolBar(tools =>
                                                                                  {
                                                                                      if (Model.VendorInvoiceId == 0)
                                                                                      {
                                                                                          if (permisos.HasClaim("Compras.Factura Proveedores.Agregar Factura Proveedores Detalle", "true"))
                                                                                          {
                                                                                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                                                          }
                                                                                      }
                                                                                          tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                          tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                      

                                                                                  })
                                                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                                    .Sortable()
                                                                                    .AutoBind(true)
                                                                                    .Pageable(s => s
                                                                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                                                    .Empty("No hay datos."))
                                                                                    )
                                                                                    .Filterable()
                                                                                    .Scrollable()
                                                                                    // .ClientDetailTemplateId("template")
                                                                                    .Pdf(pdf => pdf.FileName("Factura_Proveedor_Detalle_Report" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                      .Excel(excel => excel.FileName("Factura_Proveedor_Detalle_Report_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                    //.Events(e=>e.Save("onsave"))
                                                                                    .DataSource(dataSource =>

                                                                                   dataSource
                                                                                   //.Ajax()
                                                                                   .WebApi()

                                                                                    .ServerOperation(true)
                                                                                    .Model(model =>
                                                                                    {
                                                                                        model.Id(p => p.VendorInvoiceLineId);
                                                                                        model.Field(p => p.VendorInvoiceLineId).Editable(false);
                                                                                        model.Field(p => p.VendorInvoiceId).Editable(false);

                                                                                    })
                                                                                    .Sort(s => s.Add(m => m.VendorInvoiceLineId).Descending())
                                                                                    .Events(events =>
                                                                                    {
                                                                                        events.Error("error_handler");
                                                                                        //events.upda("EditHandler");

                                                                                    })
                                                                                    .Read(read => read.Action("GetVendorInvoiceLineByInvoiceId", "VendorInvoiceLine").Data("GetInvoiceId"))
                                                                              //.Create(create => create.Action("Insert", "VendorInvoiceLine"))
                                                                              //.Update(update => update.Action("Update", "VendorInvoiceLine", new { SalesOrderLineId = "{0}" }))
                                                                              //.Destroy(destroy => destroy.Action("Delete", "VendorInvoiceLine", new { VendorInvoiceLineId = "{0}" }))
                                                                              )
        )

    </div>
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridInvoiceDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridInvoiceDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    if (@Model.VendorInvoiceId > 0) {
        setRowButtonTooltip(".k-grid-Detalles", "Ver Detalles");
    }
    else {
        setRowButtonTooltip(".k-grid-Detalles", "Editar Registro");
    }


</script>