@using System.Security.Claims
@{
    ViewData["Title"] = "Factura de Proveedores";
    bool permiso;
    permiso = (bool)ViewData["permisoActualizarRecibido"];
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}
<script>
    function ActualizarRecibido(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.ReceivedDate != Date.now) {
            if (confirm('La fecha se actualizara')) {
                e.preventDefault();

                var dataObject = {
                    VendorInvoiceId: dataItem.VendorInvoiceId,
                    editar: 0
                };

                $.ajax({
                    url: '@Url.Action("Recibido","VendorInvoice")',
                    method: 'POST',
                    datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    data: JSON.stringify(dataObject),
                    success: function (result) {
                        //$.toast({
                        //    heading: 'Satisfactorio',
                        //    text: 'Se actualizo correctamente.',
                        //    position: 'top-right',
                        //    loaderBg: '#ff6849',
                        //    icon: 'success',
                        //    hideAfter: 7000,
                        //    stack: 6
                        //});
                         MostrarMensaje("Se actualizó correctamente.", "success", "Satisfactorio", 6000);
                        RefrescarGrid();
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //notification.show({
                        //    title: "Validación",
                        //    message: textStatus + ": " + XMLHttpRequest.responseText
                        //}, "error");
                        //alert(textStatus + ": " + XMLHttpRequest.responseText);
                         MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                    }
                });
            }
        }
        else {
            //notification.show({
            //    title: "Validación",
            //    message: "No se actualizo"
            //}, "error");
             MostrarMensaje("No se actualizó correctamente.", "Error", "Error", 6000);
        }
    }

    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
            //console.log(Date.parse(this.OrderDate), Date.parse(this.ReceivedDate));
            if (Date.parse(this.OrderDate) != Date.parse(this.ReceivedDate)) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-Recibido').hide();
            }
        })
    }

    function ClearSession() {
        var dataObject = ["listadoproductosVendorInvoice"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                  MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
         });
    }

    function RefrescarGrid() {
        var grid = $("#gridInvoices").getKendoGrid();
        grid.dataSource.read();
    }

    

    function AddCotizacion() {
       // $('#myModalSalesOrder').find(':input').not(':submit').val('');
         //$('#myModalSalesOrder').modal('show');

        ClearSession();

         var dataObject = {
             VendorInvoiceId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwVendorInvoice","VendorInvoice")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
              //  console.log(result);
                $("#divVendorInvoice").html('');
                $("#divVendorInvoice").html(result);
                $("#Tefono").kendoMaskedTextBox({
                    mask: "(999) 0000-0000"
                });
                $("#TefonoAlert").hide();
                RefreshInvoiceDetail();
                //$("#BranchId").data("kendoDropDownList").value(0);
                $("#btnSaveVendorInvoice").show();
                $("#btnSaveVendorInvoice").prop("disabled", false);
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                  MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });


    }

    function EditCotizacion(e) {
        e.preventDefault();

        ClearSession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            VendorInvoiceId: dataItem.VendorInvoiceId,
            editar : 0
        };


        $.ajax({
            url: '@Url.Action("pvwVendorInvoice", "VendorInvoice")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#divVendorInvoice").html('');
                $("#divVendorInvoice").html(result);
                $("#Tefono").kendoMaskedTextBox({
                    mask: "(999) 0000-0000"
                });
                $("#TefonoAlert").hide();
                var txt = $(result);

                 RefreshInvoiceDetail();
                 $("#btnSaveVendorInvoice").hide();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 //alert(textStatus + ": " + XMLHttpRequest.responseText);
                  MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
              }
        });
    }

    function ImprimirCotizacion(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("SFVendorInvoice", "VendorInvoice")/' + dataItem.VendorInvoiceId;
        var win = window.open(url, '_blank');
        win.focus();

    }

    function ImprimirLibroCompras() {
        var url = '@Url.Action("SFLibroCompras", "VendorInvoice")';
        var win = window.open(url, '_blank');
        win.focus();
    }

    function GenerarFactura(e) {
        if (confirm('¿Esta seguro de generar una factura?')) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                VendorInvoiceId: dataItem.VendorInvoiceId,
                editar: 0
            };

            $.ajax({
                url: '@Url.Action("GenerarFactura", "VendorInvoice")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {

                    $("#divVendorInvoice").html('');
                    $("#divVendorInvoice").html(result);

                    //  RefreshVendorInvoiceDetail();
                    $("#btnSaveVendorInvoice").hide();
                    $('#myModalSalesOrder').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //alert(textStatus + ": " + XMLHttpRequest.responseText);
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }



    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Facturas de Proveedores</h3>
@{
    bool Gerente = false;
    if (await HasPolicyAsync(Politicas.GG))
    {
        Gerente = true;
    }

}
@(Html.Kendo().Grid<ERPMVC.Models.VendorInvoice>()
                                  .Name("gridInvoices")
                                  .Columns(columns =>
                                  {
                                      if (permisos.HasClaim("Proveedores.Factura Proveedores.Ver Detalle", "true")
                                          || permisos.HasClaim("Proveedores.Factura Proveedores.Imprimir", "true")
                                          || permisos.HasClaim("Proveedores.Factura Proveedores.Pagar", "true"))
                                      {
                                          columns.Command(command =>
                                          {
                                              if (permisos.HasClaim("Proveedores.Factura Proveedores.Ver Detalle", "true"))
                                              {
                                                  command.Custom("Detalles").Text(" ").IconClass("far fa-list-alt").Click("EditCotizacion");
                                              }
                                              if (permisos.HasClaim("Proveedores.Factura Proveedores.Imprimir", "true"))
                                              {
                                                  command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCotizacion");
                                              }
                                              //command.Custom("GenerarFactura").Text(" ").IconClass("fa fa-file-import").Click("GenerarFactura");
                                              if (permisos.HasClaim("Proveedores.Factura Proveedores.Pagar", "true"))
                                              {
                                                  command.Custom("Recibido").Text(" ").IconClass("fa fa-thumbs-up").Click("ActualizarRecibido");
                                              }
                                              //  command.Edit(); command.Destroy();
                                          }).Width(150).Title("Acciones");
                                      }
                                      columns.Bound(p => p.VendorInvoiceId).Title("Id").Width(125);

                                      columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Title("Fecha Factura").Width(250);
                                      columns.Bound(p => p.ExpirationDate).Format("{0:dd/MM/yyyy}").Title("Fecha Vencimiento").Width(250);

                                      columns.Bound(p => p.VendorName).Title("Proveedor").Width(270);
                                      columns.Bound(p => p.Estado).Title("Estado").Width(270);
                                      columns.Bound(p => p.Tefono).Title("Teléfono").Width(200);
                                      columns.Bound(p => p.Discount).Format("{0:n2}").Title("Descuentos").Width(200);
                                      //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                                      //columns.Bound(p => p.BranchName).Title("Sucursal").Width(200);
                                      columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Width(200);
                                      columns.Bound(p => p.Tax).Format("{0:n2}").Title("Total Impuesto").Width(200);
                                      columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(200);
                                  })
                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                                  .ToolBar(tools =>
                                  {
                                      // tools.Create();
                                      if (permisos.HasClaim("Compras.Factura Proveedores.Agregar", "true"))
                                      {
                                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacion();" });
                                      }
                                      if (permisos.HasClaim("Proveedores.Factura Proveedores.Reporte Libro de Compras", "true"))
                                      {
                                          tools.Custom().Text("Reporte").IconClass("")
                                                     .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ImprimirLibroCompras();" });
                                      }
                                      tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                      tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                  })
                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .AutoBind(true)
                                    .Pageable(s => s
                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                    .Empty("No hay datos."))
                                    )
                                    .Filterable()
                                    .Scrollable()
                                    // .ClientDetailTemplateId("template")
                                    .Pdf(pdf => pdf.FileName("Factura_Proveedor_Report" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                      .Excel(excel => excel.FileName("Factura_Proveedor_Report_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    .Events(e => e.DataBound("dataBound"))
                                    .DataSource(dataSource =>

                                   dataSource
                                   //.Ajax()
                                   .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.VendorInvoiceId);
                                        model.Field(p => p.VendorInvoiceName).Editable(true);
                                        model.Field(p => p.VendorInvoiceId).Editable(true);


                                    })
                                    .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                                    .Events(events =>
                                    {
                                        events.Error("error_handler");
                                        //events.upda("EditHandler");

                                    })
                                    .Read(read => read.Action("Get", "VendorInvoice"))
                                    .Create(create => create.Action("Insert", "VendorInvoice"))
                                    .Update(update => update.Action("Update", "VendorInvoice", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "VendorInvoice", new { id = "{0}" }))
                              )
)

<div id="divVendorInvoice">
    @await Html.PartialAsync("pvwVendorInvoice", new ERPMVC.DTO.VendorInvoiceDTO { VendorInvoiceId = 0, VendorInvoiceDate = DateTime.Now, ReceivedDate = DateTime.Now, ExpirationDate = DateTime.Now.AddDays(30) })
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridInvoices").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridInvoices").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setToolbarTooltip(".k-grid-Reporte", "Reporte de Libro de Compra");
    setRowButtonTooltip(".k-grid-Recibido", "Actualizar Recibido");
    //setRowButtonTooltip(".k-grid-GenerarFactura", "Generar una factura fiscal!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-Detalles", "Ver Detalles");

</script>



<div id="ConditionView">
    @*  @await Html.PartialAsync("~/Views/Conditions/pvwConditions.cshtml", new ERPMVC.Models.Conditions { ConditionId = 0 });*@
</div>

<div id="VendorConditionView">
</div>
