@using Kendo.Mvc.UI
@using System.Security.Claims

@{
    ViewData["Title"] = "Información Mediática";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddBlackList() {

        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            BlackListId : 0,
            editar: 1
        };

           $.ajax({
                url: '@Url.Action("pvwAddBlackList", "BlackListCustomers")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumBlackListCustomers").html('');
                    $("#NumBlackListCustomers").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalBlackListCustomers').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
        });

          //$('#ModalBlackListCustomers').find(':input').not(':submit').val('');
          //$('#ModalBlackListCustomers').modal('show');
          //$("#BlackListId").val('0');
    }


         function EditBlackList(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                BlackListId: dataItem.BlackListId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddBlackList", "BlackListCustomers")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumBlackListCustomers").html('');
                    $("#NumBlackListCustomers").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalBlackListCustomers').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function ShowBlackListCustomersReport() {
                //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFBlackListCustomers", "BlackListCustomers")';
    }



</script>

<h3 class="text-themecolor">Información Mediática</h3>
@(Html.Kendo().Grid<ERPMVC.Models.BlackListCustomers>
        ()
        .Name("gridBlackListCustomers")
        .Columns(columns =>
        {
            if (permisos.HasClaim("Monitoreo.Informacion Mediatica.Editar", "true")
            || permisos.HasClaim("Monitoreo.Informacion Mediatica.Eliminar", "true"))
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    if (permisos.HasClaim("Monitoreo.Informacion Mediatica.Editar", "true"))
                    {
                        command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditBlackList");
                    }
                    if (permisos.HasClaim("Monitoreo.Informacion Mediatica.Eliminar", "true"))
                    {
                        command.Destroy().Text("Eliminar").IconClass("fa fa-trash-alt").Text(" ");
                    }
                }).Title("Acciones").Width(250);
            }
            columns.Bound(p => p.BlackListId).Width(150);
            columns.Bound(p => p.CustomerName).Title("Nombre").Width(250);
            //columns.Bound(p => p.CustomerReference).Width(300);
            columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Width(200);
            columns.Bound(p => p.Alias).Width(180);
            columns.Bound(p => p.Identidad).Width(200);
            columns.Bound(p => p.RTN).Width(250);
            columns.Bound(p => p.Referencia).Width(200);
            columns.Bound(p => p.Origen).Width(200);
            columns.Bound(p => p.Estado).Width(200);
            columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(200);



        })
        .Filterable(f => f.Operators(o => o.ForString(s => s
        .Clear()
        .Contains("Contiene")
        .DoesNotContain("No contiene")
        .EndsWith("Termina con")
        .IsEqualTo("Es igual a")
        .IsNotEqualTo("No es igual a")
        .IsNull("Es nulo")
        .StartsWith("Inicia con")


        )
        .ForNumber(n => n
        .Clear()
        .IsEqualTo("Es igual a")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsNull("Es nulo")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        )
        .ForDate(d => d
        .Clear()
        .IsEqualTo("Es igual que")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        .IsNotEqualTo("No es igual que")
        )
        ))
        .ToolBar(tools =>
        {
            // tools.Create();
            if (permisos.HasClaim("Monitoreo.Informacion Mediatica.Agregar", "true"))
            {
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddBlackList()" });
            }
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
            if (permisos.HasClaim("Monitoreo.Informacion Mediatica.Reporte de Clientes no Deseados", "true"))
            {
                tools.Custom().Text("Reporte de clientes no deseados")
                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ShowBlackListCustomersReport();" });
            }


        })
        .Editable(e => e.Mode(GridEditMode.PopUp))
        .Sortable()
        .Pageable(p => p.Refresh(true))
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("BlackListCustomersReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
        .Excel(excel => excel.FileName("BlackListCustomersReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
        dataSource
        .WebApi()

        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.BlackListId);
            model.Field(p => p.BlackListId).Editable(false);
            model.Field(p => p.FechaCreacion).Editable(true);
            model.Field(p => p.UsuarioCreacion).Editable(false);
            model.Field(p => p.UsuarioModificacion).Editable(false);

        })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("Get", "BlackListCustomers"))
        .Create(create => create.Action("Insert", "BlackListCustomers"))
        .Update(update => update.Action("Update", "BlackListCustomers").Type(HttpVerbs.Put))
        .Destroy(destroy => destroy.Action("Delete", "BlackListCustomers").Type(HttpVerbs.Post))

        )
        .Events(e =>
        {
            e.Save("onsave");

        })
)

<div id="NumBlackListCustomers">
    @await Html.PartialAsync("pvwAddBlackList", new ERPMVC.DTO.BlackListCustomersDTO { BlackListId = 0, DocumentDate = DateTime.Now })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridBlackListCustomers").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridBlackListCustomers").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>
