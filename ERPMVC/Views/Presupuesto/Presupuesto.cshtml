@model ERPMVC.Models.Presupuesto

@{
    ViewData["Title"] = "Presupuesto";
    var cuentas = ViewData["Cuentas"] as IEnumerable<ERPMVC.Models.Accounting>;
}


<style>

     

        .k-checkbox + .k-checkbox-label {
            border-color: #ff6358;
            color: #fff;
            background-color: #fff;
            margin-left: 50px;
        }

</style>

<div class="row">
    <div class="col-md-2">
        <div class="form-group">
            <label asp-for="Id" class="control-label" style="width:100%">Periodo</label>
            <kendo-dropdownlist name="Id" filter="Kendo.Mvc.UI.FilterType.Contains"
                                id="PeriodoId"
                                option-label="Seleccione el periodo"
                                for="Id"
                                datatextfield="Anio"
                                datavaluefield="Id"
                                auto-bind="true"
                                data-val-required="EL Periodo es requerido"
                                style="width: 100%;">
                <datasource type="DataSourceTagHelperType.WebApi">
                    <transport>
                        <read url="@Url.Action("Get", "Periodo")" />
                    </transport>
                </datasource>

            </kendo-dropdownlist>
            <span asp-validation-for="Id" class="text-danger"></span>
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <label id="CostCenterLbl">Centro de Costos</label>
            <kendo-dropdownlist name="CostCenterId" filter="Kendo.Mvc.UI.FilterType.Contains" for="CostCenterId"
                                option-label="Seleccione centro de costos"
                                datatextfield="CostCenterName"
                                datavaluefield="CostCenterId"
                                data-val-required="Centro de Costo es requerido"
                                style="width: 100%;">
                <datasource type="DataSourceTagHelperType.WebApi" page-size="9999999">
                    <transport>
                        <read url="@Url.Action("Get", "CostCenter")" />
                    </transport>
                </datasource>
            </kendo-dropdownlist>
            <span id="Span3" class="text-danger"></span>
        </div>
    </div>

    <div class="col-md-2">
        <label id="CostCenterLbl">Mostrar Presupuesto</label>
        <br />
        @(Html.Kendo().CheckBox().Name("checkepresupuesto").Checked(true).Label(" ").HtmlAttributes(new { onchange = "check();" }))
    </div>

    <div class="col-md-2">
        <label id="CostCenterLbl">Mostrar Ejecución</label>
        <br />
        @(Html.Kendo().CheckBox().Name("checkejecucion").Checked(true).Label(" ").HtmlAttributes(new { onchange = "check2();" }))
    </div>





</div>

<script type="text/javascript">

    function check() {

        var grids = $("#gridPresupuesto").data("kendoGrid");

        if ($("#checkepresupuesto").is(':checked')) {




            grids.showColumn(2);
            grids.showColumn(4);
            grids.showColumn(6);
            grids.showColumn(8);
            grids.showColumn(10);
            grids.showColumn(12);
            grids.showColumn(14);
            grids.showColumn(16);
            grids.showColumn(18);
            grids.showColumn(20);
            grids.showColumn(22);
            grids.showColumn(24);
            grids.showColumn(26);



        }
        else {
            grids.hideColumn(2);
            grids.hideColumn(4);
            grids.hideColumn(6);
            grids.hideColumn(8);
            grids.hideColumn(10);
            grids.hideColumn(12);
            grids.hideColumn(14);
            grids.hideColumn(16);
            grids.hideColumn(18);
            grids.hideColumn(20);
            grids.hideColumn(22);
            grids.hideColumn(24);
            grids.hideColumn(26);


        }
    }


    function check2() {

        var grids = $("#gridPresupuesto").data("kendoGrid");

        if ($("#checkejecucion").is(':checked')) {




            grids.showColumn(3);
            grids.showColumn(5);
            grids.showColumn(7);
            grids.showColumn(9);
            grids.showColumn(11);
            grids.showColumn(13);
            grids.showColumn(15);
            grids.showColumn(17);
            grids.showColumn(19);
            grids.showColumn(21);
            grids.showColumn(23);
            grids.showColumn(25);
            grids.showColumn(27);



        }
        else {
            grids.hideColumn(3);
            grids.hideColumn(5);
            grids.hideColumn(7);
            grids.hideColumn(9);
            grids.hideColumn(11);
            grids.hideColumn(13);
            grids.hideColumn(15);
            grids.hideColumn(17);
            grids.hideColumn(19);
            grids.hideColumn(21);
            grids.hideColumn(23);
            grids.hideColumn(25);
            grids.hideColumn(27);


        }
    }




    function AddPresupuesto() {
        var grids = $("#gridPresupuesto").data("kendoGrid");
        if ($("#PeriodoId").val() === '' || $("#CostCenterId").val() === '') {


            
            $.toast({
                heading: 'Error',
                text: '<br/><br/> Debe seleccionar un Periodo y Centro de Costo!',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6
               
            });
            grids.hideColumn(0);
        
            
        }

        else {

            grids.showColumn(0);

        }
    }



</script>



@(Html.Kendo().Grid<ERPMVC.Models.Presupuesto>
    ()
    .Name("gridPresupuesto")
    .Columns(columns =>
    {
        columns.Command(command =>
        {
            command.Edit().Text(" ").IconClass("fa fa-edit").UpdateText(" ").CancelText(" ");
            command.Destroy().Text(" ").IconClass("fa fa-trash");
        }).Width(120)/*.Locked(true)*/.Title("Acciones");
        columns.Bound(p => p.Id).Width(100).Visible(false);
        //columns.Bound(p => p.Accounting).ClientTemplate("#=Accounting.AccountName#").Sortable(false).Width(180).Title("Cuentas");
        columns.ForeignKey(p => p.AccountigId, (System.Collections.IEnumerable)ViewData["Cuentas"], "AccountId", "AccountName").Title("Cuentas").Width(170);
        columns.Bound(p => p.PresupuestoEnero).Title("PresupuestoEnero").Width(200);
        columns.Bound(p => p.EjecucionEnero).Title("EjecucionEnero ").Width(150);
        columns.Bound(p => p.PresupuestoFebrero).Title("PresupuestoFebrero").Width(170);
        columns.Bound(p => p.EjecucionFebrero).Title("EjecucionFebrero").Width(170);
        columns.Bound(p => p.PresupuestoMarzo).Title("PresupuestoMarzo").Width(170);
        columns.Bound(p => p.EjecucionMarzo).Title("EjecucionMarzo").Width(170);
        columns.Bound(p => p.PresupuestoAbril).Title("PresupuestoAbril").Width(170);
        columns.Bound(p => p.EjecucionAbril).Title("EjecucionAbril").Width(170);
        columns.Bound(p => p.PresupuestoMayo).Title("PresupuestoMayo").Width(170);
        columns.Bound(p => p.EjecucionMayo).Title("EjecucionMayo").Width(170);
        columns.Bound(p => p.PresupuestoJunio).Title("PresupuestoJunio").Width(170);
        columns.Bound(p => p.EjecucionJunio).Title("EjecucionJunio").Width(170);
        columns.Bound(p => p.PresupuestoJulio).Title("PresupuestoJulio").Width(170);
        columns.Bound(p => p.EjecucionJulio).Title("EjecucionJulio").Width(170);
        columns.Bound(p => p.PresupuestoAgosto).Title("PresupuestoAgosto").Width(170);
        columns.Bound(p => p.EjecucionAgosto).Title("EjecucionAgosto").Width(170);
        columns.Bound(p => p.PresupuestoSeptiembre).Title("PresupuestoSeptiembre").Width(170);
        columns.Bound(p => p.EjecucionSeptiembre).Title("EjecucionSeptiembre").Width(170);
        columns.Bound(p => p.PresupuestoOctubre).Title("PresupuestoOctubre").Width(170);
        columns.Bound(p => p.EjecucionOctubre).Title("EjecucionOctubre").Width(170);
        columns.Bound(p => p.PresupuestoNoviembre).Title("PresupuestoNoviembre").Width(170);
        columns.Bound(p => p.EjecucionNoviembre).Title("EjecucionNoviembre").Width(170);
        columns.Bound(p => p.PresupuestoDiciembre).Title("PresupuestoDiciembre").Width(170);
        columns.Bound(p => p.EjecucionDiciembre).Title("EjecucionDiciembre").Width(170);
        columns.Bound(p => p.TotalMontoPresupuesto).Title("TotalMontoPresupuesto").Width(170);
        columns.Bound(p => p.TotalMontoEjecucion).Title("TotalMontoEjecucion").Width(170);

    })
    //.Events(e => e.Edit("addmaskpassword"))
    .Filterable(f => f.Operators(o => o.ForString(s => s
    .Clear()
    .Contains("Contiene")
    .DoesNotContain("No contiene")
    .EndsWith("Termina con")
    .IsEqualTo("Es igual a")
    .IsNotEqualTo("No es igual a")
    .IsNull("Es nulo")
    .StartsWith("Inicia con")


    )
    .ForNumber(n => n
    .Clear()
    .IsEqualTo("Es igual a")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsNull("Es nulo")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    )
    .ForDate(d => d
    .Clear()
    .IsEqualTo("Es igual que")
    .IsGreaterThan("Es mayor que")
    .IsLessThan("Es menor que")
    .IsLessThanOrEqualTo("Es menor o igual que")
    .IsGreaterThanOrEqualTo("Es mayor o igual que")
    .IsNotEqualTo("No es igual que")
    )
    ))
    .ToolBar(tools =>
    {
        tools.Create().Text("Agregar").HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddPresupuesto();" });
        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a excel");
        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a pdf");


    })

    .Editable(e => e.Mode(GridEditMode.InLine))
    .Events(e=> e.Save("Guardar"))
    .Sortable()
    .Pageable()
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("UsuariosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
    .Excel(excel => excel.FileName("UsuariosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .DataSource(dataSource =>
    dataSource

    .WebApi()
    .ServerOperation(true)
    .Model(model =>
    {
    model.Id(p => p.Id);
    model.Field(p => p.Id).Editable(false);
        @*model.Field(p => p.Accounting).DefaultValue(*@
        //ViewData["defaultaccount"] as ERPMVC.Models.Accounting);
        model.Field(p => p.AccountigId).Editable(true);
        model.Field(p => p.PresupuestoEnero).Editable(true);
        model.Field(p => p.EjecucionEnero).Editable(true);
        model.Field(p => p.PresupuestoFebrero).Editable(true);
        model.Field(p => p.EjecucionFebrero).Editable(true);
        model.Field(p => p.PresupuestoMarzo).Editable(true);
        model.Field(p => p.EjecucionMarzo).Editable(true);
        model.Field(p => p.PresupuestoAbril).Editable(true);
        model.Field(p => p.EjecucionAbril).Editable(true);
        model.Field(p => p.PresupuestoMayo).Editable(true);
        model.Field(p => p.EjecucionMayo).Editable(true);
        model.Field(p => p.PresupuestoJunio).Editable(true);
        model.Field(p => p.EjecucionJunio).Editable(true);
        model.Field(p => p.PresupuestoJulio).Editable(true);
        model.Field(p => p.EjecucionJulio).Editable(true);
        model.Field(p => p.PresupuestoAgosto).Editable(true);
        model.Field(p => p.EjecucionAgosto).Editable(true);
        model.Field(p => p.PresupuestoSeptiembre).Editable(true);
        model.Field(p => p.EjecucionSeptiembre).Editable(true);
        model.Field(p => p.PresupuestoOctubre).Editable(true);
        model.Field(p => p.EjecucionOctubre).Editable(true);
        model.Field(p => p.PresupuestoNoviembre).Editable(true);
        model.Field(p => p.EjecucionNoviembre).Editable(true);
        model.Field(p => p.PresupuestoDiciembre).Editable(true);
        model.Field(p => p.EjecucionDiciembre).Editable(true);
        model.Field(p => p.TotalMontoPresupuesto).Editable(true);
        model.Field(p => p.TotalMontoEjecucion).Editable(true);
        model.Field(p => p.FechaModificacion).Editable(false);
        model.Field(p => p.FechaCreacion).Editable(false);
        model.Field(p => p.UsuarioCreacion).Editable(false);
        model.Field(p => p.UsuarioModificacion).Editable(false);
        model.Field(p => p.CostCenterId).Editable(true);
        model.Field(p => p.PeriodoId).Editable(true);


    })
    .Events(events => events.Error("error_handler"))
    .Read(read => read.Action("Get", "Presupuesto"))
    .Create(create => create.Action("savepresupuesto", "Presupuesto"))
    .Update(update => update.Action("Update", "Presupuesto", new { id = "{0}" }).Type(HttpVerbs.Post))
    .Destroy(update => update.Action("Delete", "Presupuesto", new { id = "{0}" }).Type(HttpVerbs.Post))
    ).Resizable(resize => resize.Columns(true))

    )

    <script>



        function error_handler(e) {
            if (e.xhr.responseText == "Por favor seleccione una cuenta.") {

                $.toast({
                    heading: 'Error',
                    text: '<br/>Por favor seleccione una cuenta!.<br/>',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'error',
                    hideAfter: 30000,
                    stack: 6

                });


            }


        }



        function setToolbarTooltip(btn_cl, btn_tooltip) {
            $("#gridPresupuesto").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }

        function setRowButtonTooltip(btn_cl, btn_tooltip) {
            $("#gridPresupuesto").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }


        function Guardar(e) {
            var pres = e.model;
            var idCentroCosto = $("#CostCenterId").val();
            var idPeriodo = $("#PeriodoId").val();
            pres.set("CostCenterId", idCentroCosto);
            pres.set("PeriodoId", idPeriodo);
        }

        setToolbarTooltip(".k-grid-toolbar a.k-grid-add", "Agregar Usuario");
        setRowButtonTooltip(".k-grid-edit", "Editar Usuario");
        setRowButtonTooltip(".k-grid-delete", "Eliminar Usuario");
        setRowButtonTooltip(".k-grid-update", "Guardar");
        setRowButtonTooltip(".k-grid-cancel", "Cancelar");
    </script>
