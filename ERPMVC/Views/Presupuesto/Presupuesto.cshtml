@model ERPMVC.Models.Presupuesto
@using System.Security.Claims
@{
    ViewData["Title"] = "Presupuesto";
    var cuentas = ViewData["Cuentas"] as IEnumerable<ERPMVC.Models.Accounting>;
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

@*@{ Layout = null;
        var messages = new Dictionary<string, string>() { { "custom", "Ingrese un valor correcto." },
    {"required","Valor requerido" }
    };
        var rules = new Dictionary<string, string>() { { "custom", "customFunction" } };
    }*@


<style>



    .k-checkbox + .k-checkbox-label {
        border-color: #ff6358;
        color: #fff;
        background-color: #fff;
        margin-left: 50px;
    }
</style>

<div class="row">
    <div class="col-md-2">
        <div class="form-group">
            <label asp-for="Id" class="control-label" style="width:100%">Periodo</label>
            <kendo-dropdownlist name="Id" filter="Kendo.Mvc.UI.FilterType.Contains"
                                id="PeriodoId"
                                option-label="Seleccione el periodo"
                                for="Id"
                                on-change="RefreshPresupuesto"
                                datatextfield="Anio"
                                datavaluefield="Id"
                                auto-bind="true"
                                data-val-required="EL Periodo es requerido"
                                style="width: 100%;">
                <datasource type="DataSourceTagHelperType.WebApi">
                    <transport>
                        <read url="@Url.Action("Get", "Periodo")" />
                    </transport>
                </datasource>

            </kendo-dropdownlist>
            <span asp-validation-for="Id" class="text-danger"></span>
        </div>
    </div>

    <div class="col-md-2">
        <div class="form-group">
            <label id="CostCenterLbl">Centro de Costos</label>
            <kendo-dropdownlist name="CostCenterId" filter="Kendo.Mvc.UI.FilterType.Contains" for="CostCenterId"
                                option-label="Seleccione centro de costos"
                                datatextfield="CostCenterName"
                                datavaluefield="CostCenterId"
                                on-change="RefreshPresupuesto"
                                data-val-required="Centro de Costo es requerido"
                                style="width: 100%;">
                <datasource type="DataSourceTagHelperType.WebApi" page-size="9999999">
                    <transport>
                        <read url="@Url.Action("GetActivos", "CostCenter")" />
                    </transport>
                </datasource>
            </kendo-dropdownlist>
            <span id="Span3" class="text-danger"></span>
        </div>
    </div>

    <div class="col-md-2">
        <label id="CostCenterLbl">Mostrar Presupuesto</label>
        <br />
        @(Html.Kendo().CheckBox().Name("checkepresupuesto").Checked(true).HtmlAttributes(new { onchange = "check();" }))
    </div>

    <div class="col-md-2">
        <label id="CostCenterLbl">Mostrar Ejecución</label>
        <br />
        @(Html.Kendo().CheckBox().Name("checkejecucion").Checked(true).HtmlAttributes(new { onchange = "check2();" }))
    </div>





</div>

<script type="text/javascript">

    function GetPeriodo(){
        var periodo = $("#PeriodoId").val();
        return {
            PeriodoId : periodo,
        }
    }


    function RefreshPresupuesto(){
        var grid = $("#gridPresupuesto").getKendoGrid();
        grid.dataSource.read();
    
    }

    function check() {

        var grids = $("#gridPresupuesto").data("kendoGrid");

        if ($("#checkepresupuesto").is(':checked')) {




            grids.showColumn(2);
            grids.showColumn(4);
            grids.showColumn(6);
            grids.showColumn(8);
            grids.showColumn(10);
            grids.showColumn(12);
            grids.showColumn(14);
            grids.showColumn(16);
            grids.showColumn(18);
            grids.showColumn(20);
            grids.showColumn(22);
            grids.showColumn(24);
            grids.showColumn(26);



        }
        else {
            grids.hideColumn(2);
            grids.hideColumn(4);
            grids.hideColumn(6);
            grids.hideColumn(8);
            grids.hideColumn(10);
            grids.hideColumn(12);
            grids.hideColumn(14);
            grids.hideColumn(16);
            grids.hideColumn(18);
            grids.hideColumn(20);
            grids.hideColumn(22);
            grids.hideColumn(24);
            grids.hideColumn(26);


        }
    }


    function check2() {

        var grids = $("#gridPresupuesto").data("kendoGrid");

        if ($("#checkejecucion").is(':checked')) {




            grids.showColumn(3);
            grids.showColumn(5);
            grids.showColumn(7);
            grids.showColumn(9);
            grids.showColumn(11);
            grids.showColumn(13);
            grids.showColumn(15);
            grids.showColumn(17);
            grids.showColumn(19);
            grids.showColumn(21);
            grids.showColumn(23);
            grids.showColumn(25);
            grids.showColumn(27);



        }
        else {
            grids.hideColumn(3);
            grids.hideColumn(5);
            grids.hideColumn(7);
            grids.hideColumn(9);
            grids.hideColumn(11);
            grids.hideColumn(13);
            grids.hideColumn(15);
            grids.hideColumn(17);
            grids.hideColumn(19);
            grids.hideColumn(21);
            grids.hideColumn(23);
            grids.hideColumn(25);
            grids.hideColumn(27);


        }
    }




    function AddPresupuesto() {
        var grids = $("#gridPresupuesto").data("kendoGrid");
        if ($("#PeriodoId").val() === '' || $("#CostCenterId").val() === '') {



            $.toast({
                heading: 'Error',
                text: ' Debe seleccionar un Periodo y Centro de Costo!',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6

            });
            grids.hideColumn(0);


        }

        else {

            grids.showColumn(0);

        }

        Presupuestofijo()
    }


    function Presupuestofijo() {
        if (confirm('¿Desea agregar un monto fijo para todos los meses?')) {

            var noEdit = false;
            var siEdit = true;
            $('#ModalPresupuestoFijo').modal('show');
            $("#Presupuesto").val('');

        }
    }

    function GetPresupuesto() {



        var pre = $("#Presupuesto").val();

        var Eje = $("#Ejecucion").val();

        var dataItem = $("#gridPresupuesto").data("kendoGrid").dataSource.data()[0];
        dataItem.set("PresupuestoEnero", pre);
        dataItem.set("PresupuestoFebrero", pre);
        dataItem.set("PresupuestoMarzo", pre);
        dataItem.set("PresupuestoAbril", pre);
        dataItem.set("PresupuestoMayo", pre);
        dataItem.set("PresupuestoJunio", pre);
        dataItem.set("PresupuestoJulio", pre);
        dataItem.set("PresupuestoAgosto", pre);
        dataItem.set("PresupuestoSeptiembre", pre);
        dataItem.set("PresupuestoOctubre", pre);
        dataItem.set("PresupuestoNoviembre", pre);
        dataItem.set("PresupuestoDiciembre", pre);


        dataItem.set("EjecucionEnero", Eje);
        dataItem.set("EjecucionFebrero", Eje);
        dataItem.set("EjecucionMarzo", Eje);
        dataItem.set("EjecucionAbril", Eje);
        dataItem.set("EjecucionMayo", Eje);
        dataItem.set("EjecucionJunio", Eje);
        dataItem.set("EjecucionJulio", Eje);
        dataItem.set("EjecucionAgosto", Eje);
        dataItem.set("EjecucionSeptiembre", Eje);
        dataItem.set("EjecucionOctubre", Eje);
        dataItem.set("EjecucionNoviembre", Eje);
        dataItem.set("EjecucionDiciembre", Eje);




        var noEdit = false;
        var siEdit = true;


        //dataItem.fields["PresupuestoEnero"].editable = noEdit;
        //dataItem.fields["EjecucionEnero"].editable = noEdit;



        $('#ModalPresupuestoFijo').modal('hide');
    }




    function SoloNumeros(e) {
        key = e.keyCode || e.which;
        tecla = String.fromCharCode(key).toLowerCase();
        letras = "123456789";
        especiales = "8-37-39-46";

        tecla_especial = false
        for (var i in especiales) {
            if (key == especiales[i]) {
                tecla_especial = true;
                break;
            }
        }

        if (letras.indexOf(tecla) == -1 && !tecla_especial) {
            return false;
        }
    }

    $('.decimales').on('input', function decimals(e) {
        this.value = this.value.replace(/[^0-9,.]/g, '').replace(/,/g, '.');
    });



</script>



<div id="ModalPresupuestoFijo" style="padding-left:50%; padding-bottom:50%;" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Presupuesto Fijo</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">

                <div class="col-md-12">
                    <div class="form-group">
                        <form id="frmObservacion" 
                              data-ajax="true"
                              data-ajax-method="post"
                              data-ajax-begin="GetPresupuesto"
                              class="validation-wizard wizard-circle">
                            <label asp-for="PresupuestoEnero" class="control-label" style="width:100%">Presupuesto Enero</label>
                            <input type="text" id="Presupuesto" @*required*@ class="form-control required decimales" min="0" onkeypress="return decimals(event)" style="min-width: 100%" />
                            <input type="text" id="Presupuesto" hidden />
                            <span asp-validation-for="PresupuestoEnero" class="text-danger"></span>


                            @*<label asp-for="EjecucionEnero" class="control-label" style="width:100%">Ejecución Enero</label>
                                <input type="number" id="Ejecucion" required class="form-control required " style="min-width: 100%" />
                                <input type="text" id="Ejecucion" hidden />
                                <span asp-validation-for="EjecucionEnero" class="text-danger"></span>*@

                            <button id="btnobservacion" type="submit" class="form-control btn-miboton">Guardar</button>
                        </form>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>



@(Html.Kendo().Grid<ERPMVC.Models.Presupuesto>
                ()
                .Name("gridPresupuesto")
                .Columns(columns =>
                {
                    
                        if (permisos.HasClaim("Presupuesto.Presupuesto.Editar", "true"))
                        {
                            columns.Command(command =>
                            {
                                if (permisos.HasClaim("Presupuesto.Presupuesto.Editar", "true"))
                                {
                                    command.Edit().Text(" ").IconClass("fa fa-edit").UpdateText(" ").CancelText(" ");
                            }
                            
                                command.Destroy().Text(" ").IconClass("fa fa-trash");
                            
                        }).Width(120)/*.Locked(true)*/.Title("Acciones");
                    }
                    columns.Bound(p => p.Id).Width(100).Visible(false);
                    //columns.Bound(p => p.Accounting).ClientTemplate("#=Accounting.AccountName#").Sortable(false).Width(180).Title("Cuentas");
                    columns.ForeignKey(p => p.AccountigId, (System.Collections.IEnumerable)ViewData["Cuentas"], "AccountId", "AccountName").Title("Cuentas").Width(170);
                    columns.Bound(p => p.PresupuestoEnero).Title("Presupuesto Enero").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionEnero).Title("Ejecución Enero ").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoFebrero).Title("Presupuesto Febrero").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionFebrero).Title("Ejecución Febrero").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoMarzo).Title("Presupuesto Marzo").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionMarzo).Title("Ejecución Marzo").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoAbril).Title("Presupuesto Abril").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionAbril).Title("Ejecución Abril").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoMayo).Title("Presupuesto Mayo").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionMayo).Title("Ejecución Mayo").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoJunio).Title("Presupuesto Junio").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionJunio).Title("Ejecución Junio").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoJulio).Title("Presupuesto Julio").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionJulio).Title("Ejecución Julio").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoAgosto).Title("Presupues toAgosto").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionAgosto).Title("Ejecución Agosto").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoSeptiembre).Title("Presupuesto Septiembre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionSeptiembre).Title("Ejecución Septiembre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoOctubre).Title("Presupuesto Octubre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionOctubre).Title("Ejecución Octubre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoNoviembre).Title("Presupuesto Noviembre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionNoviembre).Title("Ejecución Noviembre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.PresupuestoDiciembre).Title("Presupuesto Diciembre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.EjecucionDiciembre).Title("Ejecución Diciembre").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.TotalMontoPresupuesto).Title("TotalMonto Presupuesto").Format("{0:n2}").Width(200);
                    columns.Bound(p => p.TotalMontoEjecucion).Title("TotalMonto Ejecución").Format("{0:n2}").Width(200);

                })
                //.Events(e => e.Edit("addmaskpassword"))
                .Filterable(f => f.Operators(o => o.ForString(s => s
                .Clear()
                .Contains("Contiene")
                .DoesNotContain("No contiene")
                .EndsWith("Termina con")
                .IsEqualTo("Es igual a")
                .IsNotEqualTo("No es igual a")
                .IsNull("Es nulo")
                .StartsWith("Inicia con")


                )
                .ForNumber(n => n
                .Clear()
                .IsEqualTo("Es igual a")
                .IsGreaterThan("Es mayor que")
                .IsLessThan("Es menor que")
                .IsNull("Es nulo")
                .IsLessThanOrEqualTo("Es menor o igual que")
                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                )
                .ForDate(d => d
                .Clear()
                .IsEqualTo("Es igual que")
                .IsGreaterThan("Es mayor que")
                .IsLessThan("Es menor que")
                .IsLessThanOrEqualTo("Es menor o igual que")
                .IsGreaterThanOrEqualTo("Es mayor o igual que")
                .IsNotEqualTo("No es igual que")
                )
                ))
                .ToolBar(tools =>
                {
                    if (permisos.HasClaim("Presupuesto.Presupuesto.Agregar", "true"))
                    {
                        
                            tools.Create().Text("Agregar").HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddPresupuesto();" });
                    }
                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a excel");
                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a pdf");


                })

                .Editable(e => e.Mode(GridEditMode.InLine))
                .Events(e => e.Save("Guardar"))
                .Sortable()
                .Pageable()
                .Filterable()
                .Scrollable()
                .Pdf(pdf => pdf.FileName("UsuariosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("UsuariosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                .DataSource(dataSource =>
                dataSource

                .WebApi()
                .ServerOperation(true)
                .Model(model =>
                {
                model.Id(p => p.Id);
                model.Field(p => p.Id).Editable(false);
                model.Field(p => p.AccountigId).Editable(true);
                model.Field(p => p.PresupuestoEnero).Editable(true);
                model.Field(p => p.EjecucionEnero).Editable(false);
                model.Field(p => p.PresupuestoFebrero).Editable(true);
                model.Field(p => p.EjecucionFebrero).Editable(false);
                model.Field(p => p.PresupuestoMarzo).Editable(true);
                model.Field(p => p.EjecucionMarzo).Editable(false);
                model.Field(p => p.PresupuestoAbril).Editable(true);
                model.Field(p => p.EjecucionAbril).Editable(false);
                model.Field(p => p.PresupuestoMayo).Editable(true);
                model.Field(p => p.EjecucionMayo).Editable(false);
                model.Field(p => p.PresupuestoJunio).Editable(true);
                model.Field(p => p.EjecucionJunio).Editable(false);
                model.Field(p => p.PresupuestoJulio).Editable(true);
                model.Field(p => p.EjecucionJulio).Editable(false);
                model.Field(p => p.PresupuestoAgosto).Editable(true);
                model.Field(p => p.EjecucionAgosto).Editable(false);
                model.Field(p => p.PresupuestoSeptiembre).Editable(true);
                model.Field(p => p.EjecucionSeptiembre).Editable(false);
                model.Field(p => p.PresupuestoOctubre).Editable(true);
                model.Field(p => p.EjecucionOctubre).Editable(false);
                model.Field(p => p.PresupuestoNoviembre).Editable(true);
                model.Field(p => p.EjecucionNoviembre).Editable(false);
                model.Field(p => p.PresupuestoDiciembre).Editable(true);
                model.Field(p => p.EjecucionDiciembre).Editable(false);
                model.Field(p => p.TotalMontoPresupuesto).Editable(false);
                model.Field(p => p.TotalMontoEjecucion).Editable(false);
                model.Field(p => p.FechaModificacion).Editable(false);
                model.Field(p => p.FechaCreacion).Editable(false);
                model.Field(p => p.UsuarioCreacion).Editable(false);
                model.Field(p => p.UsuarioModificacion).Editable(false);
                model.Field(p => p.CostCenterId).Editable(true);
                model.Field(p => p.PeriodoId).Editable(true);
                })
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("GetPreuspuestosByPeriodo", "Presupuesto").Data("GetPeriodo"))
                .Create(create => create.Action("savepresupuesto", "Presupuesto"))
                .Update(update => update.Action("Update", "Presupuesto", new { id = "{0}" }).Type(HttpVerbs.Post))
                .Destroy(update => update.Action("Delete", "Presupuesto", new { id = "{0}" }).Type(HttpVerbs.Post))
                ).Resizable(resize => resize.Columns(true))

                )

<script>



    function error_handler(e) {
        if (e.xhr.responseText == "Por favor seleccione una cuenta.") {

            $.toast({
                heading: 'Error',
                text: '<br/>Por favor seleccione una cuenta!.<br/>',
                position: 'top-right',
                loaderBg: '#ff6849',
                icon: 'error',
                hideAfter: 30000,
                stack: 6

            });


        }


    }



    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridPresupuesto").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridPresupuesto").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }


    function Guardar(e) {
        var pres = e.model;
        var idCentroCosto = $("#CostCenterId").val();
        var idPeriodo = $("#PeriodoId").val();
        pres.set("CostCenterId", idCentroCosto);
        pres.set("PeriodoId", idPeriodo);
    }

    setToolbarTooltip(".k-grid-toolbar a.k-grid-add", "Agregar Presupuesto");
    setRowButtonTooltip(".k-grid-edit", "Editar Presupuesto");
    setRowButtonTooltip(".k-grid-delete", "Eliminar Presupuesto");
    setRowButtonTooltip(".k-grid-update", "Guardar");
    setRowButtonTooltip(".k-grid-cancel", "Cancelar");
</script>
