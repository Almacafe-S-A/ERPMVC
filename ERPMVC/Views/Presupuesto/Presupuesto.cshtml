@model ERPMVC.Models.Presupuesto

@{
    ViewData["Title"] = "Presupuesto";
    var cuentas = ViewData["Cuentas"] as IEnumerable<ERPMVC.Models.Accounting>;
}


<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <label asp-for="PeriodoId" class="control-label" style="width:100%"></label>
            <kendo-dropdownlist name="UnitOfMeasureId" filter="Kendo.Mvc.UI.FilterType.Contains"
                                id="UnitOfMeasureId"
                                option-label="Seleccione el periodo"
                                for="PeriodoId"
                                datatextfield="Anio"
                                datavaluefield="PeriodoId"
                                auto-bind="true"
                                data-val-required="EL Periodo es requerido"
                                style="width: 100%;">
                <datasource type="DataSourceTagHelperType.WebApi">
                    <transport>
                        <read url="@Url.Action("GetUnitOfMeasureJson", "UnitOfMeasure")" />
                    </transport>
                </datasource>

            </kendo-dropdownlist>
            <span asp-validation-for="PeriodoId" class="text-danger"></span>
        </div>
    </div>
</div>

@(Html.Kendo().Grid<ERPMVC.DTO.PresupuestoDTO>()
                                                          .Name("gridPresupuesto")
                                                          .Columns(columns =>
                                                          {
                                                              columns.Command(command =>
                                                              {
                                                                  //   command.Custom("Ver detalles").Click("Detalles");
                                                                  command.Edit().Text(" ").IconClass("fa fa-edit").UpdateText(" ").CancelText(" ");
                                                                  command.Destroy().Text(" ").IconClass("fa fa-trash");
                                                              }).Width(120).Locked(true).Title("Acciones");
                                                              columns.Bound(p => p.Id).Width(100).Visible(false);
                                                              columns.Bound(p => p.Accounting).ClientTemplate("#=Accounting.AccountName#").Sortable(false).Width(180).Title("Cuentas");
                                                              columns.Bound(p => p.PresupuestoEnero).Title("PresupuestoEnero").Width(200);
                                                              columns.Bound(p => p.EjecucionEnero).Title("EjecucionEnero ").Width(150);
                                                              columns.Bound(p => p.PresupuestoFebrero).Title("PresupuestoFebrero").Width(170);
                                                              columns.Bound(p => p.EjecucionFebrero).Title("EjecucionFebrero").Width(170);
                                                              columns.Bound(p => p.PresupuestoMarzo).Title("PresupuestoMarzo").Width(170);
                                                              columns.Bound(p => p.EjecucionMarzo).Title("EjecucionMarzo").Width(170);
                                                              columns.Bound(p => p.PresupuestoAbril).Title(" ").Width(170);
                                                              columns.Bound(p => p.EjecucionAbril).Title("EjecucionAbril").Width(170);
                                                              columns.Bound(p => p.PresupuestoMayo).Title("PresupuestoMayo").Width(170);
                                                              columns.Bound(p => p.EjecucionMayo).Title("EjecucionMayo").Width(170);
                                                              columns.Bound(p => p.PresupuestoJunio).Title("PresupuestoJunio").Width(170);
                                                              columns.Bound(p => p.EjecucionJunio).Title("EjecucionJunio").Width(170);
                                                              columns.Bound(p => p.PresupuestoJulio).Title("PresupuestoJulio").Width(170);
                                                              columns.Bound(p => p.EjecucionJulio).Title("EjecucionJulio").Width(170);
                                                              columns.Bound(p => p.PresupuestoAgosto).Title("PresupuestoAgosto").Width(170);
                                                              columns.Bound(p => p.EjecucionAgosto).Title("EjecucionAgosto").Width(170);
                                                              columns.Bound(p => p.PresupuestoSeptiembre).Title("PresupuestoSeptiembre").Width(170);
                                                              columns.Bound(p => p.EjecucionSeptiembre).Title("EjecucionSeptiembre").Width(170);
                                                              columns.Bound(p => p.PresupuestoOctubre).Title("PresupuestoOctubre").Width(170);
                                                              columns.Bound(p => p.EjecucionOctubre).Title("EjecucionOctubre").Width(170);
                                                              columns.Bound(p => p.PresupuestoNoviembre).Title("PresupuestoNoviembre").Width(170);
                                                              columns.Bound(p => p.EjecucionNoviembre).Title("EjecucionNoviembre").Width(170);
                                                              columns.Bound(p => p.PresupuestoDiciembre).Title("PresupuestoDiciembre").Width(170);
                                                              columns.Bound(p => p.EjecucionDiciembre).Title("EjecucionDiciembre").Width(170);
                                                              columns.Bound(p => p.TotalMontoPresupuesto).Title("TotalMontoPresupuesto").Width(170);
                                                              columns.Bound(p => p.TotalMontoEjecucion).Title("TotalMontoEjecucion").Width(170);
                                                              //columns.Bound(p => p.FechaCreacion).Title("Creado").Format("{0:dd/MM/yyyy}").Width(150);
                                                              //columns.Bound(p => p.PhoneNumber).Title("Teléfono").Width(150);
                                                              //columns.Bound(p => p.IsEnabled).Width(150).ClientTemplate("#= IsEnabled ? 'SI' : 'NO' #");


                                                          })
                                                              //.Events(e => e.Edit("addmaskpassword"))
                                                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                               .Clear()
                                                                               .Contains("Contiene")
                                                                               .DoesNotContain("No contiene")
                                                                               .EndsWith("Termina con")
                                                                               .IsEqualTo("Es igual a")
                                                                               .IsNotEqualTo("No es igual a")
                                                                               .IsNull("Es nulo")
                                                                               .StartsWith("Inicia con")


                                                                         )
                                                                         .ForNumber(n => n
                                                                           .Clear()
                                                                           .IsEqualTo("Es igual a")
                                                                           .IsGreaterThan("Es mayor que")
                                                                           .IsLessThan("Es menor que")
                                                                           .IsNull("Es nulo")
                                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         )
                                                                         .ForDate(d => d
                                                                         .Clear()
                                                                         .IsEqualTo("Es igual que")
                                                                         .IsGreaterThan("Es mayor que")
                                                                         .IsLessThan("Es menor que")
                                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         .IsNotEqualTo("No es igual que")
                                                                          )
                                                                       ))
                                                          .ToolBar(tools =>
                                                          {
                                                              tools.Create().Text("Agregar");
                                                              tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a excel");
                                                              tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a pdf");


                                                          })

                                                           .Editable(e => e.Mode(GridEditMode.InLine))
                                                           .Sortable()
                                                           .Pageable()
                                                           .Filterable()
                                                           .Scrollable()
                                                           .Pdf(pdf => pdf.FileName("UsuariosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                           .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                             .Excel(excel => excel.FileName("UsuariosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                           .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                           .DataSource(dataSource =>
                                                              dataSource

                                                                .WebApi()
                                                                .ServerOperation(true)
                                                                .Model(model =>
                                                                {
                                                                    model.Id(p => p.Id);
                                                                    model.Field(p => p.Id).Editable(false);
                                                                    model.Field(p => p.Accounting).DefaultValue(
                                                                                   ViewData["defaultaccount"] as ERPMVC.Models.Accounting);
                                                                    model.Field(p => p.PresupuestoEnero).Editable(true);
                                                                    model.Field(p => p.EjecucionEnero).Editable(true);
                                                                    model.Field(p => p.PresupuestoFebrero).Editable(true);
                                                                    model.Field(p => p.EjecucionFebrero).Editable(true);
                                                                    model.Field(p => p.PresupuestoMarzo).Editable(true);
                                                                    model.Field(p => p.EjecucionMarzo).Editable(true);
                                                                    model.Field(p => p.PresupuestoAbril).Editable(true);
                                                                    model.Field(p => p.EjecucionAbril).Editable(true);
                                                                    model.Field(p => p.PresupuestoMayo).Editable(true);
                                                                    model.Field(p => p.EjecucionMayo).Editable(true);
                                                                    model.Field(p => p.PresupuestoJunio).Editable(true);
                                                                    model.Field(p => p.EjecucionJunio).Editable(true);
                                                                    model.Field(p => p.PresupuestoJulio).Editable(true);
                                                                    model.Field(p => p.EjecucionJulio).Editable(true);
                                                                    model.Field(p => p.PresupuestoAgosto).Editable(true);
                                                                    model.Field(p => p.EjecucionAgosto).Editable(true);
                                                                    model.Field(p => p.PresupuestoSeptiembre).Editable(true);
                                                                    model.Field(p => p.EjecucionSeptiembre).Editable(true);
                                                                    model.Field(p => p.PresupuestoOctubre).Editable(true);
                                                                    model.Field(p => p.EjecucionOctubre).Editable(true);
                                                                    model.Field(p => p.PresupuestoNoviembre).Editable(true);
                                                                    model.Field(p => p.EjecucionNoviembre).Editable(true);
                                                                    model.Field(p => p.PresupuestoDiciembre).Editable(true);
                                                                    model.Field(p => p.EjecucionDiciembre).Editable(true);
                                                                    model.Field(p => p.FechaModificacion).Editable(false);
                                                                    model.Field(p => p.FechaCreacion).Editable(false);
                                                                    model.Field(p => p.UsuarioCreacion).Editable(false);
                                                                    model.Field(p => p.UsuarioModificacion).Editable(false);



                                                                })
                                                                .Events(events => events.Error("error_handler"))
                                                                .Read(read => read.Action("Get", "Presupuesto"))
                                                                .Create(create => create.Action("Insert", "Presupuesto"))
                                                                .Update(update => update.Action("Update", "Presupuesto", new { id = "{0}" }))
                                                                .Destroy(destroy => destroy.Action("DeleteUsuario", "Presupuesto", new { id = "{0}" }))
                                                          ).Resizable(resize => resize.Columns(true))
)

<script>



    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridPresupuesto").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridPresupuesto").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    //setToolbarTooltip("k-button-Create","Agregar Usuario");
    setToolbarTooltip(".k-grid-toolbar a.k-grid-add", "Agregar Usuario");
    setRowButtonTooltip(".k-grid-edit", "Editar Usuario");
    setRowButtonTooltip(".k-grid-delete", "Eliminar Usuario");
    setRowButtonTooltip(".k-grid-update", "Guardar");
    setRowButtonTooltip(".k-grid-cancel", "Cancelar");
</script>
