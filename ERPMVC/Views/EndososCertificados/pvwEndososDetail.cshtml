@model ERPMVC.DTO.EndososDTO
@using System.Security.Claims
@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosEndosos"];
}

<script>


    function GetEndososCertificadosId() {
        var subproductname = '', unidaddemedida = '', WareHouseId='';
        if ($("#SubProductId") != null) {
            if ($("#SubProductId").data("kendoDropDownList") != null) {
                subproductname = $("#SubProductId").data("kendoDropDownList").text();
            }
        }

        if ($("#UnitOfMeasureId") != null) {
            if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
            }
        }

        if ($("#WareHouseId") != null) {
            if ($("#WareHouseId").data("kendoDropDownList") != null) {
                WareHouseId = $("#WareHouseId").data("kendoDropDownList").text();
            }
        }

        var displayedData = $("#gridEndososDetail").data().kendoGrid.dataSource.view();
        var id = -999999;
        //debugger;
        if (Number($("#EndososCertificadosLineId").val()) === 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    if (displayedData[i].EndososCertificadosLineId > id)
                        id = displayedData[i].EndososCertificadosLineId;

                }

                id = id + 1;
            }
            else if ($("#SubProductId").val() > 0) {
                id = 1;
            }
        }
        else {
            id = $("#EndososCertificadosLineId").val();
        }

        return {
            'EndososCertificadosLineId': id,
            'EndososCertificadosId':@Model.EndososCertificadosId,
            'UnitOfMeasureId': $("#UnitOfMeasureId").val(),
            'UnitOfMeasureName': unidaddemedida,
            //'ProductId': $("#ProductId").val(),
            //'ProductName': $("#ProductName").val(),
            'SubProductId': $("#SubProductId").val(),
            'SubProductName': subproductname,
            'Price': $("#Price").val(),
            'ValorEndoso': $("#ValorEndoso").val(),
            'Quantity': $("#QuantityEndosoLine").val(),

        }
    }

    function RefreshEndososDetail() {
      //  console.log('Refresca Entrada de mercaderias');
        var grid = $("#gridEndososDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function AddEndososDetalle() {
      //  console.log($("#ProductId").val());
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'
            && $("#CustomerId").val() !== '0' && $("#CustomerId").val() !== ''  ) {

           // llenarsubproduct();
            $("#frmEndososCertificadosLine :input").not('#EndososCertificadosLineId').prop("disabled", false);
            //$("#frmEndososCertificadosLine :input").val('');
            $('#myModalEndososCertificadosLine').modal('show');
        }
        else {
            //$.toast({
            //    heading: 'Validación',
            //    text: "Debe seleccionar un producto y un cliente!",
            //    position: 'top-right',
            //    loaderBg: '#ff6849',
            //    icon: 'error',
            //    hideAfter: 30000,
            //    stack: 6
            //});
             MostrarMensaje("Debe seleccionar un producto y un cliente!", "Error", "Validación", 30000);
        }
    }


    function EditEndososDetalle(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (dataItem.EndososCertificadosId > 0) {
            var subproducto = 0;
            var dataObject = { 'EndososCertificadosLineId': dataItem.EndososCertificadosLineId };
            $.ajax({
                url: '@Url.Action("pvwEndososDetailMant", "EndososCertificadosLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#EndososLineMant").html('');
                    $("#EndososLineMant").html(data);

                    var txt = $(data);
                    var found = $("#SubProductId", txt);
                    subproducto = $(found).val();

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    //$.toast({
                    //    heading: 'Validación',
                    //    text: textStatus + ": " + XMLHttpRequest.responseText,
                    //    position: 'top-right',
                    //    loaderBg: '#ff6849',
                    //    icon: 'error',
                    //    hideAfter: 30000,
                    //    stack: 6
                    //});
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 30000);
                }
            });

            hcustom = $("#CustomerId").val();
            $("#frmEndososCertificadosLine :input").prop("disabled", true);
            //llenarsubproduct();
        //    $("#SubProductId").data("kendoDropDownList").dataSource.read();
            var combobox = $('#SubProductId').getKendoDropDownList();
            combobox.value(subproducto);
            combobox.trigger('change');
        }
        else {
            $("#EndososCertificadosLineId").val(dataItem.EndososCertificadosLineId);
            $("#EndososCertificadosId").val(dataItem.EndososCertificadosId);

           // $("#UnitOfMeasureName").val(dataItem.UnitOfMeasureName);
            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#SubProductId").data("kendoDropDownList").dataSource.read();
            $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);
            $("#QuantityEndosoLine").data("kendoNumericTextBox").value(dataItem.Quantity);

            //$("#SubProductName").val(dataItem.SubProductName);

            var ValorEndoso = $("#ValorEndoso").data("kendoNumericTextBox");
            ValorEndoso.value(dataItem.ValorEndoso);
            ValorEndoso.trigger('change');

            var Price = $("#Price").data("kendoNumericTextBox");
            Price.value(dataItem.Price);
            Price.trigger('change');
        }




        $('#myModalEndososCertificadosLine').modal('show');

    }



    function Delete(e) {
        if (confirm('¿Esta seguro que desea eliminar la fila?')) {
            //debugger;
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                EndososCertificadosLineId: dataItem.EndososCertificadosLineId,
                EndososCertificadosId: dataItem.EndososCertificadosId,
            };

            $.ajax({
                url: '@Url.Action("Delete", "EndososCertificadosLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Validación", 30000);
                }
            });
            var grid = $("#gridEndososDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
        }
    }
</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.EndososCertificadosLine>()
                                                          .Name("gridEndososDetail")
                                                          .Columns(columns =>
                                                          {
                                                              if (Model.EndososCertificadosId!=0)
                                                                  {columns.Command(command =>
                                                              {
                                                                  
                                                                    command.Custom("Liberar").Text(" ").IconClass("fa fa-pencil-alt").Click("ActualizarEndoso");                                                                  
                                                                    command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");

                                                                  

                                                              }).Width(80);}
                                                              columns.Bound(p => p.EndososCertificadosId).Width(150).Visible(false);
                                                              columns.Bound(p => p.EndososCertificadosLineId).Title("Pda").Width(120);
                                                              columns.Bound(p => p.SubProductName).Width(250);
                                                              columns.Bound(p => p.UnitOfMeasureName).Width(150);
                                                              columns.Bound(p => p.UnitOfMeasureId).Visible(false).Title("Unidad de medida").Width(0);
                                                              // columns.Bound(p => p.SubProductId).Hidden().Title("Producto").Width(0);
                                                              columns.Bound(p => p.SubProductId).Title("Producto").Visible(false).Width(150);
                                                              columns.Bound(p => p.Quantity).Width(150);
                                                              columns.Bound(p => p.Price).Width(150).Format("{0:C2}");
                                                              columns.Bound(p => p.ValorEndoso).Width(150).Title("Valor").Format("{0:C2}");

                                                          })
                                                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                               .DoesNotContain("No contiene")
                                                               .EndsWith("Termina con")
                                                               .IsEqualTo("Es igual a")
                                                               .IsNotEqualTo("No es igual a")
                                                               .IsNull("Es nulo")
                                                               .StartsWith("Inicia con")


                                                         )
                                                         .ForNumber(n => n
                                                           .Clear()
                                                           .IsEqualTo("Es igual a")
                                                           .IsGreaterThan("Es mayor que")
                                                           .IsLessThan("Es menor que")
                                                           .IsNull("Es nulo")
                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         )
                                                         .ForDate(d => d
                                                         .Clear()
                                                         .IsEqualTo("Es igual que")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         .IsNotEqualTo("No es igual que")
                                                          )
                                                       ))

                                                           .Editable(e => e.Mode(GridEditMode.PopUp))
                                                            .Sortable()
                                                            .AutoBind(true)
                                                            //.Pageable()
                                                            .Filterable()
                                                            .Scrollable()
                                                            // .ClientDetailTemplateId("template")
                                                            .Pdf(pdf => pdf.FileName("Endosos_Detalle_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                              .Excel(excel => excel.FileName("Endosos_Detalle_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                            //.Events(e=>e.Save("onsave"))
                                                            .DataSource(dataSource =>

                                                           dataSource
                                                           //.Ajax()
                                                           .WebApi()

                                                            .ServerOperation(true)
                                                            .Model(model =>
                                                            {
                                                                model.Id(p => p.EndososCertificadosLineId);
                                                                model.Field(p => p.EndososCertificadosLineId).Editable(false);
                                                                model.Field(p => p.EndososCertificadosId).Editable(false);
                                                                //  model.Field(p => p.ControlPalletsId).Editable(true);

                                                            })
                                                            .Sort(s => s.Add(m => m.EndososCertificadosLineId).Ascending())
                                                            .Events(events =>
                                                            {
                                                                events.Error("error_handler");
                                                                //events.upda("EditHandler");

                                                            })
                                                            .Read(read => read.Action("GetEndososCertificadosLineByEndososCertificadosId", "EndososCertificadosLine").Data("GetEndososCertificadosId"))
                                                      //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                      //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                      //.Destroy(destroy => destroy.Action("Delete", "EndososCertificadosLine").Type(HttpVerbs.Post))
                                                      )
        )

    </div>
</div>


<script>

    function setRowButtonTooltipdet(btn_cl, btn_tooltip) {
        $("#gridEndososDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setRowButtonTooltipdet(".k-grid-Liberar", "Liberar Producto");
    setRowButtonTooltipdet(".k-grid-Eliminar", "Eliminar");
</script>
