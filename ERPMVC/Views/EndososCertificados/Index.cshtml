@using Kendo.Mvc.UI
@using System.Security.Claims

@{
    ViewData["Title"] = "Endosos";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>
    $(document).ready(function () {
        clearsession();
    });

    function clearsession() {
         var dataObject = ["listadoproductosEndosos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddEndosos() {

        clearsession();


         var dataObject = {
             EndososCertificadosId: 0,
             editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwEndosos", "EndososCertificados")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#Endosos").html('');
                $("#Endosos").html(result);

                //RefreshCotizacionesDetail();
                 //$("#btnSaveCotizacion").show();
                $('#myModalEndosos').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditEndosos(e) {
        e.preventDefault();

        clearsession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            EndososCertificadosId: dataItem.EndososCertificadosId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwEndosos", "EndososCertificados")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#Endosos").html('');
                $("#Endosos").html(result);
                var customer = $("#CustomerId").val();
                $("#CustomerId").val(0);
                $("#CustomerId").data("kendoDropDownList").select(customer);
                $("#CustomerId").data("kendoDropDownList").value(customer);
                $("#cbxBuscar").data("kendoDropDownList").value(dataItem.IdCD);
                //$("#TipoEndosoId").data("kendoMultiSelect").value([result]);

                hcustom = customer;
                GetProductTypeIdS();
                $("#SubProductId").data("kendoDropDownList").dataSource.read();
               // var sapProject = $("#CustomerId").data("kendoDropDownList").bind("select", onChange(customer));

                $('#myModalEndosos').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function onChange(CustomerId) {
        $("#CustomerId").val(CustomerId);
    }

    function ImprimirEndosos(e) {
        e.preventDefault();
        debugger;
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '@Url.Action("SFEndosos", "EndososCertificados")/' + dataItem.EndososCertificadosId;
                   var win = window.open(url, '_blank');
                   win.focus();
    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Endosos</h3>

@(Html.Kendo().Grid<ERPMVC.Models.EndososCertificados>()
                                                  .Name("gridEndosos")
                                                  .Columns(columns =>
                                                  {
                                                      if (permisos.HasClaim("Inventarios.Endosos.Cancelacion Endosos", "true"))
                                                      {
                                                          columns.Command(command =>
                                                          {
                                                              command.Custom("Cancelacion").Text(" ").IconClass("fa fa-ban").Click("EditEndosos");
                                                              //command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirEndosos");
                                                              //command.Custom("Editar").Click("EditControlPallet");
                                                              //command.Custom("Imprimir").Click("ImprimirControlPallet");
                                                              //  command.Edit(); command.Destroy();
                                                          }).Title("Acciones").Width(100);
                                                      }
                                                      columns.Bound(p => p.EndososCertificadosId).Title("Id").Width(150);
                                                      columns.Bound(p => p.DocumentDate).Width(220).Format("{0:dd/MM/yyyy}").ClientTemplate("#=kendo.toString(DocumentDate,'dd/MM/yyyy')#").Title("Fecha de Registro");
                                                      //columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Width(150);
                                                      columns.Bound(p => p.IdCD).Hidden(true);
                                                      columns.Bound(p => p.NoCD).Width(210);
                                                      columns.Bound(p => p.ExpirationDate).Format("{0:dd/MM/yyyy}").Width(220);
                                                      columns.Bound(p => p.ProductId).Title("Producto").Width(150).Visible(false);
                                                      columns.Bound(p => p.ProductName).Title("Producto").Width(250);
                                                      //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                                                      columns.Bound(p => p.FechaOtorgado).Format("{0:dd/MM/yyyy}").Width(180);
                                                      columns.Bound(p => p.TasaDeInteres).Format("{0:n2}").Width(170);
                                                      columns.Bound(p => p.ValorEndosar).Format("{0:n2}").Width(170);
                                                      columns.Bound(p => p.Saldo).Format("{0:n2}").Width(150);


                                                  })
                                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                                           .Clear()
                                                           .Contains("Contiene")
                                                           .DoesNotContain("No contiene")
                                                           .EndsWith("Termina con")
                                                           .IsEqualTo("Es igual a")
                                                           .IsNotEqualTo("No es igual a")
                                                           .IsNull("Es nulo")
                                                           .StartsWith("Inicia con")


                                                     )
                                                     .ForNumber(n => n
                                                       .Clear()
                                                       .IsEqualTo("Es igual a")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsNull("Es nulo")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     )
                                                     .ForDate(d => d
                                                     .Clear()
                                                     .IsEqualTo("Es igual que")
                                                     .IsGreaterThan("Es mayor que")
                                                     .IsLessThan("Es menor que")
                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     .IsNotEqualTo("No es igual que")
                                                      )
                                                   ))

                                                  .ToolBar(tools =>
                                                  {
                                                      //tools.Create();
                                                      if (permisos.HasClaim("Inventarios.Endosos.Agregar Endosos", "true"))
                                                      {
                                                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEndosos();" });
                                                      }
                                                      if (permisos.HasClaim("Inventarios.Endosos.Exportar Endosos", "true"))
                                                      {
                                                          tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                          tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                      }

                                                  })
                                                   .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                                    .Sortable()
                                                    .AutoBind(true)
                                                    .Pageable(s => s
                                                    .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                    .Empty("No hay datos.")))
                                                    .Filterable()
                                                    .Scrollable()
                                                    .ClientDetailTemplateId("GridEndososLiberacion")
                                                    .Pdf(pdf => pdf.FileName("Endosos_Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                      .Excel(excel => excel.FileName("Endosos_Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                    //.Events(e=>e.Save("onsave"))
                                                    .DataSource(dataSource =>

                                                   dataSource
                                                   //.Ajax()
                                                   .WebApi()
                                                    .ServerOperation(true)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.EndososCertificadosId);
                                                        model.Field(p => p.EndososCertificadosId).Editable(true);
                                                    })
                                                    .Sort(s => s.Add(m => m.EndososCertificadosId).Descending())
                                                    .Events(events =>
                                                    {
                                                        events.Error("error_handler");
                                                        //events.upda("EditHandler");

                                                    })
                                                    .Read(read => read.Action("Get", "EndososCertificados"))
                                                    .Create(create => create.Action("Insert", "EndososCertificados"))
                                                    .Update(update => update.Action("Update", "EndososCertificados", new { id = "{0}" }))
                                                    .Destroy(destroy => destroy.Action("Delete", "EndososCertificados", new { id = "{0}" }))
                                              )
)

<script id="GridEndososLiberacion" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<ERPMVC.Models.EndososLiberacion>()
                                                                   .Name("grid_#=EndososCertificadosId#")
                                                                   .Columns(columns =>
                                                                   {
                                                                       columns.Bound(o => o.EndososLiberacionId).Title("Id Liberación").Width(80);
                                                                       columns.Bound(o => o.SubProductName).Title("SubProducto").Width(120);
                                                                       columns.Bound(o => o.FechaLiberacion).Title("Fecha de Liberación").Format("{0:dd/MM/yyyy}").Width(120);
                                                           //columns.Bound(o => o.TipoEndoso).Title("Tipo de Endoso").Width(250);
                                                           columns.Bound(o => o.UnitOfMeasureName).Title("Unidad de Medida").Width(120);
                                                                       columns.Bound(o => o.Quantity).Format("{0:n2}").Title("Cantidad Endosada").Width(150);
                                                                       columns.Bound(o => o.Saldo).Format("{0:n2}").Title("Saldo a Liberar").Width(150);
                                                                   })
                                                                   .DataSource(dataSource => dataSource
                                                                      .WebApi()
                                                                      .PageSize(10)
                                                                      .Read(read => read.Action("GetEndososLiberacionByEndososId", "EndososLiberacion", new { EndososCertificadosId = "#=EndososCertificadosId#" }))
                                                                      //.Destroy(destroy => destroy.Action("Delete", "UserRol", new { RoleId = "{0}", UserId = "#=Id#" }))
                                                                      )

                                                                  .Pageable(s => s
                                                                            .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")
                                                                            .Empty("No hay datos.")))
                                                                  //.ToolBar(tools =>
                                                                  //         {
                                                                  //             // tools.Create();
                                                                  //             //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                  //               //                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCheckAccountLine()" });
                                                                  //             tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                                                  //             tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



                                                                  //         })
                                                                  .Sortable()
                                                                  .ToClientTemplate())

</script>

<div id="ConditionView">
</div>

<div id="CustomerConditionView">
</div>

<script>

    // Import DejaVu Sans font for embedding



    // NOTE: Only required if the Kendo UI stylesheets are loaded

    // from a different origin, e.g. cdn.kendostatic.com

    kendo.pdf.defineFont({

        "DejaVu Sans": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans.ttf",

        "DejaVu Sans|Bold": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Bold.ttf",

        "DejaVu Sans|Bold|Italic": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf",

        "DejaVu Sans|Italic": "http://cdn.kendostatic.com/2014.3.1314/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf"

    });

</script>
<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridEndosos").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridEndosos").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }




    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Cancelacion", "Cancelación");

</script>

<div id="Endosos">
    @await Html.PartialAsync("pvwEndosos", new ERPMVC.DTO.EndososDTO { EndososCertificadosId = 0, DocumentDate = DateTime.Now, ExpirationDate = DateTime.Now })
</div>




