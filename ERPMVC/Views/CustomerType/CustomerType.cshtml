@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "CustomerType";

}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

</script>

<h3 class="text-themecolor">CustomerType</h3>

@(Html.Kendo().Grid<ERPMVC.Models.CustomerType>
              ()

                .Name("gridCustomerType")

                .Columns(columns =>
                {
                    columns.Bound(p => p.CustomerTypeId).Width(100);
                    columns.Bound(p => p.CustomerTypeName).Width(170);
                    columns.Bound(p => p.Description).Width(200);

                    //columns.Bound(p => p.UsuarioCreacion).Width(170);
                    //columns.Bound(p => p.UsuarioModificacion).Width(190);
                    columns.Command(command =>
                    {
                        //command.Custom("Ver detalles").Click("Detalles");
                        command.Edit(); command.Destroy();
                    }).Width(250);

                })
                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                       .Clear()
                                       .Contains("Contiene")
                                       .DoesNotContain("No contiene")
                                       .EndsWith("Termina con")
                                       .IsEqualTo("Es igual a")
                                       .IsNotEqualTo("No es igual a")
                                       .IsNull("Es nulo")
                                       .StartsWith("Inicia con")


                                 )
                                 .ForNumber(n => n
                                   .Clear()
                                   .IsEqualTo("Es igual a")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsNull("Es nulo")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 )
                                 .ForDate(d => d
                                 .Clear()
                                 .IsEqualTo("Es igual que")
                                 .IsGreaterThan("Es mayor que")
                                 .IsLessThan("Es menor que")
                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 .IsNotEqualTo("No es igual que")
                                  )
                               ))

                .ToolBar(tools =>
                {

                    tools.Create();
                    tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                    tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });



                })
                .Editable(e => e.Mode(GridEditMode.PopUp))
                .Sortable()
                .Pageable()
                .Filterable()
                .Scrollable()
                .Pdf(pdf => pdf.FileName("CustomerTypeReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("CustomerTypeReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                .DataSource(dataSource =>
                dataSource
                .WebApi()

                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.CustomerTypeId);
                    model.Field(p => p.CustomerTypeId).Editable(false);


                })
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("Get", "CustomerType"))
                .Create(create => create.Action("Insert", "CustomerType").Type(HttpVerbs.Post))
                .Update(update => update.Action("Update", "CustomerType").Type(HttpVerbs.Put))
                .Destroy(destroy => destroy.Action("Delete", "CustomerType", new { CustomerTypeId = "{0}" }).Type(HttpVerbs.Delete))

                )
                .Events(e =>
                {
                    e.Save("onsave");

                })
)
