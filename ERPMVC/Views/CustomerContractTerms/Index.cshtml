@using Kendo.Mvc.UI
@using System.Security.Claims

@{
    ViewData["Title"] = "Clausulas";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>



    function AddCustomerContractTerms() {
       // $('#ModalCustomerContractTerms').find(':input').not(':submit').val('');

       // $('#ModalCustomerContractTerms').modal('show');
        //$("#CustomerContractTermsId").val('0');

        var dataObject = {
             CustomerContractTermsId: 0,
                editar : 1
            };
            $.ajax({
                url: '@Url.Action("pvwCustomerContractTerms", "CustomerContractTerms")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCustomerContractTerms").html('');
                    $("#NumCustomerContractTerms").html(result);
                    //$("#btnCAI").hide();
                    $('#ModalCustomerContractTerms').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });



        //var validator = $("#frmCustomerContractTerms").data("kendoValidator");
        //validator.hideMessages();




      }


    function EditCustomerContractTerms(e) {
        debugger;
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 Id: dataItem.Id,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwCustomerContractTerms", "CustomerContractTerms")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCustomerContractTerms").html('');
                    $("#NumCustomerContractTerms").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalCustomerContractTerms').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }



</script>

<h3 class="text-themecolor">Clausulas</h3>
@(Html.Kendo().Grid<ERPMVC.Models.CustomerContractTerms>
                                ()
                                .Name("gridNumeracionCustomerContractTerms")
                                .Columns(columns =>
                                {
                                    if (true || User.HasClaim("Clientes.Clausulas", "true"))
                                    {
                                        columns.Command(command =>
                                        {
                                            //command.Custom("Ver detalles").Click("Detalles");
                                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCustomerContractTerms");

                                            //command.Custom("Editar").Click("EditDimensions");
                                            //  command.Destroy();
                                        }).Title("Acciones").Width(80);
                                    }
                                    columns.Bound(p => p.Id).Title("Código").Width(80);
                                    columns.Bound(p => p.Position).Title("No").Width(80);
                                    columns.Bound(p => p.TermTitle).Title("Clausula").Width(200);
                                    columns.Bound(p => p.Servicio).Title("Servicio").Width(200)
                                                .Filterable(filterable => filterable.UI("ServicioFilter"));
                                    columns.Bound(p => p.TypeInvoiceName).Title("Tipo de Facturación").Width(200)
                                                .Filterable(filterable => filterable.UI("TipofacturacionFilter"));
                                    //columns.Bound(p => p.UsuarioCreacion).Width(250);
                                    //columns.Bound(p => p.UsuarioModificacion).Width(250);
                                    //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(450);
                                    //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(450);


                                })
                                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                                           .Clear()
                                                           .Contains("Contiene")
                                                           .DoesNotContain("No contiene")
                                                           .EndsWith("Termina con")
                                                           .IsEqualTo("Es igual a")
                                                           .IsNotEqualTo("No es igual a")
                                                           .IsNull("Es nulo")
                                                           .StartsWith("Inicia con")


                                                     )
                                                     .ForNumber(n => n
                                                       .Clear()
                                                       .IsEqualTo("Es igual a")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsNull("Es nulo")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     )
                                                     .ForDate(d => d
                                                     .Clear()
                                                     .IsEqualTo("Es igual que")
                                                     .IsGreaterThan("Es mayor que")
                                                     .IsLessThan("Es menor que")
                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     .IsNotEqualTo("No es igual que")
                                                      )
                                                   ).Extra(false))
                                .ToolBar(tools =>
                                {
                                    // tools.Create();
                                    if (permisos.HasClaim("Clientes.Clausulas", "true"))
                                    {
                                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCustomerContractTerms()" });
                                    }
                                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                })
                                .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                                .Sortable()
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                .Pdf(pdf => pdf.FileName("CustomerContractTermsReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                    .Excel(excel => excel.FileName("CustomerContractTermsReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                .DataSource(dataSource =>
                                    dataSource
                                    .WebApi()

                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.Id);
                                        model.Field(p => p.TermTitle).Editable(false);
                                        model.Field(p => p.Term).Editable(true);
                                        //model.Field(p => p.BranchId).Editable(true);
                                        //model.Field(p => p.IdEstado).Editable(true);
                                        // model.Field(p => p.).Editable(true);
                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Read(read => read.Action("Get", "CustomerContractTerms"))
                                    .Create(create => create.Action("Insert", "CustomerContractTerms").Type(HttpVerbs.Post))
                                    .Update(update => update.Action("Update", "CustomerContractTerms", new { Id = "{0}" }).Type(HttpVerbs.Put))
                                //.Destroy(destroy => destroy.Action("Delete", "Dimensions", new { Num = "{1}" }).Type(HttpVerbs.Delete))

                                )
)

<div id="NumCustomerContractTerms">
    @await Html.PartialAsync("pvwCustomerContractTerms", new ERPMVC.Models.CustomerContractTerms { Id = 0 })
</div>

<script>

    function TipofacturacionFilter(element) {
            element.kendoDropDownList({
                dataSource: {
                    transport: {
                        read: "@Url.Action("GetElementoByIdConfiguracionJson", "ElementoConfiguracion" , new { Id= 32 })"
                    },
                    type:"webapi",
                },
                optionLabel: "--Seleccione Tipo Facturacion--",
                dataTextField: "Nombre",
                dataValueField: "Nombre",
            });
        }

    function ServicioFilter(element) {
            element.kendoDropDownList({
                dataSource: {
                    transport: {
                        read: "@Url.Action("GetProductJson", "Common")", 
                        
                    },
                    datatype: "json"
                },
                optionLabel: "--Selecione Servicio--",
                dataTextField: "ProductName",
                dataValueField: "ProductName",


            });
        }

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionCustomerContractTerms").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionCustomerContractTerms").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");

</script>