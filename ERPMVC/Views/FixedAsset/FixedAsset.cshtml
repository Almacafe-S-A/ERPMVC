@using Kendo.Mvc.UI
@{
	ViewData["Title"] = "Activos Fijos";
}
<script>
    function OnSave() {
        console.log("Salvando");
    }

    function AddFixedAsset() {
        var validator = $("#frmFixedAsset").data("kendoValidator");
        validator.hideMessages();
        $("#btnFixedAsset").show();
        $("#btnFixedAsset").prop("disabled", false);
		$('#ModalFixedAsset').find(':input').not(':submit').val('');
		$('#FixedAssetGroupId').data('kendoDropDownList').value(-1);
		$('#BranchId').data('kendoDropDownList').value(-1);
		//$('#WarehouseId').data('kendoDropDownList').value(-1);
		$('#CenterCostId').data('kendoDropDownList').value(-1);
        $('#IdEstado').data('kendoDropDownList').value(-1);
        $('#Cost').data('kendoNumericTextBox').value(0);
		var grid = $("#gridDepreciation").data("kendoGrid");
		var newDataSource = new kendo.data.DataSource({
			data: []
		});
		grid.setDataSource(newDataSource);
		$('#ModalFixedAsset').modal('show');
        $('#FixedAssetId').val('0');
        RefrescarGrid();

	}



    function EditFixedAsset(e) {
        debugger;
		e.preventDefault();
		var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
		var dataObject = {
			FixedAssetId: dataItem.FixedAssetId,
			editar: 0
		};

		$.ajax({
			url: '@Url.Action("pvwFixedAsset", "FixedAsset")',
			method: 'POST',
			datatype: "json",
			contentType: 'application/json',
			async: false,
			data: JSON.stringify(dataObject),
			success: function (result) {
				$("#numFixedAsset").html('');
				$("#numFixedAsset").html(result);
				$("#ModalFixedAsset").modal('show');
			},
			error: function (xhr, status, error) {
				var errorMessage = xhr.status + ': ' + xhr.statusText
				alert('Error - ' + errorMessage);
			}
        });
        RefrescarGrid();
        
	}

	function RefrescarGrid() {
		var grid = $("#gridFixedAsset").getKendoGrid();
		grid.dataSource.read();
    }

    function ShowFixedAssetsToDepreciateReport() {
                //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location.href = '@Url.Action("SFFixedAssetsToDepreciate", "FixedAsset")';
    }

</script>
<h3 class="text-themecolor">Activos Fijos</h3>

@* Telerik *@
@(Html.Kendo().Grid<ERPMVC.Models.FixedAsset>()
                        .Name("gridFixedAsset")
                        .Columns(c =>
                        {
                            c.Command(cmd =>
                            {
                                cmd.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditFixedAsset");
                                cmd.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                            }).Title("Acciones").Width(110);
                            c.Bound(p => p.FixedAssetId).Width(135);
                            c.Bound(p => p.FixedAssetName).Width(150).Title("Nombre");
                            c.Bound(p => p.FixedAssetDescription).Width(160).Title("Descripción");
                            c.Bound(p => p.AssetDate).ClientTemplate("#= kendo.toString(AssetDate, \"dd/MM/yyyy\") #") .Width(210).Title("Fecha de Adquisición");
                            //c.Bound(p => p.FixedAssetCode).Width(130).Title("Código");
                            c.Bound(p => p.BranchName).Width(130).Title("Sucursal");
                            c.Bound(p => p.FixedActiveLife).Width(110).Title("Vida Útil");
                            c.Bound(p => p.ActiveTotalCost).Width(190).Title("Costo Total Activo").Format("{0:C}");
                            c.Bound(p => p.AccumulatedDepreciation).Width(230).Title("Depreciacion Acumulada").Format("{0:C}");
                            c.Bound(p => p.NetValue).Width(150).Title("Valor Neto").Format("{0:C}");
                            //c.Bound(p => p.WarehouseName).Width(130).Title("Bodega");
                            c.Bound(p => p.CenterCostName).Width(150).Title("Centro Costo");
                            c.Bound(p => p.Amount).Width(210).Title("Valor Adquisición").Format("{0:C}");
                            //c.Bound(p => p.Cost).Width(230).Title("Costos Adicionales").Format("{0:C}");
                            c.Bound(p => p.ResidualValue).Width(190).Title("Valor Residual").Format("{0:C}");
                            c.Bound(p => p.ResidualValuePercent).Width(230).Title("Valor Residual Porcentaje").Format("{0:C}");
                            c.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy HH:mm:ss}").Width(100).Hidden();
                        })
                        .Filterable(f => f.Operators(o => o.ForString(s => s.Clear()
                                                                            .Contains("Contiene")
                                                                            .DoesNotContain("No contiene")
                                                                            .EndsWith("Termina con")
                                                                            .IsEqualTo("Es igual a")
                                                                            .IsNull("Es nulo")
                                                                            .StartsWith("Inicia con"))
                                                                            .ForNumber(n => n.Clear()
                                                                                             .IsEqualTo("Es igual a")
                                                                                             .IsGreaterThan("Es mayor que")
                                                                                             .IsNull("Es nulo")
                                                                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                             .IsGreaterThanOrEqualTo("Es mayor o igual que"))
                                                                            .ForDate(d => d.Clear()
                                                                                           .IsEqualTo("Es igual a")
                                                                                           .IsGreaterThan("Es mayor que")
                                                                                           .IsLessThan("Es menor que")
                                                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                                           .IsNotEqualTo("No es igual que"))
                                                    )
                        )
                        .ToolBar(tools =>
                        {
                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddFixedAsset()" });
                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                            tools.Custom().Text("Inventario de activos por depreciar")
                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "ShowFixedAssetsToDepreciateReport();" });
                        })
                        .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                        .Sortable()
                        .Pageable(s => s
                        .Messages(m => m.Display("Elementos mostrados {0} - {1} de {2}")))
                        .Filterable()
                        .Scrollable()
                        .Pdf(pdf => pdf.FileName("Activos-Fijos-Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_" +
                            DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" +
                            DateTime.Now.Second + ".pdf")
                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                            .Excel(excel => excel.FileName("Activos-Fijos-Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                        .DataSource(ds => ds
                        .WebApi()
                        .ServerOperation(true)
                        .Model(m =>
                        {
                            m.Id(p => p.FixedAssetId);
                            m.Field(p => p.FixedAssetId).Editable(false);
                        })
                        .Sort(s => s.Add(m => m.FechaCreacion).Descending())
                        .Events(e => e.Error("error_handler"))
                        .Read(r => r.Action("Get", "FixedAsset"))
                        .Create(c => c.Action("Insert", "FixedAsset").Type(HttpVerbs.Post))
                        .Update(u => u.Action("Update", "FixedAsset").Type(HttpVerbs.Post))
                        .Destroy(d => d.Action("Delete", "FixedAsset", new { FixedAssetId = "{0}" }).Type(HttpVerbs.Delete))
                    )
                    .Events(e =>
                    {
                        e.Save("OnSave");
                    })
                    .Resizable(conf => conf.Columns(true))
)



<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridFixedAsset").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridFixedAsset").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }



    setToolbarTooltip(".k-grid-toolbar a.k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-delete", "Dar de baja");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");

</script>


<div id="numFixedAsset">
	@await Html.PartialAsync("pvwFixedAsset", new ERPMVC.DTO.FixedAssetDTO { FixedAssetId = 0,  AssetDate = DateTime.Now })
</div>