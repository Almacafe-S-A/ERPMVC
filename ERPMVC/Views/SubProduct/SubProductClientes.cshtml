@using Kendo.Mvc.UI

@{
    ViewData["Title"] = " Productos de clientes";
    bool permisoAgregar, permisoEditar, permisoEliminar;
    permisoAgregar = (bool)ViewData["permisoAgregar"];
    permisoEditar = (bool)ViewData["permisoEditar"];
    permisoEliminar = (bool)ViewData["permisoEliminar"];
}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddSubProduct() {
        var dataObject = {
                 SubproductId: 0,
                 ProductTypeId: '2',
                 IsEnable: false,
                TituloVentana: 'Productos de clientes',
                TipoProducto: 'Clientes',
                editar : 1
            };

            $.ajax({
                url: '@Url.Action("pvwAddSubProduct", "SubProduct")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                   // console.log('success', result)
                    $("#numSubProduct").html('');
                    $("#numSubProduct").html(result);

                    //$("#btnCAI").hide();
                    $('#ModalSubProduct').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }


         function EditSubProduct(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 SubproductId: dataItem.SubproductId,
                 ProductTypeId: 2,
                 IsEnable: false,
                 TituloVentana: 'Productos de clientes',
                 TipoProducto: 'Clientes',
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddSubProduct", "SubProduct")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                   // console.log('success', result)
                    $("#numSubProduct").html('');
                    $("#numSubProduct").html(result);

                    //$("#btnCAI").hide();
                    $('#ModalSubProduct').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }


</script>

<h3 class="text-themecolor">Productos de clientes</h3>

@(Html.Kendo().Grid<ERPMVC.Models.SubProduct>
                  ().Name("gridSubProduct")

                    .Columns(columns =>
                    {
                        if (permisoEditar == true || permisoEliminar == true)
                        {
                            columns.Command(command =>
                            {
                                //command.Custom("Ver detalles").Click("Detalles");
                                //command.Custom("Editar").Click("EditSubProduct");
                                //command.Destroy().Text("Eliminar");
                                if (permisoEditar)
                                {
                                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditSubProduct");
                                }
                                if (permisoEliminar)
                                {
                                    command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                                }
                            }).Width(250).Title("Acciones").Width(150);
                        }
                        columns.Bound(p => p.SubproductId).Title("Id").Width(100);
                        columns.Bound(p => p.ProductName).Title("Descripción del Producto").Width(250);
                        columns.Bound(p => p.ProductCode).Title("Código Bascula").Width(170);
                        //columns.Bound(p => p.Description).Title("Observación").Width(200);
                        //columns.Bound(p => p.Balance).Width(200);
                        //columns.Bound(p => p.BagBalance).Width(200);
                        columns.Bound(p => p.UnitOfMeasureName).Width(200);
                        // columns.Bound(p => p.ProductTypeName).Width(250);
                        columns.Bound(p => p.Merma).Format("{0:n2}%").Width(150); //format = "#.## '%'"
                        columns.Bound(p => p.Estado).Width(150);
                    })


                    .ToolBar(tools =>
                    {

                        //tools.Create();
                        if (permisoAgregar)
                        {
                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddSubProduct()" });
                        }
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("SubProductReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("SubProductReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.SubproductId);
                        model.Field(p => p.SubproductId).Editable(false);


                    })
                    .Events(events => events.Error("error"))
                    .Read(read => read.Action("GetSubProductoByTipoGrid", "SubProduct").Data("ProductType"))
                   //.Create(create => create.Action("Insert", "Product").Type(HttpVerbs.Post))
                   //.Update(update => update.Action("Update", "Product").Type(HttpVerbs.Post))
                   .Destroy(destroy => destroy.Action("Delete", "SubProduct"))
                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)

<script>
    function ProductType() {
        return { ProductTypeId: 2 };
    }



        function setToolbarTooltip(btn_cl, btn_tooltip) {
            $("#gridSubProduct").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }

    function error(e) {
        var error = e.xhr.responseText;
        if (error.length > 100) {
            error = "Server Error";
        }
        $.toast({
            heading: 'Error',
            text: error,
            position: 'top-right',
            loaderBg: '#ff6849',
            icon: 'error',
            hideAfter: 30000,
            stack: 6
        });

       
        var grid = $("#gridSubProduct").getKendoGrid();
        grid.refresh();
        grid.dataSource.read();
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridSubProduct").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }



        setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
        setRowButtonTooltip(".k-grid-Editar", "Editar registro");
        setRowButtonTooltip(".k-grid-delete", "Eliminar registro");

</script>


<div id="numSubProduct">
    @await Html.PartialAsync("pvwAddSubProduct", new ERPMVC.DTO.SubProductDTO { SubproductId = 0,  ProductTypeId= 2,
    IsEnable= false, TituloVentana="Productos Clientes", TipoProducto="Clientes"
})
</div>

