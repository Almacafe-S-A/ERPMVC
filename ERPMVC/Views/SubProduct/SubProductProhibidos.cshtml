@using Kendo.Mvc.UI
@using System.Security.Claims

@{
    ViewData["Title"] = "Productos Prohibidos";
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisos"];
}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddSubProduct() {
         var dataObject = {
                 SubproductId: 0,
             ProductTypeId: 3,
                 IsEnable: false,
                 TituloVentana: 'Productos prohibidos',
             TipoProducto: 'Lista Prohibida',
                 editar : 1
            };

            $.ajax({
                url: '@Url.Action("pvwAddSubProduct", "SubProduct")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                   // console.log('success', result)
                    $("#numSubProduct").html('');
                    $("#numSubProduct").html(result);

                    //$("#btnCAI").hide();
                    $('#ModalSubProduct').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }


         function EditSubProduct(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 SubproductId: dataItem.SubproductId,
                 ProductTypeId: 3,
                 IsEnable: false,
                 TituloVentana: 'Productos prohibidos',
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddSubProduct", "SubProduct")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                   // console.log('success', result)
                    $("#numSubProduct").html('');
                    $("#numSubProduct").html(result);

                    //$("#btnCAI").hide();
                    $('#ModalSubProduct').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }


</script>

<h3 class="text-themecolor">Productos Prohibidos</h3>

@(Html.Kendo().Grid<ERPMVC.Models.SubProduct>
                                  ()

                                    .Name("gridSubProduct")

                                    .Columns(columns =>
                                    {
                                        if (permisos.HasClaim("Monitoreo.Productos Prohibidos.Editar", "true")
                                        || permisos.HasClaim("Monitoreo.Productos Prohibidos.Eliminar", "true"))
                                        {
                                            columns.Command(command =>
                                            {
                                                //command.Custom("Ver detalles").Click("Detalles");
                                                //command.Custom("Editar").Click("EditSubProduct");
                                                //command.Destroy().Text("Eliminar");
                                                if (permisos.HasClaim("Monitoreo.Productos Prohibidos.Editar", "true"))
                                                {
                                                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditSubProduct");
                                                }
                                                if (permisos.HasClaim("Monitoreo.Productos Prohibidos.Eliminar", "true"))
                                                {
                                                    command.Destroy().Text("Eliminar").IconClass("fa fa-trash-alt").Text(" ");
                                                }
                                            }).Title("Acciones").Width(100);
                                        }
                                        columns.Bound(p => p.SubproductId).Width(150);
                                        columns.Bound(p => p.ProductName).Title("Producto prohibido").Width(170);
                                        columns.Bound(p => p.ProductCode).Title("Código prohibido").Width(170);
                                        // columns.Bound(p => p.Description).Width(200);
                                        //columns.Bound(p => p.Balance).Width(200);
                                        //columns.Bound(p => p.BagBalance).Width(200);
                                        // columns.Bound(p => p.UnitOfMeasureId).Width(150);
                                        columns.Bound(p => p.TipoProhibidoName).Title("Tipo de Prohibicion").Width(150);
                                        columns.Bound(p => p.Estado).Width(150);
                                    })


                                    .ToolBar(tools =>
                                    {

                                        //tools.Create();
                                        if (permisos.HasClaim("Monitoreo.Productos Prohibidos.Agregar", "true"))
                                        {
                                            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                                                      .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddSubProduct()" });

                                        }
                                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                    })
                                    .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .Pageable()
                                    .Filterable()
                                    .Scrollable()
                                    .Pdf(pdf => pdf.FileName("ProductoProhibido" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                    .Excel(excel => excel.FileName("ProductoProhibido_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    .DataSource(dataSource =>
                                    dataSource
                                    .WebApi()

                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.SubproductId);
                                        model.Field(p => p.SubproductId).Editable(false);


                                    })
                                    .Events(events => events.Error("error"))
                                    .Read(read => read.Action("GetSubProductoByTipoGrid", "SubProduct").Data("ProductType"))

                                   //.Create(create => create.Action("Insert", "Product").Type(HttpVerbs.Post))
                                   //.Update(update => update.Action("Update", "Product").Type(HttpVerbs.Post))
                                   .Destroy(destroy => destroy.Action("Delete", "SubProduct"))
                                    )
                                    .Events(e =>
                                    {
                                        e.Save("onsave");

                                    })
)

<script>
    function ProductType() {
        return { ProductTypeId: 3 }
    }

    // A $( document ).ready() block.
    $(document).ready(function () {
        $("#ProductTypeId").kendoDropDownList({
            value: "3"
        });
    });

    function error(e) {
        var error = e.xhr.responseText;
        if (error.length > 100) {
            error = "Server Error";
        }
        $.toast({
            heading: 'Error',
            text: error,
            position: 'top-right',
            loaderBg: '#ff6849',
            icon: 'error',
            hideAfter: 30000,
            stack: 6
        });


        var grid = $("#gridSubProduct").getKendoGrid();
        grid.refresh();
        grid.dataSource.read();
    }


</script>


<div id="numSubProduct">
    @await Html.PartialAsync("pvwAddSubProduct", new ERPMVC.DTO.SubProductDTO { SubproductId = 0, ProductTypeId = 3, IsEnable = false, TituloVentana = "Producto Prohibidos", TipoProducto = "Lista Prohibida" })
</div>


<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridSubProduct").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridSubProduct").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>