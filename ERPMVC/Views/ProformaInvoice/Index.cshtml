
<script>

    function ClearSession() {
         var dataObject = ["listadoproductosproformainvoice"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddCotizacion() {
       // $('#myModalSalesOrder').find(':input').not(':submit').val('');
         //$('#myModalSalesOrder').modal('show');
       
        ClearSession();

         var dataObject = {
            SalesOrderId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwProformaInvoice","ProformaInvoice")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

                RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").show();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditProforma(e) {
        e.preventDefault();

        ClearSession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            ProformaId: dataItem.ProformaId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwProformaInvoice", "ProformaInvoice")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

              //  RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").hide();
                 $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function ImprimirProforma(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var url = '@Url.Action("SFProformaInvoice", "ProformaInvoice")/' + dataItem.ProformaId;
        var win = window.open(url, '_blank');
        win.focus();

          

    }

    function GenerarFactura(e) {
        if (confirm('Esta seguro de generar una factura?')) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                ProformaId: dataItem.ProformaId,
                editar: 0
            };

            $.ajax({
                url: '@Url.Action("GenerarFactura", "ProformaInvoice")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#salesorder").html('');
                    $("#salesorder").html(result);

                    //  RefreshCotizacionesDetail();
                    $("#btnSaveCotizacion").hide();
                    $('#myModalSalesOrder').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
        }
    }



    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Facturas proforma</h3>

@(Html.Kendo().Grid<ERPMVC.Models.ProformaInvoice>()
                          .Name("gridCotizaciones")
                          .Columns(columns =>
                          {
                              columns.Command(command =>
                              {
                                  command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditProforma");
                                  command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirProforma");
                                  command.Custom("GenerarFactura").Text(" ").IconClass("fa fa-file-import").Click("GenerarFactura");
                                                
                                  //  command.Edit(); command.Destroy();
                              }).Width(250);

                              columns.Bound(p => p.ProformaId).Title("Id").Width(150);

                              columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Title("Fecha proforma").Width(180);
                              columns.Bound(p => p.CustomerName).Title("Cliente").Width(150);
                              columns.Bound(p => p.CustomerRefNumber).Title("Codigo referencia").Width(150);
                              columns.Bound(p => p.Discount).Format("{0:n2}").Title("Descuentos").Width(150);
                              //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                              columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                              columns.Bound(p => p.Freight).Title("Flete").Format("{0:n2}").Width(150);
                              columns.Bound(p => p.SubTotal).Title("Sub Total").Format("{0:n2}").Width(150);
                              columns.Bound(p => p.Tax).Title("Total Impuesto").Format("{0:n2}").Width(150);
                              columns.Bound(p => p.Total).Title("Total").Format("{0:n2}").Width(150);
                          })
                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                       .Clear()
                                       .Contains("Contiene")
                                       .DoesNotContain("No contiene")
                                       .EndsWith("Termina con")
                                       .IsEqualTo("Es igual a")
                                       .IsNotEqualTo("No es igual a")
                                       .IsNull("Es nulo")
                                       .StartsWith("Inicia con")


                                 )
                                 .ForNumber(n => n
                                   .Clear()
                                   .IsEqualTo("Es igual a")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsNull("Es nulo")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 )
                                 .ForDate(d => d
                                 .Clear()
                                 .IsEqualTo("Es igual que")
                                 .IsGreaterThan("Es mayor que")
                                 .IsLessThan("Es menor que")
                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 .IsNotEqualTo("No es igual que")
                                  )
                               ))
                          .ToolBar(tools =>
                          {
                              // tools.Create();
                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                             .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacion();" });

                              tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                              tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                          })
                           .Editable(e => e.Mode(GridEditMode.PopUp))
                            .Sortable()
                            .AutoBind(true)
                            .Pageable()
                            .Filterable()
                            .Scrollable()
                            // .ClientDetailTemplateId("template")
                            .Pdf(pdf => pdf.FileName("ProformaInvoiceReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                              .Excel(excel => excel.FileName("ProformaInvoiceReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                            //.Events(e=>e.Save("onsave"))
                            .DataSource(dataSource =>

                           dataSource
                           //.Ajax()
                           .WebApi()
                            .ServerOperation(true)
                            .Model(model =>
                            {
                                model.Id(p => p.ProductId);
                                model.Field(p => p.ProductId).Editable(true);
                                model.Field(p => p.ProductId).Editable(true);


                            })
                            .Events(events =>
                            {
                                events.Error("error_handler");
                                //events.upda("EditHandler");

                            })
                            .Read(read => read.Action("GetProformaInvoice", "ProformaInvoice") )
                            .Create(create => create.Action("Insert", "ProformaInvoice"))
                            .Update(update => update.Action("Update", "ProformaInvoice", new { id = "{0}" }))
                            .Destroy(destroy => destroy.Action("Delete", "ProformaInvoice", new { id = "{0}" }))
                      )
)

<div id="salesorder">
    @await Html.PartialAsync("pvwProformaInvoice", new ERPMVC.DTO.ProformaInvoiceDTO { ProformaId = 0, OrderDate = DateTime.Now,  DeliveryDate = DateTime.Now , ExpirationDate =DateTime.Now.AddDays(30) })
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizaciones").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizaciones").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-GenerarFactura", "Generar una factura fiscal!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");

</script>



<div id="ConditionView">
    @*  @await Html.PartialAsync("~/Views/Conditions/pvwConditions.cshtml", new ERPMVC.Models.Conditions { ConditionId = 0 });*@
</div>

<div id="CustomerConditionView">
</div>
