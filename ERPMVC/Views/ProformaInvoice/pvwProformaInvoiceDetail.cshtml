@model ERPMVC.DTO.ProformaInvoiceDTO
@using System.Security.Claims

@{
    ClaimsPrincipal permisos = (ClaimsPrincipal)ViewData["permisosProformaInvoice"];
}

<script>


    function GetSalesOrderId() {
        // console.log($("#DescriptionDetail").val());
        if ($("#SubProductId").val() > 0 ||  @Model.ProformaId>0) {
            var subproductname = '', unidaddemedida = '', taxname = '';
            if ($("#UnitOfMeasureId") != null) {
                if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                    unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
                }
            }

            if ($("#SubProductId") != null) {
                if ($("#SubProductId").data("kendoDropDownList") != null) {
                    subproductname = $("#SubProductId").data("kendoDropDownList").text();
                }
            }

            if ($("#TaxId") != null) {
                if ($("#TaxId").data("kendoDropDownList") != null) {
                    taxname = $("#TaxId").data("kendoDropDownList").text();
                }
            }

            var displayedData = $("#gridProformaInvoiceDetail").data().kendoGrid.dataSource.view();
            var id = -999999;
           // //debugger;
            if (Number($("#ProformaLineId").val()) === 0 ) {
                if (displayedData.length > 0) {
                    for (var i = 0; i < displayedData.length; i++) {
                        //console.log('Linea:' + displayedData[i].ProformaLineId);
                        //console.log('Linea:' + id);
                        if (displayedData[i].ProformaLineId > id)
                            id = displayedData[i].ProformaLineId;

                    }

                    id = id + 1;
                }
                else if ($("#SubProductId").val() > 0) {
                    id = 1;
                }
            }
            else {
                id = $("#ProformaLineId").val();
            }


            return {
                ProformaLineId: id,
                ProformaInvoiceId: @Model.ProformaId,
                /*ProductId: $("#ProductId").val(),*/
                SubProductId: $("#SubProductId").val(),
                SubProductName: subproductname,
                UnitOfMeasureId: $("#UnitOfMeasureId").val(),
                UnitOfMeasureName: unidaddemedida,
                Description: $("#Description").val(),
                Quantity: $("#Quantity").val(),
                Price: $("#Price").val(),
                Amount: $("#AmountLine").val(),
                DiscountPercentage: $("#DiscountPercentage").val(),
                DiscountAmount: $("#DiscountAmount").val(),
                SubTotal: $("#SubTotalLine").val(),
                TaxPercentage: $("#TaxPercentage").val(),
                TaxId: $("#TaxId").val(),
                TaxCode: taxname,
                TaxAmount: $("#TaxAmount").val(),
                Total: $("#TotalLine").val(),
            }
        }
        else {
            return;
        }
    }

    function RefreshCotizacionesDetail() {
        var grid = $("#gridProformaInvoiceDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function AddCotizacionDetalle() {

        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'  ) {

            llenarsubproduct();
            $("#frmSalesOrderLine :input").not('#ProformaLineId').prop("disabled", false);
            $('#ProformaLineId').val(0);
            $('#TaxId').data("kendoDropDownList").value(0);
            $('#SubProductId').data("kendoDropDownList").value(0);
            $("#Quantity").data("kendoNumericTextBox").value(0);
            $("#Price").data("kendoNumericTextBox").value(0);
            $("#Amount").data("kendoNumericTextBox").value(0);
            $("#SubTotalLine").data("kendoNumericTextBox").value(0);
            $("#TaxAmount").data("kendoNumericTextBox").value(0);
            $("#TotalLine").data("kendoNumericTextBox").value(0);
            $('#myModalSalesOrderLine').modal('show');
        } else {
            //var notification = $("#notification").data("kendoNotification");
            //notification.show({
            //    title: "Validación",
            //    message: "Debe seleccionar un producto!"
            //}, "error");
            //$.toast({
            //    heading: 'Validación',
            //    text: 'Debe seleccionar un producto!',
            //    position: 'top-right',
            //    loaderBg: '#ff6849',
            //    icon: 'error',
            //    hideAfter: 7000,
            //    stack: 6
            //});

             MostrarMensaje('Debe seleccionar un producto!', "Error", "Validación", 6000);
        }

    }

    function llenarsubproduct() {
        var combobox = $('#SubProductId').getKendoDropDownList();
        if (combobox != null) {
            var dataObject = { 'ProductId': $("#ProductId").val() };
            $.ajax({
                url: '@Url.Action("GetSubProductByProductIdActivos", "ProductRelation")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (data) {
                    combobox.setDataSource(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    //notification.show({
                    //    title: "Validación",
                    //    message: textStatus + ": " + XMLHttpRequest.responseText
                    //}, "error");
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });
        }
    }




    var hcustom = 0;
    function EditCotizacionDetalle(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
         //debugger;

            var subproducto = 0;
            var dataObject = { ProformaLineId: dataItem.ProformaLineId };


            //var dataObject = { 'ProformaInvoiceId': 0, 'IdsCD': ($("#cbxBuscarCertificadosDeposito").val() == '' ? 0 : $("#cbxBuscarCertificadosDeposito").val()) };
           // console.log(dataObject);
           $.ajax({
                url: '@Url.Action("pvwProformaInvoiceLine", "ProformaInvoiceLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#SalesOrderLineMant").html('');
                    $("#SalesOrderLineMant").html(data);

                    $("#DiscountPercentage").data("kendoNumericTextBox").value(dataItem.DiscountPercentage);
                    $("#DiscountAmount").data("kendoNumericTextBox").value(dataItem.DiscountAmount);
                    $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
                    $("#Description").val(dataItem.Description);
                    $("#TaxPercentage").data("kendoNumericTextBox").value(dataItem.TaxPercentage);
                    $('#SubProductId').data("kendoDropDownList").value(dataItem.SubProductId);
                 //   var txt = $(data);


                    //console.log(hcustom);
                    if ($("#cbxBuscarCertificadosDeposito").length > 0) {
                        llenarsubproduct();
                    }
                    else {

                    }

                    $("#SubProductId").data("kendoDropDownList").dataSource.read();

                    //var combobox = $('#SubProductId').getKendoDropDownList();
                    //if (combobox != null) {
                    //    var found = $("#SubProductId", txt);
                    //    subproducto = $(found).val();
                    //}
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    //notification.show({
                    //    title: "Validación",
                    //    message: textStatus + ": " + XMLHttpRequest.responseText
                    //}, "error");
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
               }
            });


            //debugger;

            $("#btnActualizarCotizacionLinea").prop("disabled", false);
            $("#ProformaLineId").val(dataItem.ProformaLineId);

            hcustom = $("#CustomerId").val();



            $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
           // $("#UnitOfMeasureId").data("kendoDropDownList").value(dataItem.UnitOfMeasureId);
            $("#TaxId").data("kendoDropDownList").value(dataItem.TaxId);
            $("#Description").val(dataItem.Description);
            $("#Quantity").data("kendoNumericTextBox").value(dataItem.Quantity);
            $("#Price").data("kendoNumericTextBox").value(dataItem.Price);
            $("#AmountLine").data("kendoNumericTextBox").value(dataItem.Amount);
            $("#SubTotalLine").data("kendoNumericTextBox").value(dataItem.SubTotal);
            $("#TaxAmount").data("kendoNumericTextBox").value(dataItem.TaxAmount);
            $("#TotalLine").data("kendoNumericTextBox").value(dataItem.Total);
            $("#SubProductId").data("kendoDropDownList").value(dataItem.SubProductId);





        $('#myModalSalesOrderLine').modal('show');

    }


    function Delete(e) {
        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            var grid = $("#gridProformaInvoiceDetail").data("kendoGrid");
            var datasource = grid.dataSource;
            datasource.remove(dataItem);
            $.ajax({
                url: '@Url.Action("Delete", "ProformaInvoiceLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {

                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    //notification.show({
                    //    title: "Validación",
                    //    message: textStatus + ": " + XMLHttpRequest.responseText
                    //}, "error");
                     MostrarMensaje(textStatus + ": " + XMLHttpRequest.responseText, "Error", "Error", 6000);
                }
            });

            grid.dataSource.remove(dataItem);
            CalcularTotalDocumento();
            RefreshCotizacionesDetail();
        }
    }

</script>



<div class="box">
    <h3 class="text-themecolor">Detalle Factura Proforma</h3>
    <br />
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.ProformaInvoiceLine>()
                                                                                  .Name("gridProformaInvoiceDetail")
                                                                                  .Columns(columns =>
                                                                                  {
                                                                                      
                                                                                          columns.Command(command =>
                                                                                          {
                                                                                              if (Model.ProformaId == 0)
                                                                                              {
                                                                                                  
                                                                                                      command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                                                                 
                                                                                                      command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                                                  

                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                  
                                                                                                      command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                                                                  
                                                                                              }


                                                                                              // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                                              //  command.Edit(); command.Destroy();
                                                                                          }).Title("Acciones").Width(200);
                                                                                      
                                                                                      columns.Bound(p => p.ProformaLineId).Title("Id Línea").Width(150);
                                                                                      columns.Bound(p => p.ProformaInvoiceId).Title("Proforma Id").Width(200);
                                                                                      columns.Bound(p => p.SubProductId).Title("IdProducto").Visible(false);
                                                                                      columns.Bound(p => p.SubProductName).Title("Producto").Width(250);
                                                                                      // columns.Bound(p => p.Description).Title("Descripcion").Width(150);
                                                                                      columns.Bound(p => p.Quantity).Format("{0:n2}").Title("Cantidad").Width(250);
                                                                                      columns.Bound(p => p.Price).Format("{0:n2}").Title("Precio").Format("{0:n2}").Width(250);
                                                                                      columns.Bound(p => p.UnitOfMeasureId).Title("Unidad de medida").Visible(false);
                                                                                      //  columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(150);
                                                                                      columns.Bound(p => p.Amount).Format("{0:n2}").Width(250);
                                                                                      columns.Bound(p => p.DiscountAmount).Format("{0:n2}").Title("Monto Descuentos").Width(250);
                                                                                      columns.Bound(p => p.DiscountPercentage).Format("{0:n2}").Title("Descuentos").Width(250);
                                                                                      columns.Bound(p => p.SubTotal).Format("{0:n2}").Title("Sub Total").Width(200);
                                                                                      columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(250);
                                                                                      // columns.Bound(p => p.tax).Title("Tipo Impuesto").Width(150);
                                                                                      columns.Bound(p => p.TaxAmount).Format("{0:n2}").Title("Monto Impuesto").Width(250);
                                                                                      columns.Bound(p => p.Total).Format("{0:n2}").Title("Total").Width(250);

                                                                                  })
                                                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                               .Clear()
                                                                               .Contains("Contiene")
                                                                               .DoesNotContain("No contiene")
                                                                               .EndsWith("Termina con")
                                                                               .IsEqualTo("Es igual a")
                                                                               .IsNotEqualTo("No es igual a")
                                                                               .IsNull("Es nulo")
                                                                               .StartsWith("Inicia con")


                                                                         )
                                                                         .ForNumber(n => n
                                                                           .Clear()
                                                                           .IsEqualTo("Es igual a")
                                                                           .IsGreaterThan("Es mayor que")
                                                                           .IsLessThan("Es menor que")
                                                                           .IsNull("Es nulo")
                                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         )
                                                                         .ForDate(d => d
                                                                         .Clear()
                                                                         .IsEqualTo("Es igual que")
                                                                         .IsGreaterThan("Es mayor que")
                                                                         .IsLessThan("Es menor que")
                                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                         .IsNotEqualTo("No es igual que")
                                                                          )
                                                                       ))
                                                                                  .ToolBar(tools =>
                                                                                  {
                                                                                      if (Model.editar == 1)
                                                                                      {
                                                                                          if (permisos.HasClaim("Ventas.Factura Proforma.Agregar Factura Proforma Detalle", "true"))
                                                                                          {
                                                                                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                                                          }
                                                                                      }
                                                                                          tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                          tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                                                      

                                                                                  })
                                                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                                    .Sortable()
                                                                                    .AutoBind(true)
                                                                                    //.Pageable()
                                                                                    .Filterable()
                                                                                    .Scrollable()
                                                                                    // .ClientDetailTemplateId("template")
                                                                                    .Pdf(pdf => pdf.FileName("CotizacionDetalleReporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                                      .Excel(excel => excel.FileName("CotizacionDetalleReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                                    //.Events(e=>e.Save("onsave"))
                                                                                    .Events(e => e.DataBound("CalcularTotalDocumento"))
                                                                                    .DataSource(dataSource =>

                                                                                   dataSource
                                                                                   //.Ajax()
                                                                                   .WebApi()

                                                                                    .ServerOperation(true)
                                                                                    .Model(model =>
                                                                                    {
                                                                                        model.Id(p => p.ProformaLineId);
                                                                                        model.Field(p => p.ProformaLineId).Editable(false);
                                                                                        model.Field(p => p.ProformaInvoiceId).Editable(false);

                                                                                    })
                                                                                    .Events(events =>
                                                                                    {
                                                                                        events.Error("error_handler");
                                                                                        //events.upda("EditHandler");

                                                                                    })
                                                                                    .Sort(s => s.Add(m => m.ProformaLineId).Descending())
                                                                                    .Read(read => read.Action("GetProformaInvoiceLineByProformaInvoiceId", "ProformaInvoiceLine").Data("GetSalesOrderId"))
                                                                              //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                                              //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                                              //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                                              )
        )

    </div>
</div>


<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridProformaInvoiceDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridProformaInvoiceDetail").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    //setRowButtonTooltip(".k-grid-GenerarFactura", "Generar una factura fiscal!");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");


    setRowButtonTooltip(".k-grid-Editar", "Editar registro");

    setRowButtonTooltip(".k-grid-Agregar", "Agregar nuevo registro");
</script>