@{ Layout = null;
    var messages = new Dictionary<string, string>() { { "custom", "Ingrese un valor correcto." },
// {"required","Valor requerido" }
};
    
    var rules = new Dictionary<string, string>() { { "custom", "customFunction" } };
    var typesAccount = ViewData["TypeAccounts"] as IEnumerable<ERPMVC.Models.TypeAccount>;
}


<script>
    function AddAccounting() {



        $('#ModalAccounting').find(':input').not(':submit').val('');

        $('#ModalAccounting').modal('show');
        $("#AccountId").val('0');





    }


       function EditAccount(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 AccountId: dataItem.AccountId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddAccounting", "Accounting")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumAccounting").html('');
                    $("#NumAccounting").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalAccounting').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }



    var TypeAccountId = 0;
    function TypeAccounting(TypeAccountIdv) {
        kendo.ui.progress($("#divClasificacionCuentas"), true);

        TypeAccountId = TypeAccountIdv;

        var treelist = $("#AccountingTreelist").data("kendoTreeList");
        treelist.dataSource.read();


    }

    function DataTypeAccounting() {
        return { 'TypeAccountId': TypeAccountId }
    }

    function onBound() {
        kendo.ui.progress($("#divClasificacionCuentas"), false);
    }

</script>

<script id="typeAccount-template" type="text/x-kendo-template">
    @*<div class='employee-photo'
        
         url='url(@Url.Action("GetTypeAccount", "TypeAccount"));'></div>
    *@<div class='TypAccountId-name'>#: TypeAccountName #</div>
    @* <kendo-dropdownlist name="TypeAccountId"
                            for="@Model.TypeAccountId"
                            filter="Kendo.Mvc.UI.FilterType.Contains"
                            option-label="Seleccionar Tipo"
                            datatextfield="TypeAccountName"
                            datavaluefield="TypeAccountId"
                            style="width: 100%;">
            <datasource type="DataSourceTagHelperType.WebApi" server-operation="true">
                <transport>
                    <read url="@Url.Action("GetTypeAccount", "TypeAccount")" />
                </transport>
            </datasource>
        </kendo-dropdownlist>
    *@
</script>

@(Html.Kendo().TreeList<ERPMVC.DTO.AccountingDTO>()
                        .Name("AccountingTreelist")
                        .Toolbar(toolbar => toolbar.Create().Text("Padre"))
                        //.Toolbar(toolbar => toolbar.)
                        //    .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddAccounting()" })
                        .Columns(columns =>
                        {

                            columns.Add().Field(f => f.AccountName).Width(550);
                            columns.Add().Field(f => f.AccountBalance).Width(200);
                            columns.Add().Field(f => f.AccountCode).Width(200);
                            columns.Add().Field(f => f.BlockedInJournal).Width(200);
                            columns.Add().Field(f => f.IsCash).Width(200);
                            columns.Add().Field(f => f.TypeAccountId).TemplateId("typeAccount-template").Width(200);//.TemplateId("#=TypeAccount.TypeAccountName#").Sortable(false).Width(200);
                            columns.Add().Field(f => f.ParentAccountId).Width(200);
                            columns.Add().Width(300).Command(c =>
                            {
                                c.CreateChild().Text(" ");
                                c.Edit().Text(" ");  //.IconClass("fa fa-edit").Click("EditAccount");

                            });

                        })

                        //.Toolbar(toolbar => toolbar.Create())

                        //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")



                        .Events(e =>
                        {
                            e.DataBound("onBound");
                        })
                        .Editable(/*e => e.Mode(TreeListEditMode.PopUp)*/)
                        .DataSource(dataSource => dataSource
                            .Create(create => create.Action("SaveAccounting", "Accounting").Type(HttpVerbs.Post))
                        .Read(read => read.Action("AccountingRes", "Accounting").Data("DataTypeAccounting"))
                        .Update(update => update.Action("Update", "Accounting", new { AccountId = "{0}" }).Type(HttpVerbs.Put))
                        .Model(m =>
                        {
                            m.Id(f => f.AccountId);
                            m.ParentId(f => f.ParentAccountId).Editable(false);

                            m.Field(f => f.BlockedInJournal).Editable(true);
                            m.Field(f => f.AccountCode).Editable(true);
                            m.Field(f => f.IsCash).Editable(true);

                            m.Field(f => f.TypeAccountId).Editable(true);
                            //.DefaultValue(
                            //                                          ViewData["defaultTypeAccount"] as ERPMVC.Models.TypeAccount).Editable(true);

                            //.Editable(true);
                            m.Field(f => f.AccountName).Editable(true);
                            m.Field(f => f.AccountBalance).Editable(false);
                            m.Expanded(true);


                        })

                    ).Height(540)
)


@*@foreach (ERPMVC.Models.TypeAccount Tipo in ViewBag.ListTypeAccount)

    {
        if(Tipo.TypeAccountId == ViewBag.AccountingParameter)
        {
        <div id="@Tipo.TypeAccountId" >
        <h4>@Tipo.TypeAccountName</h4>
        @(
                              Html.Kendo().TreeView()
                              .Name("TreeViewTemplateBiding")
                              .TemplateId("TreeViewTemplate")

                                   .BindTo((List<ERPMVC.Models.NodeViewModel>)ViewBag.Tree, (Kendo.Mvc.UI.Fluent.NavigationBindingFactory<TreeViewItem> mappings) =>
                                   {
                                       mappings.For<ERPMVC.Models.NodeViewModel>(binding => binding.ItemDataBound((item, node) =>
                                           {
                                               item.Id = node.Id.ToString();
                                               item.Text = node.Title;
                                               item.Expanded = node.Expanded;
                                           })
                                     .Children(node => node.Children));
                                   }).Checkboxes(true)
        )
        </div>
        }
    }*@
@*
*@

<script>


    $(function () {
        $('ul.k-reset.k-tabstrip-items li').click(function (e) {
            alert("Seleccionaste: " + '#@ViewBag.AccountingParameter');
        @* //  div = document.getElementById('@ViewBag.AccountingParameter');*@
            //div.style.display = '';
            // $( "#resultado" ).text( "Seleccionaste: "+this.id);
            /* Aquí si quieres lanzar más acciones de acuerdo al li
                seleccionado puedes implementar un if then else
                u otra estructura de condicionales */
        });
    });
    $(document).ready(function () {
        var treelist = $("#AccountingTreelist").data("kendoTreeList");
        treelist.items().each(function (i, el) {
            $(el).on("dblclick", function (event) {
           //     alert($(this).text());
            });
        })
</script>