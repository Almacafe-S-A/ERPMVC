@*<input type="text" deshabilitar="Usuario" value="test" />*@

<h3 class="text-themecolor">Usuarios</h3>


<p><strong>Para la contraseña: </strong>Minimo 6 caracteres/Mayusculas y minusculas</p>
<p><strong>Ejemplo de contraseña: </strong>Bb4567!</p>

<script>
    function addmaskpassword(e) {
        e.container.find(".k-edit-field:eq(2) > input").attr('type', 'password');
    }
</script>

@(Html.Kendo().Grid<ERPMVC.Models.ApplicationUser>()
                      .Name("gridUser")
                      .Columns(columns =>
                      {
                          columns.Bound(p => p.Id).Width(100);
                          columns.Bound(p => p.UserName).Title("Nombre de usuario").Width(150);
                          columns.Bound(p => p.PasswordHash).Title("Contraseña").Width(170);
                          columns.Bound(p => p.Email).Title("Correo").Width(150);
                          columns.Bound(p => p.NormalizedEmail).Title("Correo").Width(150);
                          columns.Bound(p => p.PhoneNumber).Title("Telefono").Width(150);
                          columns.Bound(p => p.IsEnabled).Width(150);
                          columns.Bound(p => p.BranchId).Width(150);

                          columns.Command(command =>
                          {
                              //   command.Custom("Ver detalles").Click("Detalles");
                              command.Edit(); command.Destroy();
                          }).Width(250);

                      })
                      .Events(e => e.Edit("addmaskpassword"))
                          .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
                      .ToolBar(tools =>
                      {
                          tools.Create().Text("Agregar");
                          tools.Excel().HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a excel");
                          tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" }).Text("Exportar a pdf");


                      })

                       .Editable(e => e.Mode(GridEditMode.InLine))
                       .Sortable()
                       .Pageable()
                       .Filterable()
                       .Scrollable()
                       .Pdf(pdf => pdf.FileName("UsuariosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                       .ProxyURL(Url.Action("Export", "Home")).AllPages())
                         .Excel(excel => excel.FileName("UsuariosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                       .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                       .DataSource(dataSource =>
                          dataSource

                            .WebApi()
                            .ServerOperation(true)
                            .Model(model =>
                            {
                                model.Id(p => p.Id);
                                model.Field(p => p.Id).Editable(false);
                                model.Field(p => p.UserName).Editable(false);
                                model.Field(p => p.Email).Editable(true);
                                model.Field(p => p.NormalizedEmail).Editable(false);
                                model.Field(p => p.PhoneNumber).Editable(true);
                                model.Field(p => p.PasswordHash).Editable(true);


                            })
                            .Events(events => events.Error("error_handler"))
                            .Read(read => read.Action("GetUsers", "Usuario"))
                            .Create(create => create.Action("PostUsuario", "Usuario"))
                            .Update(update => update.Action("PutUsuario", "Usuario", new { id = "{0}" }))
                            .Destroy(destroy => destroy.Action("DeleteUsuario", "Usuario", new { id = "{0}" }))
                      )
)