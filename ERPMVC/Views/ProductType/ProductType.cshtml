@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Tipo de Producto";
    bool permisoAgregar, permisoEditar, permisoEliminar, permisoExportar;
    permisoAgregar = (bool)ViewData["permisoAgregar"];
    permisoEditar = (bool)ViewData["permisoEditar"];
    permisoEliminar = (bool)ViewData["permisoEliminar"];
}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddProductType() {
        $('#ModalProductType').find(':input').not(':submit').val('');
        $('#ModalProductType').modal('show');
        $("#ProductTypeId").val('0');
    }


         function EditProductType(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 ProductTypeId: dataItem.ProductTypeId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddProductType", "ProductType")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                   // console.log('success', result)
                    $("#numProductType").html('');
                    $("#numProductType").html(result);

                    //$("#btnCAI").hide();
                    $('#ModalProductType').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }


</script>

<h3 class="text-themecolor">Tipo de producto</h3>

@(Html.Kendo().Grid<ERPMVC.Models.ProductType>
                      ()

                        .Name("gridProductType")

                        .Columns(columns =>
                        {
                            if (permisoEditar == true || permisoEliminar == true)
                            {
                                columns.Command(command =>
                                {
                                    //command.Custom("Ver detalles").Click("Detalles");
                                    if (permisoEditar)
                                    {
                                        command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditProductType");
                                    }
                                    if (permisoEliminar)
                                    {
                                        command.Destroy().Text(" ").IconClass("fa fa-trash-alt");
                                    }

                                }).Width(250).Title("Acciones");
                            }
                            columns.Bound(p => p.ProductTypeId).Width(150);
                            columns.Bound(p => p.ProductTypeName).Width(170);
                            columns.Bound(p => p.Description).Width(200);


                        })


                        .ToolBar(tools =>
                        {

                            //tools.Create();
                            if (permisoAgregar)
                            {
                                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                                              .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddProductType()" });
                            }
                                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                            
                        })
                        .Editable(e => e.Mode(GridEditMode.PopUp))
                        .Sortable()
                        .Pageable()
                        .Filterable()
                        .Scrollable()
                        .Pdf(pdf => pdf.FileName("ProductTypeReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("ProductTypeReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                        .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.ProductTypeId);
                            model.Field(p => p.ProductTypeId).Editable(false);


                        })
                         .Sort(s => s.Add(m => m.ProductTypeId).Descending())
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("Get", "ProductType").Data("ProductType"))
                       //.Create(create => create.Action("Insert", "Product").Type(HttpVerbs.Post))
                       //.Update(update => update.Action("Update", "Product").Type(HttpVerbs.Post))
                       .Destroy(destroy => destroy.Action("Delete", "ProductType").Type(HttpVerbs.Post))
                        )
                        .Events(e =>
                        {
                            e.Save("onsave");

                        })
)

<script>
    function ProductType() {
        return { ProductTypeId: 2 };
    }

  

        function setToolbarTooltip(btn_cl, btn_tooltip) {
            $("#gridProductType").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }



    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridProductType").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }



        setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
        setRowButtonTooltip(".k-grid-Editar", "Editar registro");
        setRowButtonTooltip(".k-grid-delete", "Eliminar registro");

</script>


<div id="numProductType">
    @await Html.PartialAsync("pvwAddProductType", new ERPMVC.DTO.ProductTypeDTO { ProductTypeId = 0 })
</div>

